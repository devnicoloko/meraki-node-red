[
    {
        "id": "a16cb8e.92cd148",
        "type": "tab",
        "label": "Meraki Location API - Google MarkerClusters"
    },
    {
        "id": "dde44442.902c68",
        "type": "tab",
        "label": "Location + Spark"
    },
    {
        "id": "1ca2bf04.e05cf1",
        "type": "tab",
        "label": "Captive Portal"
    },
    {
        "id": "4d80243b.24c82c",
        "type": "tab",
        "label": "Global Settings"
    },
    {
        "id": "94b5e0b8.22242",
        "type": "tab",
        "label": "Admins"
    },
    {
        "id": "c7981b00.4fd838",
        "type": "tab",
        "label": "Clients"
    },
    {
        "id": "bf8b1509.9e0ec8",
        "type": "tab",
        "label": "Config Templates"
    },
    {
        "id": "76b3daf3.b8e4d4",
        "type": "tab",
        "label": "Devices"
    },
    {
        "id": "d2515636.8eee28",
        "type": "tab",
        "label": "L3 Firewall"
    },
    {
        "id": "af61949e.6dc538",
        "type": "tab",
        "label": "Networks"
    },
    {
        "id": "3edf14b6.295adc",
        "type": "tab",
        "label": "Organizations"
    },
    {
        "id": "33a3c3b2.8ff1ec",
        "type": "tab",
        "label": "Phone Contacts"
    },
    {
        "id": "b3924979.5c99a8",
        "type": "tab",
        "label": "Phone Numbers"
    },
    {
        "id": "67bf0549.15921c",
        "type": "tab",
        "label": "SAML Roles"
    },
    {
        "id": "eb3e28a5.911178",
        "type": "tab",
        "label": "SM"
    },
    {
        "id": "703f1816.437fe8",
        "type": "tab",
        "label": "SSIDs"
    },
    {
        "id": "7d8aac49.699ef4",
        "type": "tab",
        "label": "Static Routes"
    },
    {
        "id": "b428d2b0.b23cc",
        "type": "tab",
        "label": "Switch Ports"
    },
    {
        "id": "fcbaf190.03c35",
        "type": "tab",
        "label": "VLANs"
    },
    {
        "id": "6f0211b2.01812",
        "type": "tab",
        "label": "VPN"
    },
    {
        "id": "57dd0a33.2090f4",
        "type": "tab",
        "label": "Workflows"
    },
    {
        "id": "27bac376.4fd3bc",
        "type": "tab",
        "label": "Basics"
    },
    {
        "id": "45ac7f24.44411",
        "type": "tab",
        "label": "Web Form"
    },
    {
        "id": "3e08f755.c41b78",
        "type": "tab",
        "label": "Meraki Location Native"
    },
    {
        "id": "1093e7cc.349a68",
        "type": "tab",
        "label": "Location - Native"
    },
    {
        "id": "dc960824.28baf8",
        "type": "tab",
        "label": "Captive Portal"
    },
    {
        "id": "83498696.f847d8",
        "type": "tab",
        "label": "Dashboard API - Admin Form"
    },
    {
        "id": "fc7c7d4d.73a92",
        "type": "tab",
        "label": "Cisco Spark"
    },
    {
        "id": "e55a9b44.3eb128",
        "type": "tab",
        "label": "NR 101"
    },
    {
        "id": "e3fdf7f2.0edec8",
        "type": "tab",
        "label": "Location Dispatcher"
    },
    {
        "id": "2261c613.84aa3a",
        "type": "websocket-listener",
        "path": "/ws/stations",
        "wholemsg": "false"
    },
    {
        "id": "a65a04f9.a9bac8",
        "type": "mongodb2",
        "z": "a16cb8e.92cd148",
        "uri": "mongodb://localhost:27017/test",
        "name": "test",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "693d0c77.754854",
        "type": "mongodb2",
        "z": "a16cb8e.92cd148",
        "uri": "mongodb://localhost:27017/test",
        "name": "test",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "ce53e011.75d8c",
        "type": "meraki-cmx-settings",
        "z": "",
        "name": "AWS Cory Sandbox"
    },
    {
        "id": "1d0e3703.b3cf39",
        "type": "mongodb2",
        "z": "dde44442.902c68",
        "uri": "mongodb://localhost:27017/test",
        "name": "test",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "8b17c798.a9a2d8",
        "type": "meraki-cmx-settings",
        "z": "",
        "name": "HeinekenCMX"
    },
    {
        "id": "d8263159.a90f",
        "type": "Spark Authentication",
        "z": "",
        "name": "Spark Eelco"
    },
    {
        "id": "93dc9728.0f1928",
        "type": "Spark Authentication",
        "z": "dde44442.902c68",
        "name": "CMX Bot"
    },
    {
        "id": "226444cf.f8084c",
        "type": "meraki-cmx-settings",
        "z": "dde44442.902c68",
        "name": "Meraki CMX"
    },
    {
        "id": "8bea88ff.f90638",
        "type": "Spark Authentication",
        "z": "dde44442.902c68",
        "name": "CMX Bot"
    },
    {
        "id": "f2d2ab18.cd9038",
        "type": "mongodb",
        "hostname": "127.0.0.1",
        "port": "27017",
        "db": "test",
        "name": ""
    },
    {
        "id": "e30b6007.de57f",
        "type": "mongodb",
        "hostname": "127.0.0.1",
        "port": "27017",
        "db": "test",
        "name": ""
    },
    {
        "id": "2e1f911e.8b49fe",
        "type": "Spark Authentication",
        "z": "",
        "name": "Cory"
    },
    {
        "id": "56810df3.4f1154",
        "type": "mongodb2",
        "z": "1093e7cc.349a68",
        "uri": "mongodb://localhost:27017/test",
        "name": "test",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "3a95e068.9342d",
        "type": "meraki-cmx-settings",
        "z": "",
        "name": "CiscoLive DevNet - Berlin 2017 Production"
    },
    {
        "id": "736eae77.9f91f",
        "type": "http in",
        "z": "a16cb8e.92cd148",
        "name": "",
        "url": "/clients",
        "method": "get",
        "swaggerDoc": "",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "22f8ee54.4a0012"
            ]
        ]
    },
    {
        "id": "2d2461df.2900de",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "Log data",
        "info": "",
        "x": 147.50000762939453,
        "y": 386.2500057220459,
        "wires": []
    },
    {
        "id": "d62802ec.a22a5",
        "type": "function",
        "z": "a16cb8e.92cd148",
        "name": "build operation parameters: filter, update",
        "func": "// This function updates/creates the client in the database\nvar filter = msg.payload;\nif (\"string\" == typeof filter) {\n  filter = JSON.parse(filter);\n}\n\nmsg.payload = [\n    {'name':msg.payload.name},\n    msg.payload,\n    {upsert:true}\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 440,
        "wires": [
            [
                "888bdd38.90f6f"
            ]
        ]
    },
    {
        "id": "888bdd38.90f6f",
        "type": "mongodb2 in",
        "z": "a16cb8e.92cd148",
        "service": "_ext_",
        "configNode": "693d0c77.754854",
        "name": "",
        "collection": "cmxmapapi",
        "operation": "findOneAndUpdate",
        "x": 430,
        "y": 480,
        "wires": [
            [
                "2ba3dce6.9580b4",
                "828e73e0.dea36"
            ]
        ]
    },
    {
        "id": "2ba3dce6.9580b4",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "mongdb insert/update",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 700,
        "y": 480,
        "wires": []
    },
    {
        "id": "94706057.f6d4",
        "type": "function",
        "z": "a16cb8e.92cd148",
        "name": "Format Client",
        "func": "// This function extracts the raw CMX data to create a consistent DB entry\nif(msg.payload === null){\n    return null;\n}\nvar map = msg.payload;\nclient = {}; //reset payload object for clarity\n\n\nif (map['version'] != '2.0'){\n    msg.log = \"got post with unexpected version: #{map['version']}\";\n    return msg;\n}else{\n    msg.log = \"working with correct version\";\n}\n/*\nif (map['type'] != 'DevicesSeen' || 'BluetoothDevicesSeen'){\nmsg.log = \"got post for event that we're not interested in: #{map['type']}\";\nreturn msg;\n}\n*/\n\nvar o = map['data']['observations'];\nconsole.log('map.data.apMac = '+map.data['apMac']);\n   for (var c in o){\n    if (o.hasOwnProperty(c)) {\n        //console.log(\"Key is \" + c + \", value is \" + o[c].location.lat);\n        if (!o[c]['location']){continue}\n        client.name = o[c]['clientMac'];\n        client.mac = o[c]['clientMac'];\n        client.lat = o[c]['location']['lat'];\n        client.lng = o[c]['location']['lng'];\n        client.unc = o[c]['location']['unc'];\n        client.seenString = o[c]['seenTime'];\n        client.seenEpoch = o[c]['seenEpoch'];\n        client.floors = map['data']['apFloors'] === null ? \"\" : map['data']['apFloors'].join;\n        client.manufacturer = o[c]['manufacturer'];\n        client.os = o[c]['os'];\n        client.ssid = o[c]['ssid'];\n        client.ap = map['data']['apMac'];\n        client.apTags = map['data']['apTags'];\n        client.type = map['type'] === \"BluetoothDevicesSeen\" ? \"Bluetooth\" : \"WiFi\";\n        msg.log = \"AP #{map['data']['apMac']} on #{map['data']['apFloors']}: #{c}\";\n        if (client.seenEpoch===null || client.seenEpoch === 0){continue}//  # This probe is useless, so ignore it\n        \n        msg.payload = client;\n        node.send(msg);\n    }else{\n        return null\n    }\n    \n   }\n\n   \nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 361.8333396911621,
        "y": 400.33333015441895,
        "wires": [
            [
                "6b497a0d.575444",
                "d62802ec.a22a5"
            ]
        ]
    },
    {
        "id": "6b497a0d.575444",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "format client",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "7640ba3b.e16774",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "/cmx Raw Data",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 720,
        "y": 240,
        "wires": []
    },
    {
        "id": "2f9b33d8.d5710c",
        "type": "function",
        "z": "a16cb8e.92cd148",
        "name": "CMX Sample Data",
        "func": "msg.payload = {\n    \"version\": \"2.0\",\n    \"secret\": \"supersecret\",\n    \"type\": \"DevicesSeen\",\n    \"data\": {\n        \"apMac\": \"00:18:0a:13:dd:b0\",\n        \"apFloors\": [],\n        \"apTags\": [ \"\", \"home\", \"\" ],\n        \"observations\": [ { \n            \"ipv4\": \"/192.168.0.15\",\n            \"location\": {\n                \"lat\": 51.5355157,\n                \"lng\": -0.06990350000000944,\n                \"unc\": 1.1185886512767726,\n                \"x\": [], \"y\": [] \n                \n            },\n            \"seenTime\": \"2016-07-29T13:17:10Z\",\n            \"ssid\": \".interwebs\",\n            \"os\": \"Debian-based Linux\",\n            \"clientMac\": \"CC:CC:CC:CC:CC:CC\",\n            \"seenEpoch\": 1469798230,\n            \"rssi\": 48,\n            \"ipv6\": null,\n            \"manufacturer\": \"Edimax Technology\" \n            }, \n            { \n            \"ipv4\": null,\n            \"location\": {\n                \"lat\": 51.5133157,\n                \"lng\": -0.06890350000000944,\n                \"unc\": 49, \"x\": [],\n                \"y\": []\n                },\n            \"seenTime\": \"2016-07-29T13:17:07Z\",\n            \"ssid\": \"Hotspot-123\",\n            \"os\": \"fancyOS\",\n            \"clientMac\": \"DD:DD:DD:DD:DD:DD\",\n            \"seenEpoch\": 1469798227,\n            \"rssi\": 9,\n            \"ipv6\": null,\n            \"manufacturer\": \"Samsung(THAILAND)\"\n            }\n        ]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 371.8333396911621,
        "y": 340.33333015441895,
        "wires": [
            [
                "94706057.f6d4",
                "c77213e1.89203"
            ]
        ]
    },
    {
        "id": "21cb80be.e7f04",
        "type": "inject",
        "z": "a16cb8e.92cd148",
        "name": "Sample Client C D",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 151.8333396911621,
        "y": 340.33333015441895,
        "wires": [
            [
                "2f9b33d8.d5710c"
            ]
        ]
    },
    {
        "id": "c77213e1.89203",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "CMX Sample Raw Data",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 690,
        "y": 340,
        "wires": []
    },
    {
        "id": "6c628487.61722c",
        "type": "mongodb2 in",
        "z": "a16cb8e.92cd148",
        "service": "_ext_",
        "configNode": "693d0c77.754854",
        "name": "",
        "collection": "cmxmapapi",
        "operation": "find.toArray",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "126c41b1.c6aa0e"
            ]
        ]
    },
    {
        "id": "681b12e6.0e0f9c",
        "type": "inject",
        "z": "a16cb8e.92cd148",
        "name": "List all clients",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "6c628487.61722c"
            ]
        ]
    },
    {
        "id": "126c41b1.c6aa0e",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "List mongo data",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 720,
        "y": 580,
        "wires": []
    },
    {
        "id": "fa5c0533.04c2e8",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "Client Front-end API",
        "info": "",
        "x": 110,
        "y": 760,
        "wires": []
    },
    {
        "id": "17b08238.0b942e",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "Receive CMX Data",
        "info": "",
        "x": 124.16669464111328,
        "y": 197.91666412353516,
        "wires": []
    },
    {
        "id": "98f306f4.b8e0f8",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "Database Utilities",
        "info": "",
        "x": 120,
        "y": 540,
        "wires": []
    },
    {
        "id": "9977962c.272658",
        "type": "function",
        "z": "a16cb8e.92cd148",
        "name": "CMX Sample Data",
        "func": "msg.payload = {\n    \"version\": \"2.0\",\n    \"secret\": \"supersecret\",\n    \"type\": \"DevicesSeen\",\n    \"data\": {\n        \"apMac\": \"00:18:0a:13:dd:b0\",\n        \"apFloors\": [],\n        \"apTags\": [ \"\", \"home\", \"\" ],\n        \"observations\": [ { \n            \"ipv4\": \"/192.168.0.15\",\n            \"location\": {\n                \"lat\": 51.5155157,\n                \"lng\": -0.06590350000000944,\n                \"unc\": 1.2185886512767726,\n                \"x\": [], \"y\": [] \n                \n            },\n            \"seenTime\": \"2016-07-29T13:17:10Z\",\n            \"ssid\": \".interwebs\",\n            \"os\": \"Debian-based Linux\",\n            \"clientMac\": \"AA:AA:AA:AA:AA:AA\",\n            \"seenEpoch\": 1469795230,\n            \"rssi\": 48,\n            \"ipv6\": null,\n            \"manufacturer\": \"Edimax Technology\" \n            }, \n            { \n            \"ipv4\": null,\n            \"location\": {\n                \"lat\": 51.5215157,\n                \"lng\": -0.069905350000000944,\n                \"unc\": 49, \"x\": [],\n                \"y\": []\n                },\n            \"seenTime\": \"2016-07-29T13:17:07Z\",\n            \"ssid\": null,\n            \"os\": null,\n            \"clientMac\": \"BB:BB:BB:BB:BB:BB\",\n            \"seenEpoch\": 1469598227,\n            \"rssi\": 9,\n            \"ipv6\": null,\n            \"manufacturer\": \"Samsung(THAILAND)\"\n            }\n        ]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 371.8333396911621,
        "y": 300.33333015441895,
        "wires": [
            [
                "94706057.f6d4"
            ]
        ]
    },
    {
        "id": "a1b7c4d.3210c38",
        "type": "inject",
        "z": "a16cb8e.92cd148",
        "name": "Sample Client A B",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 151.8333396911621,
        "y": 300.33333015441895,
        "wires": [
            [
                "9977962c.272658"
            ]
        ]
    },
    {
        "id": "e3a4c6e2.54d998",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "Client Front-end Site - Websockets",
        "info": "",
        "x": 160,
        "y": 960,
        "wires": []
    },
    {
        "id": "668c2269.0ef5fc",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "README",
        "info": "#Cisco Meraki CMX API - Demo Map\nThis Flow is an example of how to use the Cisco Meraki CMX\nJSON feed to store clients into a database and track them\non a Google map.\n\nThere are three major components\n- CMX Receier\n- Front-end API\n- Front-end Website (Google MAP)\n\n\n##CMX Receier -\nThe CMX Receiver utilizes the Node-RED CMX node to collect\nJSON data from a Cisco Meraki network. This feed is generally\nupdated within 2 minutes. There are two Sample Clients feeds\nthat can be used to test the flow.\n\nOnce the data has been received, the JSON is parsed and\ncommitted to a MongoDB. Please ensure your MongoDB is running\nfor this flow to work properly.\n\n\n##Front-end API - \nThere are two [GET] HTTP routes that provide access to the \ncollected client data. These will be used by the front-end \nwebsite to pull the client information for all or specific\nclients. Fun Fact: You can also use these routes with Postman\nor a standard browser to pull the data directly.\n\n##Front-end Website - \nThis will provide the webpage to view the Google map and \ntrack clients.\nThe website can be viewed at\n`http://yourserver:1880/cmxapimap`\n\n#Setup\n- Configure a Cisco Meraki network to post the CMX JSON to\nyour listening URL. Example: `http://yourserver:1880/cmx`\n\n- Install and configure MongoDB. Then update the MongoDB2 \nnodes within your flow to match the appropriate settings.\nExample: `mongodb://localhost:27017/test`\n\n- Insert Sample Client information by pressing the blue\nbuttons for each. Note, this will place the clients in London\nby default. Remove these clients if you do not want to \nconfuse your map centering\n\nMore information can be found on the Meraki Developers portal\nhttp://developers.meraki.com/tagged/Location\n\n\nThis flow was created by \nCory Guynn\nSystems Engineer\nCisco Meraki \n2016\n\nFor other fun IoT projects\nhttp://www.InternetOfLEGO.com\n\nMIT License. \n\n",
        "x": 397.50000762939453,
        "y": 166.2500057220459,
        "wires": []
    },
    {
        "id": "a49b90df.c009",
        "type": "mongodb2 in",
        "z": "a16cb8e.92cd148",
        "service": "_ext_",
        "configNode": "693d0c77.754854",
        "name": "",
        "collection": "cmxmapapi",
        "operation": "removeMany",
        "x": 430,
        "y": 620,
        "wires": [
            [
                "ae90db59.0fadf8"
            ]
        ]
    },
    {
        "id": "3efa410.2104fc",
        "type": "inject",
        "z": "a16cb8e.92cd148",
        "name": "DELETE all clients",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 620,
        "wires": [
            [
                "a49b90df.c009"
            ]
        ]
    },
    {
        "id": "ae90db59.0fadf8",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "DELETE mongo data",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 700,
        "y": 620,
        "wires": []
    },
    {
        "id": "74b27bd6.ad0494",
        "type": "http in",
        "z": "a16cb8e.92cd148",
        "name": "",
        "url": "/map",
        "method": "get",
        "swaggerDoc": "",
        "x": 100,
        "y": 1020,
        "wires": [
            [
                "cd2bf817.0b4918"
            ]
        ]
    },
    {
        "id": "616a3b92.b3c304",
        "type": "http response",
        "z": "a16cb8e.92cd148",
        "name": "",
        "x": 770,
        "y": 1060,
        "wires": []
    },
    {
        "id": "180dfda6.c05fa2",
        "type": "http in",
        "z": "a16cb8e.92cd148",
        "name": "",
        "url": "/notify",
        "method": "post",
        "swaggerDoc": "",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "2c1ab2f7.64576e"
            ]
        ]
    },
    {
        "id": "cb773948.7aaac8",
        "type": "http response",
        "z": "a16cb8e.92cd148",
        "name": "",
        "x": 770,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2c1ab2f7.64576e",
        "type": "function",
        "z": "a16cb8e.92cd148",
        "name": "Response Message",
        "func": "var response = JSON.stringify(msg.req.body);\nmsg.payload = \"Success! \\n \"+response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 1220,
        "wires": [
            [
                "cb773948.7aaac8",
                "d7101ae7.1db8a8"
            ]
        ]
    },
    {
        "id": "d7101ae7.1db8a8",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "notify - This could be a Task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 700,
        "y": 1260,
        "wires": []
    },
    {
        "id": "98f12be5.a12ff8",
        "type": "Meraki CMX",
        "z": "a16cb8e.92cd148",
        "name": "/cmx Meraki Location API",
        "url": "/cmx",
        "settings": "ce53e011.75d8c",
        "x": 161,
        "y": 237,
        "wires": [
            [
                "94706057.f6d4",
                "7640ba3b.e16774"
            ]
        ]
    },
    {
        "id": "89cb4ea1.b9576",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "Workflow Example",
        "info": "",
        "x": 113.75000762939453,
        "y": 1165.0000171661377,
        "wires": []
    },
    {
        "id": "828e73e0.dea36",
        "type": "link out",
        "z": "a16cb8e.92cd148",
        "name": "New Observation",
        "links": [
            "dddeb1cd.04a17"
        ],
        "x": 615,
        "y": 520,
        "wires": []
    },
    {
        "id": "acf1a260.39726",
        "type": "comment",
        "z": "a16cb8e.92cd148",
        "name": "Lookup Clients (w/ filter support)",
        "info": "",
        "x": 150,
        "y": 820,
        "wires": []
    },
    {
        "id": "e8dc75aa.84ab18",
        "type": "mongodb2 in",
        "z": "a16cb8e.92cd148",
        "service": "_ext_",
        "configNode": "693d0c77.754854",
        "name": "",
        "collection": "cmxmapapi",
        "operation": "find.toArray",
        "x": 560,
        "y": 880,
        "wires": [
            [
                "ac0f04ab.6029e8",
                "3e4b0f69.3b3e9"
            ]
        ]
    },
    {
        "id": "ac0f04ab.6029e8",
        "type": "http response",
        "z": "a16cb8e.92cd148",
        "name": "",
        "x": 770,
        "y": 880,
        "wires": []
    },
    {
        "id": "3e4b0f69.3b3e9",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "find({})",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "22f8ee54.4a0012",
        "type": "function",
        "z": "a16cb8e.92cd148",
        "name": "README - Filter Options",
        "func": "// Filter results based on query string\n\n\n\nfilter = msg.payload;\n\nif(filter.type){\n    // i.e. http://localhost:1880/clients/?type=Bluetooth\n    msg.payload = {'type':{$in:[filter.type]}};\n}else if(filter.mac){\n    // i.e. http://localhost:1880/clients/?mac=54:60:09:37:ff:ff\n    msg.payload = {'mac':{$in:[filter.mac]}};\n}else if(filter.seenString){\n    //http://localhost:1880/clients/?seenString=2017-03-18T16:41:42Z\n    msg.payload = {'seenString': {$gte: filter.seenString}};\n}else if(filter.apTags){\n    //http://localhost:1880/clients/?apTags=BLE\n    msg.payload = {'apTags':{$in:[filter.apTags]}};\n}else if(filter.manufacturer){\n    //http://localhost:1880/clients/?manufacturer=Apple\n    msg.payload = {'manufacturer':{$in:[filter.manufacturer]}}; \n}else if(filter.ssid){\n    //http://localhost:1880/clients/?ssid=GuestWiFi\n    msg.payload = {'ssid':{$in:[filter.ssid]}}; \n}else if(filter.ap){\n    //http://localhost:1880/clients/?ap=00:22:09:37:ff:ff\n    msg.payload = {'ap':{$in:[filter.ap]}}; \n}else{\n    //msg.payload = {};\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 880,
        "wires": [
            [
                "e8dc75aa.84ab18"
            ]
        ]
    },
    {
        "id": "8124151c.941438",
        "type": "template",
        "z": "a16cb8e.92cd148",
        "name": "CSS",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "html, body {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: \"proxima-nova-1\",\"proxima-nova-2\", \"Helvetica Neue\", Helvetica, verdana, sans-serif;\n  -webkit-font-smoothing: antialiased;\n}\n\n#masthead {\n  height: 125px;\n  width: 100%;\n  position: relative;\n  background: #FFFFFF;\n  border-top: 4px solid #78be20;\n  box-shadow: 0 2px 7px rgba(0,0,0,0.2);\n}\n\n#masthead-content {\n  margin: 0 auto;\n  position: relative;\n  width: 80%;\n  height: 100%;\n}\n\n#masthead-content img {\n  float: left;\n  margin: 32px;\n  width: 165px;\n  margin-left: 0;\n}\n\n#content {\n  width: 80%;\n  margin: 60px auto;\n  padding: 40px;\n  box-sizing: border-box;\n  border-radius: 9px;\n  background: #FAFAFA;\n}\n\n#mac-address {\n  margin-bottom: 10px;\n}\n\n#mac-field {\n  width: 30%;\n  height: 35px;\n  margin-bottom: 20px;\n  padding-left: 13px;\n  border: 1px solid #E6E6E6;\n  border-radius: 2px;\n  box-sizing: border-box;\n  font-family: \"proxima-nova-1\",\"proxima-nova-2\", \"Helvetica Neue\", Helvetica, verdana, sans-serif;\n  font-size: 16px;\n  font-weight: 100;\n  min-width: 136px;\n}\n\n#map-wrapper {\n  width: 100%;\n  height: 700px;\n}\n\n#map-canvas {\n  height: 70%;\n  width: 95%;\n}\n\n\nh1 {\n  color: #78be20;\n  font-weight: 100;\n  font-size: 38px;\n  margin-top: 0;\n  letter-spacing: -1px;\n}\n\n\n#last-mac {\n  color: #6B6B6B;\n  width: 100%;\n  font-weight: 400;\n  margin-bottom: 10px;\n  font-size: 14px;\n}\n\n#search-filter {\n  color: #6B6B6B;\n  width: 100%;\n  font-weight: 400;\n  margin-bottom: 10px;\n  font-size: 20px;\n}\n\n.small {\n  color: #6B6B6B;\n  font-weight: 400;\n  margin-bottom: 30px;\n  font-size: 14px;\n}\n\n.bold {\n  font-weight: 600;\n}\n\nbutton, input {\n  width: 11%;\n}\n\nbutton {\n  height: 35px;\n  border: none;\n  background: #737373;\n  border-radius: 2px;\n  box-sizing: border-box;\n  color: white;\n  font-family: \"proxima-nova-1\",\"proxima-nova-2\", \"Helvetica Neue\", Helvetica, verdana, sans-serif;\n  font-weight: 200;\n  font-size: 14px;\n  padding: 0;\n  min-width: 70px;\n}\n\nbutton:hover{\n  background: #616060;\n}\n",
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "947763a7.8c6f8"
            ]
        ]
    },
    {
        "id": "947763a7.8c6f8",
        "type": "template",
        "z": "a16cb8e.92cd148",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n  <head>\n    <title>CMX push API demo app with Node-RED</title>\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n    <meta charset=\"utf-8\">\n    <script>TypekitConfig={kitId:\"hum1oye\",scriptTimeout:1.5e3},function(){var a=document.getElementsByTagName(\"html\")[0];a.className+=\" wf-loading\";var b=setTimeout(function(){a.className=a.className.replace(/(\\s|^)wf-loading(\\s|$)/g,\"\"),a.className+=\" wf-inactive\"},TypekitConfig.scriptTimeout),c=document.createElement(\"script\");c.src=\"//use.typekit.com/\"+TypekitConfig.kitId+\".js\",c.type=\"text/javascript\",c.async=\"true\",c.onload=c.onreadystatechange=function(){var a=this.readyState;if(!a||a==\"complete\"||a==\"loaded\"){clearTimeout(b);try{Typekit.load(TypekitConfig)}catch(c){}}};var d=document.getElementsByTagName(\"script\")[0];d.parentNode.insertBefore(c,d)}()</script>\n    <script src=\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCWFVfLzjGaepofBse9sHFF-S-mtqVjzLA\"></script>\n    <script src=\"http://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.23/jquery-ui.min.js\"></script>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markerclustererplus/2.1.4/markerclusterer.min.js\"></script>\n        <script src=\"https://code.jquery.com/jquery-3.2.0.min.js\"\n      integrity=\"sha256-JAW99MJVpJBGcbzEuXk4Az05s/XyDdBomFqNlM3ic+I=\"\n      crossorigin=\"anonymous\"></script>\n    <script>{{{payload.script}}}</script>\n    <style>{{{payload.style}}}</style>\n  </head>\n  <body>\n    <div id=\"masthead\">\n      <div id=\"masthead-content\">\n        <img src=\"https://meraki.cisco.com/img/cisco-meraki.png\"/>\n      </div>\n    </div>\n    <div id=\"content\">\n      <h1>CMX API Demo with Node-RED</h1>\n      <div id=\"mac-address\">\n        <input id=\"mac-field\" type=\"text\" placeholder=\"Enter MAC address\" />&nbsp;\n        <button id=\"track\">Follow</button>&nbsp;\n        <button id=\"all\">View All</button>\n        <button id=\"ble\">Bluetooth Only</button>\n        <button id=\"wifi\">WiFi Only</button>\n        <button><a href=/clients target=\"_blank\" style=\"text-decoration:none; color: inherit\">View All - JSON</a></button>\n      </div>\n      <label>Search Filter</label><div id=\"search-filter\"></div>\n      <div id=\"last-mac\"></div>\n      <div class=\"small\"><span class=\"bold\">Clients in the wrong place?</span> Make sure your APs are placed properly in Dashboard.</div>\n      <div id=\"map-wrapper\">\n        <div id=\"map-canvas\"></div>\n      </div>\n    </div>\n  </body>\n</html>",
        "x": 410,
        "y": 1060,
        "wires": [
            [
                "616a3b92.b3c304"
            ]
        ]
    },
    {
        "id": "cd2bf817.0b4918",
        "type": "template",
        "z": "a16cb8e.92cd148",
        "name": "JavaScript (Google Map) - interval disabled",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "(function ($) {\n  var map,                                      // This is the Google map\n    clientMarker,                               // The current marker when we are following a single client\n    markerCluster,\n    clientUncertaintyCircle,                    // The circle describing that client's location uncertainty\n    lastEvent,                                  // The last scheduled polling task\n    lastInfoWindowMac,                          // The last Mac displayed in a marker tooltip\n    allMarkers = [],                            // The markers when we are in \"View All\" mode\n    lastMac = \"\",                               // The last requested MAC to follow\n    infoWindow = new google.maps.InfoWindow();  // The marker tooltip\n    // create marker cluster\n\t\n    /*\n    ,\n    markerImage = new google.maps.MarkerImage('blue_circle.png',\n      new google.maps.Size(15, 15),\n      new google.maps.Point(0, 0),\n      new google.maps.Point(4.5, 4.5)\n    );\n    */\n    \n    var latlngbounds = new google.maps.LatLngBounds();\n\n  // Removes all markers\n  function clearAll() {\n    allMarkers = [];\n    clientMarker.setMap(null);\n    markerCluster.setMap(null);\n    clientUncertaintyCircle.setMap(null);\n    lastInfoWindowMac = \"\";\n    var m;\n    while (allMarkers.length !== 0) {\n      m = allMarkers.pop();\n      if (infoWindow.anchor === m) {\n        lastInfoWindowMac = m.mac;\n      }\n      m.setMap(null);\n    }\n  }\n\n\n  // Adds a marker for a single client within the \"view all\" perspective\n  function addMarker(client) {\n    var marker = new google.maps.Marker({\n\t    position: new google.maps.LatLng(client.lat,client.lng),\n\t    map: map,\n\t    animation: google.maps.Animation.DROP,\n\t    title: client.name,\n\t    client: client\n    });\n    \n    console.log(\"adding marker: \"+client.name+\" Last Seen: \"+client.seenString)\n    \n    //extend the bounds to include each marker's position\n    latlngbounds.extend(marker.position);\n    \n    //add marker to all markers for use with cluster\n    allMarkers.push(marker); \n    \n    google.maps.event.addListener(marker, \"click\", function () {\n        var info =\n            \"<div class='content'>\"+\n                \"<h4>Client: \"+marker.title+\"</h4>\"+\n                \"<p>Type: \"+marker.client.type+\"</p>\"+  \n                \"<p>Last Seen: \"+marker.client.lastSeen+\"</p>\"+ \n                \"<p>Manufacturer: \"+marker.client.manufacturer+\"</p>\"+ \n                \"(<a class='notify' href='#' data-msg='\" +\n                marker.client.mac + \"'>Notify)</a>\"+\n            \"</div>\"\n        ;\n        \n        infoWindow.setContent(info);\n        infoWindow.setPosition(marker.getPosition());\n        infoWindow.open(map);\n    });\n    \n    createCluster();\n    \n}\n\nfunction createCluster(){\n    //fit the map to marker cluster bounds, ignore if infoWindow is open\n   map.fitBounds(latlngbounds);\n    \n    markerCluster = new MarkerClusterer(map, allMarkers,\n        {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});\n\t\n    \n    google.maps.event.addListener(markerCluster, \"mouseover\", function (mCluster) {    \n        \n        var clusterMarkers = mCluster.getMarkers();\n        var info = \"<div class='content'>\";\n        $.each(clusterMarkers, function(x, marker) {\n            info+=\n            \"<div>\"+\n                \"<h4>Client: \"+marker.title+\"</h4>\"+\n                \"<p>Type: \"+marker.client.type+\"</p>\"+  \n                \"<p>Last Seen: \"+marker.client.seenString+\"</p>\"+ \n                \"<p>Manufacturer: \"+marker.client.manufacturer+\"</p>\"+ \n                \"(<a class='notify' href='#' data-msg='\" +\n                marker.client.mac + \"'>Notify)</a>\"+\n            \"</div>\"\n        });\n        info += \"</div>\"\n        infoWindow.setContent(info);\n        infoWindow.setPosition(mCluster.getCenter());\n        infoWindow.open(map);\n    });\n\n}\n // Plots the location and uncertainty for a single MAC address\n  function track(client) {\n      clearAll();\n      client = client[0];\n      console.log(\"tracking client: \"+JSON.stringify(client));\n    \n    if (client !== undefined && client.lat !== undefined && !(typeof client.lat === 'undefined')) {\n      var pos = new google.maps.LatLng(client.lat, client.lng);\n      console.log('track client pos '+pos);\n      if (client.manufacturer !== undefined) {\n        mfrStr = client.manufacturer + \" \";\n      } else {\n        mfrStr = \"\";\n      }\n      if (client.os !== undefined) {\n        osStr = \" running \" + client.os;\n      } else {\n        osStr = \"\";\n      }\n      if (client.ssid !== undefined) {\n        ssidStr = \" with SSID '\" + client.ssid + \"'\";\n      } else {\n        ssidStr = \"\";\n      }\n      if (client.floors !== undefined && client.floors !== \"\") {\n        floorStr = \" at '\" + client.floors + \"'\"\n      } else {\n        floorStr = \"\";\n      }\n      $('#last-mac').text(mfrStr + \"'\" + lastMac + \"'\" + osStr + ssidStr +\n        \" last seen on \" + client.seenString + floorStr +\n        \" with uncertainty \" + client.unc.toFixed(1) + \" meters\");\n      map.setCenter(pos);\n      clientMarker.setMap(map);\n      clientMarker.setPosition(pos);\n      clientUncertaintyCircle = new google.maps.Circle({\n        map: map,\n        center: pos,\n        radius: client.unc,\n        fillColor: 'RoyalBlue',\n        fillOpacity: 0.25,\n        strokeColor: 'RoyalBlue',\n        strokeWeight: 1\n      });\n    } else {\n      $('#last-mac').text(\"Client '\" + lastMac + \"' could not be found\");\n    }\n  }\n\n  // Displays markers for all clients\n  function trackAll(clients) {\n    clearAll();\n    if (clients.length === 0) {\n      $('#last-mac').text(\"Found no clients (if you just started the web server, you may need to wait a few minutes to receive pushes from Meraki)\");\n    } else { $('#last-mac').text(\"Found \" + clients.length + \" clients\"); }\n    clientUncertaintyCircle.setMap(null);\n    clients.forEach(addMarker);\n    \n  }\n  \n  // Looks up a single MAC address\n   function lookup(mac) {\n    $.getJSON('/clients/?mac=' + mac, function (response) {\n      track(response);\n    });\n  }\n\n  // Looks up all MAC addresses\n  function lookupAll() {\n    $('#search-filter').text(\"All Clients\");\n    $('#last-mac').text(\"Looking up all clients...\");\n    $.getJSON('/clients/', function (response) {\n      trackAll(response);\n    });\n  }\n    // Looks up all MAC addresses\n  function lookupBLE() {\n    $('#search-filter').text(\"Bluetooth\");\n    $('#last-mac').text(\"Looking up all Bluetooth clients...\");\n    $.getJSON('/clients/?type=Bluetooth', function (response) {\n      trackAll(response);\n    });\n  }\n  \n  // Looks up all MAC addresses\n  function lookupWiFi() {\n    $('#search-filter').text(\"WiFi\");\n    $('#last-mac').text(\"Looking up all WiFi clients...\");\n    $.getJSON('/clients/?type=WiFi', function (response) {\n      trackAll(response);\n    });\n  }\n  \n  // Dynamic filter lookup - NOT IN USE YET\n    function filterLookup(filter,data){\n      $.getJSON('/clients/&'+filter+'='+data, function (response){\n          trackAll(response);\n      });\n  }\n\n  // Begins a task timer to reload a single MAC every 20 seconds\n  function startLookup() {\n    lastMac = $('#mac-field').val().trim();\n    if (lastEvent !== null) { window.clearInterval(lastEvent); }\n    lookup(lastMac);\n    //lastEvent = window.setInterval(lookup, 20000, lastMac);\n  }\n  \n  // Begins a task timer to reload all MACs every 20 seconds\n  function startLookupAll() {\n    if (lastEvent !== null) { window.clearInterval(lastEvent); }\n    //lastEvent = window.setInterval(lookupAll, 20000);\n    lookupAll();\n  }\n  // Begins a task timer to reload all MACs every 20 seconds\n  function startLookupBLE() {\n    if (lastEvent !== null) { window.clearInterval(lastEvent); }\n    //lastEvent = window.setInterval(lookupBLE, 20000);\n    lookupBLE();\n  }\n    // Begins a task timer to reload all MACs every 20 seconds\n  function startLookupWiFi() {\n    if (lastEvent !== null) { window.clearInterval(lastEvent); }\n    //lastEvent = window.setInterval(lookupWiFi, 20000);\n    lookupWiFi();\n  }\n\n  // This is called after the DOM is loaded, so we can safely bind all the\n  // listeners here.\n  function initialize() {\n    var center = new google.maps.LatLng(37.7705, -122.3870);\n    var mapOptions = {\n      zoom: 20,\n      center: center\n    };\n    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);\n    \n    clientMarker = new google.maps.Marker({\n      position: center,\n      map: null,\n      //icon: markerImage\n    });\n    \n    markerCluster = new MarkerClusterer(map, allMarkers,\n        {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});\n\t\n    clientUncertaintyCircle = new google.maps.Circle({\n      position: center,\n      map: null\n    });\n\n    $('#track').click(startLookup).bind(\"enterKey\", startLookup);\n    $('#all').click(startLookupAll);\n    $('#wifi').click(startLookupWiFi);\n\t$('#ble').click(startLookupBLE);\n\n    $(document).on(\"click\", \".notify\", function (e) {\n        e.preventDefault();\n        var msg = $(this).data('msg');\n      \n      \n        $.post( \"/notify\", { \n                time: new Date(),\n                msg:msg\n            })\n            .done(function( response ) {\n                alert( \"Notification Sent: \" + response );\n        });      \n        \n    });\n\n    $(document).on(\"click\", \".client-filter\", function (e) {\n      e.preventDefault();\n      var mac = $(this).data('mac');\n      $('#mac-field').val(mac);\n      startLookup();\n    });\n\n    // DEFAULT MAP MARKERS (All/BLE/WiFI, etc)\n    //startLookupAll();\n    startLookupBLE();\n    \n  }\n\n  // Call the initialize function when the window loads\n  $(window).on('load', initialize);\n}(jQuery));",
        "x": 390,
        "y": 1020,
        "wires": [
            [
                "8124151c.941438"
            ]
        ]
    },
    {
        "id": "3777f966.fb00b6",
        "type": "mongodb2 in",
        "z": "a16cb8e.92cd148",
        "service": "_ext_",
        "configNode": "693d0c77.754854",
        "name": "",
        "collection": "cmxmapapi",
        "operation": "removeMany",
        "x": 430,
        "y": 720,
        "wires": [
            [
                "c5bf9dd7.fffe9"
            ]
        ]
    },
    {
        "id": "fbe0adc3.71063",
        "type": "inject",
        "z": "a16cb8e.92cd148",
        "name": "DELETE clients oder than..",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 170,
        "y": 680,
        "wires": [
            [
                "3e994ae6.35ab06"
            ]
        ]
    },
    {
        "id": "c5bf9dd7.fffe9",
        "type": "debug",
        "z": "a16cb8e.92cd148",
        "name": "DELETE mongo data",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 700,
        "y": 720,
        "wires": []
    },
    {
        "id": "3e994ae6.35ab06",
        "type": "function",
        "z": "a16cb8e.92cd148",
        "name": "1 Day - filter",
        "func": " var days = 1; //1 Day\n var date = new Date();\n date.setDate(date.getDate()-days);\nmsg.payload = {'seenString': {$gte: date}};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 680,
        "wires": [
            [
                "3777f966.fb00b6"
            ]
        ]
    },
    {
        "id": "82e076db.418f98",
        "type": "template",
        "z": "a16cb8e.92cd148",
        "name": "Google Map - Overlay Concept",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "/**\n * Google Maps API V3 with jQuery\n * \n * One Thousand Markers loaded fast using document.createDocumentFragment();\n * \n * @author Nick Johnson {@link http://nickjohnson.com}\n * @link http://nickjohnson.com/b/\n */\nvar allMarkers;\n\n// Looks up all MAC addresses\nfunction lookupAll() {\n    $('#search-filter').text(\"All Clients\");\n    $('#last-mac').text(\"Looking up all clients...\");\n    $.getJSON('/clients/', function (response) {\n      allMarkers = response;\n    });\n}\n  \n$(document).ready(function(){\n\t\t\n\tfunction MyOverlay( options )\n\t{\n\t    this.setValues( options );\n\t    this.markerLayer = $('<div />').addClass('overlay');\n\t};\n\n\t// MyOverlay is derived from google.maps.OverlayView\n\tMyOverlay.prototype = new google.maps.OverlayView;\n\n\tMyOverlay.prototype.onAdd = function()\n\t{\n\t    var $pane = $(this.getPanes().overlayImage); // Pane 4\n        $pane.append( this.markerLayer );\n\t};\n\n\tMyOverlay.prototype.onRemove = function()\n\t{\n\t\tthis.markerLayer.remove();\n\t};\n\n\tMyOverlay.prototype.draw = function()\n\t{\n\t    var projection = this.getProjection();\n\t    var zoom = this.getMap().getZoom();\n\t    var fragment = document.createDocumentFragment();\n\t    \n\t    this.markerLayer.empty(); // Empty any previous rendered markers\n\t    \n\t    $.getJSON('/clients/', function (allMarkers) {\n            \n\t\t    for(var i = 0; i < allMarkers.length(); i++){\n\n\t\t\tvar marker = new google.maps.LatLng(\n\t\t\t        allMarkers[i].lat,\n\t\t\t        allMarkers[i].lng\n\t\t\t);\n\t\t\t\n\t\t\tvar location = projection.fromLatLngToDivPixel( marker );\n\t\t\t\tvar $point = $('<div '\n\t\t\t\t\t\t\t\t\t+'class=\"map-point\" '\n\t\t\t\t\t\t\t\t\t+'id=\"p'+i+'\"'\n\t\t\t\t\t\t\t\t\t+'title=\"'+allMarkers[i].mac+'\" '\n\t\t\t\t\t\t\t\t\t+'style=\"'\n\t\t\t\t\t\t\t\t\t\t+'width:8px; '\n\t\t\t\t\t\t\t\t\t\t+'height:8px; '\n\t\t\t\t\t\t\t\t\t\t+'left:'+marker.x+'px; '\n\t\t\t\t\t\t\t\t\t\t+'top:'+marker.y+'px; '\n\t\t\t\t\t\t\t\t\t\t+'position:absolute; '\n\t\t\t\t\t\t\t\t\t\t+'cursor:pointer; '\n\t\t\t\t\t\t\t\t+'\">'\n\t\t\t\t\t\t\t\t\t+'<img '\n\t\t\t\t\t\t\t\t\t\t+'src=\"fish-mini-20.png\" '\n\t\t\t\t\t\t\t\t\t\t+'style=\"position: absolute; top: -6px; left: -6px\" '\n\t\t\t\t\t\t\t\t\t+'/>'\n\t\t\t\t\t\t\t\t+'</div>');\n\t\t\t\t\n\t\t\t\t// For zoom 8 and closer show a title above the marker icon\n\t\t\t\tif( zoom >= 8 ){\n\t\t\t\t\t$point.append('<span '\n\t\t\t\t\t\t\t\t\t+'style=\"'\n\t\t\t\t\t\t\t\t\t\t+'position:absolute; '\n\t\t\t\t\t\t\t\t\t\t+'top:-22px; '\n\t\t\t\t\t\t\t\t\t\t+'left:-37px; '\n\t\t\t\t\t\t\t\t\t\t+'width:75px; '\n\t\t\t\t\t\t\t\t\t\t+'background-color:#fff; '\n\t\t\t\t\t\t\t\t\t\t+'border:solid 1px #000; '\n\t\t\t\t\t\t\t\t\t\t+'font-family: Arial, Helvetica, sans-serif; '\n\t\t\t\t\t\t\t\t\t\t+'font-size:10px; '\n\t\t\t\t\t\t\t\t\t\t+'text-align:center; '\n\t\t\t\t\t\t\t\t\t+'\">'\n\t\t\t\t\t\t\t\t\t\t+'Custom ID '+allMarkers[i].mac\n\t\t\t\t\t\t\t\t\t+'</span>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Append the HTML to the fragment in memory\n\t\t\t\tfragment.appendChild( $point.get(0) );\n\t\t}\n\t    });\n\t\t// Now append the entire fragment from memory onto the DOM\n\t\tthis.markerLayer.append(fragment);\n\t};\n\t\n\tvar myLatlng = new google.maps.LatLng(38.392303,-86.931067); // Jasper, IN\n\t\n\tvar map = new google.maps.Map(document.getElementById(\"map-canvas\"),\n\t\t\t{\n\t\t\t\tzoom: 4,\n\t\t\t\tcenter: myLatlng,\n\t\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP\n\t\t\t});\n\t\n\tvar OverlayMap = new MyOverlay( { map: map } );\n\t\n\t// A simple jQuery UI dialog for each marker\n\tvar $dialog = $('<div id=\"dialog\"></div>')\n\t\t.append('body')\n\t\t.dialog({\n\t\t\tautoOpen:false,\n\t\t\twidth: 300,\n\t\t\theight: 200\n\t\t});\n\n\t$('#dialog').bind( \"dialogopen\", function( event, ui ){\n\t\tif($('body #dialog')){\n\t\t\t$dialog.parent().appendTo('#map-canvas');\n\t\t}\n\t});\n\t\n\t// Make sure to use live because the markers are rendered by javascript after initial DOM load\n\t$('.map-point').live('click',function( e ){\n\t\t$dialog.empty().append($(this).attr('id'));\n\t\t$dialog.dialog('open');\n\t});\n});",
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "8124151c.941438"
            ]
        ]
    },
    {
        "id": "f3589f35.3d471",
        "type": "file",
        "z": "dde44442.902c68",
        "name": "logs/cmx.log",
        "filename": "logs/cmx.log",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1051.2460927963257,
        "y": 200.82421875,
        "wires": []
    },
    {
        "id": "43758df4.667834",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Spark POST debug",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1407.2460927963257,
        "y": 235.82421875,
        "wires": []
    },
    {
        "id": "52093566.4dc0fc",
        "type": "function",
        "z": "dde44442.902c68",
        "name": "Build Spark params",
        "func": "// This function parses the CMX data to construct\n// HTTP POST parameters for sending a Spark message to a room\nmap = msg.payload;\nclient = {}; //reset payload object for clarity\nclient.roomId = 'my_spark_room_id';\nif (map['version'] != '2.0'){\n msg.log = \"got post with unexpected version: #{map['version']}\";\n return msg;\n}else{\n msg.log = \"working with correct version\";\n}\nif (map['type'] != 'DevicesSeen'){\nmsg.log = \"got post for event that we're not interested in: #{map['type']}\";\nreturn msg;\n}\nvar o = map['data']['observations'];\nconsole.log('map.data.apMac = '+map.data['apMac']);\n for (var c in o){\n if (o.hasOwnProperty(c)) {\n if (!o[c]['location']){continue}\n console.log('map.data.observations.clientMac = '+o[c]['clientMac']);\n if (o[c]['clientMac'] === \"de:ad:00:00:be:ef\"){\n  apMac = map.data['apMac'];\n  rssi = o[c]['rssi'];\n  apTags = map.data['apTags'];\n  client.text = 'Client: Jason Bourne detected (rssi ' + rssi + 'dB) by AP tagged:' + apTags;\n }\n if (client.seenEpoch===null || client.seenEpoch === 0){continue}// # This probe is useless, so ignore it\n }\n}\nmsg.payload.body = client;\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 878.7460927963257,
        "y": 152.82421875,
        "wires": [
            [
                "f3589f35.3d471",
                "bb3b5097.fc78b",
                "90aa6af5.57ee78"
            ]
        ]
    },
    {
        "id": "90aa6af5.57ee78",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Spark POST params",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 983.2460927963257,
        "y": 238.82421875,
        "wires": []
    },
    {
        "id": "2d445c48.5f49b4",
        "type": "http request",
        "z": "dde44442.902c68",
        "name": "Dashboard GET",
        "method": "GET",
        "ret": "obj",
        "url": "https://dashboard.meraki.com/api/v0/networks/L_643451796760560141/devices",
        "tls": "",
        "x": 1103.7460927963257,
        "y": 304.82421875,
        "wires": [
            [
                "71a9caba.5379d4",
                "6ba72e4a.0c4fd"
            ]
        ]
    },
    {
        "id": "71a9caba.5379d4",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Dashboard Response",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1253.2460927963257,
        "y": 385.82421875,
        "wires": []
    },
    {
        "id": "6ba72e4a.0c4fd",
        "type": "function",
        "z": "dde44442.902c68",
        "name": "Find device name by mac",
        "func": "// This function parses the Meraki Dashboard API response\n// and creates a message to POST to a Spark room.\n// Fill in the roomId & bot_token with your own details\nclient = {}; //reset payload object for clarity\nclient.roomId = 'my_spark_room_id';\nresult = msg.payload;\nap_mac = msg.ap_mac;\nconsole.log('AP MAC= ' + ap_mac);\nmsg.payload = {};\nfor (var key in result) {\n  if (result.hasOwnProperty(key)) {\n    var dev_mac = result[key].mac;\n    if (dev_mac === ap_mac) {\n      var dev_name = result[key].name;\n      client.text = 'Device name: ' + dev_name;\n  }\n }\n}\nmsg.payload.body = client;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1353.2460927963257,
        "y": 304.82421875,
        "wires": [
            [
                "bc9692f8.c049e",
                "2d253398.20794c"
            ]
        ]
    },
    {
        "id": "abfc4d48.eb31d",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Dashboard GET params",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 967.2460927963257,
        "y": 383.82421875,
        "wires": []
    },
    {
        "id": "bc9692f8.c049e",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "find name function debug",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1522.2460927963257,
        "y": 384.82421875,
        "wires": []
    },
    {
        "id": "bb3b5097.fc78b",
        "type": "Spark API",
        "z": "dde44442.902c68",
        "profileConfig": "93dc9728.0f1928",
        "apiUrl": "http://127.0.0.1:1880/api/cisco_spark_v1.json",
        "resource": "Messages",
        "method": "createMessage",
        "name": "post cmx details",
        "x": 1307.2460927963257,
        "y": 152.82421875,
        "wires": [
            [
                "43758df4.667834"
            ]
        ]
    },
    {
        "id": "2d253398.20794c",
        "type": "Spark API",
        "z": "dde44442.902c68",
        "profileConfig": "93dc9728.0f1928",
        "apiUrl": "http://127.0.0.1:1880/api/cisco_spark_v1.json",
        "resource": "Messages",
        "method": "createMessage",
        "name": "post device name",
        "x": 1448.7460927963257,
        "y": 478.82421875,
        "wires": [
            [
                "dbd7dcee.ddea9"
            ]
        ]
    },
    {
        "id": "dbd7dcee.ddea9",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "POST dev name",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1560.2460927963257,
        "y": 554.82421875,
        "wires": []
    },
    {
        "id": "c99f24c2.81c878",
        "type": "Meraki CMX",
        "z": "dde44442.902c68",
        "name": "CMX listener",
        "url": "/cmx",
        "settings": "226444cf.f8084c",
        "x": 100,
        "y": 88,
        "wires": [
            [
                "f4191867.a051c8",
                "78066042.93a73"
            ]
        ]
    },
    {
        "id": "8e1b88a0.38a998",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "No match",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 560.5,
        "y": 235,
        "wires": []
    },
    {
        "id": "f4191867.a051c8",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Raw CMX debug",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 182.5,
        "y": 163,
        "wires": []
    },
    {
        "id": "419a7840.71f5a8",
        "type": "file",
        "z": "dde44442.902c68",
        "name": "logs/cmx.log",
        "filename": "logs/cmx.log",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1025.5,
        "y": 131,
        "wires": []
    },
    {
        "id": "d04b7ef5.69e63",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Spark POST debug",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1381.5,
        "y": 166,
        "wires": []
    },
    {
        "id": "a7370bbf.f2b1d8",
        "type": "switch",
        "z": "dde44442.902c68",
        "name": "MAC address match",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "de:ad:00:00:be:ef",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 447.5,
        "y": 89,
        "wires": [
            [
                "58977452.82aebc"
            ],
            [
                "ec6305b1.d66b78"
            ]
        ]
    },
    {
        "id": "78066042.93a73",
        "type": "json",
        "z": "dde44442.902c68",
        "name": "",
        "x": 260.5,
        "y": 89,
        "wires": [
            [
                "a7370bbf.f2b1d8"
            ]
        ]
    },
    {
        "id": "ec6305b1.d66b78",
        "type": "json",
        "z": "dde44442.902c68",
        "name": "",
        "x": 538.5,
        "y": 164,
        "wires": [
            [
                "8e1b88a0.38a998"
            ]
        ]
    },
    {
        "id": "58977452.82aebc",
        "type": "json",
        "z": "dde44442.902c68",
        "name": "",
        "x": 633.5,
        "y": 83,
        "wires": [
            [
                "d5c49512.147d48",
                "a20a5df5.5614b"
            ]
        ]
    },
    {
        "id": "d5c49512.147d48",
        "type": "function",
        "z": "dde44442.902c68",
        "name": "Build Spark params",
        "func": "// This function parses the CMX data to construct\n// HTTP POST parameters for sending a Spark message to a room\nmap = msg.payload;\nclient = {}; //reset payload object for clarity\nclient.roomId = 'my_spark_room_id';\nif (map['version'] != '2.0'){\n msg.log = \"got post with unexpected version: #{map['version']}\";\n return msg;\n}else{\n msg.log = \"working with correct version\";\n}\nif (map['type'] != 'DevicesSeen'){\nmsg.log = \"got post for event that we're not interested in: #{map['type']}\";\nreturn msg;\n}\nvar o = map['data']['observations'];\nconsole.log('map.data.apMac = '+map.data['apMac']);\n for (var c in o){\n if (o.hasOwnProperty(c)) {\n if (!o[c]['location']){continue}\n console.log('map.data.observations.clientMac = '+o[c]['clientMac']);\n if (o[c]['clientMac'] === \"de:ad:00:00:be:ef\"){\n  apMac = map.data['apMac'];\n  rssi = o[c]['rssi'];\n  apTags = map.data['apTags'];\n  client.text = 'Client: Jason Bourne detected (rssi ' + rssi + 'dB) by AP tagged:' + apTags;\n }\n if (client.seenEpoch===null || client.seenEpoch === 0){continue}// # This probe is useless, so ignore it\n }\n}\nmsg.payload.body = client;\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 853,
        "y": 83,
        "wires": [
            [
                "419a7840.71f5a8",
                "1fc92e6.c126fd2",
                "118e2764.45d2b9"
            ]
        ]
    },
    {
        "id": "118e2764.45d2b9",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Spark POST params",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 957.5,
        "y": 169,
        "wires": []
    },
    {
        "id": "a20a5df5.5614b",
        "type": "function",
        "z": "dde44442.902c68",
        "name": "Build Dashboard API call",
        "func": "// This function creates HTTP GET parameters\n// for sending to the Meraki Dashboard\nmap = msg.payload;\napi_key = 'my_api_key';\ndashboard_header = {\n        'x-cisco-meraki-api-key': api_key,\n        'Content-Type': 'application/json'\n};\n\nmsg.headers = dashboard_header;\nmsg.ap_mac = map.data.apMac;\nmsg.payload = '';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 824.5,
        "y": 234,
        "wires": [
            [
                "ece48ba6.f95838",
                "ac365044.aa878"
            ]
        ]
    },
    {
        "id": "ac365044.aa878",
        "type": "http request",
        "z": "dde44442.902c68",
        "name": "Dashboard GET",
        "method": "GET",
        "ret": "obj",
        "url": "https://dashboard.meraki.com/api/v0/networks/my_net_id/devices",
        "tls": "",
        "x": 1078,
        "y": 235,
        "wires": [
            [
                "755645b6.2d411c",
                "3c3866f5.2d3eaa"
            ]
        ]
    },
    {
        "id": "755645b6.2d411c",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Dashboard Response",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1227.5,
        "y": 316,
        "wires": []
    },
    {
        "id": "3c3866f5.2d3eaa",
        "type": "function",
        "z": "dde44442.902c68",
        "name": "Find device name by mac",
        "func": "// This function parses the Meraki Dashboard API response\n// and creates a message to POST to a Spark room.\n// Fill in the roomId & bot_token with your own details\nclient = {}; //reset payload object for clarity\nclient.roomId = 'my_spark_room_id';\nresult = msg.payload;\nap_mac = msg.ap_mac;\nconsole.log('AP MAC= ' + ap_mac);\nmsg.payload = {};\nfor (var key in result) {\n  if (result.hasOwnProperty(key)) {\n    var dev_mac = result[key].mac;\n    if (dev_mac === ap_mac) {\n      var dev_name = result[key].name;\n      client.text = 'Device name: ' + dev_name;\n  }\n }\n}\nmsg.payload.body = client;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1327.5,
        "y": 235,
        "wires": [
            [
                "7afac861.6d65e8",
                "54d3d05d.e3339"
            ]
        ]
    },
    {
        "id": "ece48ba6.f95838",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "Dashboard GET params",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 941.5,
        "y": 314,
        "wires": []
    },
    {
        "id": "7afac861.6d65e8",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "find name function debug",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1496.5,
        "y": 315,
        "wires": []
    },
    {
        "id": "1fc92e6.c126fd2",
        "type": "Spark API",
        "z": "dde44442.902c68",
        "profileConfig": "8bea88ff.f90638",
        "apiUrl": "http://127.0.0.1:1880/api/cisco_spark_v1.json",
        "resource": "Messages",
        "method": "createMessage",
        "name": "post cmx details",
        "x": 1281.5,
        "y": 83,
        "wires": [
            [
                "d04b7ef5.69e63"
            ]
        ]
    },
    {
        "id": "54d3d05d.e3339",
        "type": "Spark API",
        "z": "dde44442.902c68",
        "profileConfig": "8bea88ff.f90638",
        "apiUrl": "http://127.0.0.1:1880/api/cisco_spark_v1.json",
        "resource": "Messages",
        "method": "createMessage",
        "name": "post device name",
        "x": 1423,
        "y": 409,
        "wires": [
            [
                "de73b35a.b3771"
            ]
        ]
    },
    {
        "id": "de73b35a.b3771",
        "type": "debug",
        "z": "dde44442.902c68",
        "name": "POST dev name",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1534.5,
        "y": 485,
        "wires": []
    },
    {
        "id": "adc71e51.56731",
        "type": "debug",
        "z": "1ca2bf04.e05cf1",
        "name": "excapSignOn raw data",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 391,
        "y": 526,
        "wires": []
    },
    {
        "id": "9e4876a2.eceb58",
        "type": "http in",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "url": "/excapSignOn",
        "method": "get",
        "swaggerDoc": "",
        "x": 181,
        "y": 456,
        "wires": [
            [
                "adc71e51.56731",
                "e1733aa0.c00918"
            ]
        ]
    },
    {
        "id": "ccad52bf.d6302",
        "type": "http response",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "x": 783,
        "y": 143,
        "wires": []
    },
    {
        "id": "c7575d4f.c2b9",
        "type": "http in",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "url": "/excapClick",
        "method": "get",
        "swaggerDoc": "",
        "x": 167,
        "y": 143,
        "wires": [
            [
                "ec127842.220e78",
                "ee81d71.b195128"
            ]
        ]
    },
    {
        "id": "7db120fb.67e3b",
        "type": "http response",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "x": 770,
        "y": 455,
        "wires": []
    },
    {
        "id": "8a90a231.115d3",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "HTML Login Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n{{{payload.css}}}\n\n\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <title>Registration Form</title>\n\n</head>\n<body>\n\n    \n\n\n    <div class=\"main-content\">\n    <form class=\"form-register\" method=POST action={{payload.login_url}} />\n        <input type=\"hidden\" name=\"continue_url\" value={{payload.continue_url}} />\n        <input type=\"hidden\" name=\"host\" value ={{host}}>\n        <input type=\"hidden\" name=\"base_grant_url\" value = {{payload.base_grant_url}}/>\n        <input type=\"hidden\" name=\"user_continue_url\" value = {{payload.user_continue_url}}/>\n        <input type=\"hidden\" name=\"node_mac\" value = {{payload.node_mac}}/>\n        <input type=\"hidden\" name=\"client_ip\" value = {{payload.client_ip}}/>\n        <input type=\"hidden\" name=\"client_mac\" value = {{payload.client_mac}}/>\n        <input type=\"hidden\" name=\"success_url\" value={{payload.continue_url}} />\n\n            <div class=\"form-register-with-email\">\n\n                <div class=\"form-white-background\">\n\n                    <div class=\"form-title-row\">\n                        <h1>Login to WiFi</h1>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Email</span>\n                            <input type=\"email\" name=\"email\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Password</span>\n                            <input type=\"password\" name=\"password\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label class=\"form-checkbox\">\n                            <input type=\"checkbox\" name=\"checkbox\" checked value=\"accepted\" required>\n                            <span>I agree to the <a href=\"/excapTerms\" target\"_blank\">terms and conditions</a></span>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <button type=\"submit\">Register</button>\n                    </div>\n\n                </div>\n\n            </div>\n\n            <!-- Future Social Features\n            <div class=\"form-sign-in-with-social\">\n\n                <div class=\"form-row form-title-row\">\n                    <span class=\"form-title\">Sign in with</span>\n                </div>\n\n                <a href=\"#\" class=\"form-google-button\">Google</a>\n                <a href=\"#\" class=\"form-facebook-button\">Facebook</a>\n                <a href=\"#\" class=\"form-twitter-button\">Twitter</a>\n                \n\n            </div>\n            -->\n\n        </form>\n                Your IP: {{payload.client_ip}}\n                <br>\n                Your MAC: {{payload.client_mac}}\n\n    </div>\n\n</body>\n\n</html>",
        "x": 585,
        "y": 471,
        "wires": [
            [
                "7db120fb.67e3b"
            ]
        ]
    },
    {
        "id": "ec127842.220e78",
        "type": "function",
        "z": "1ca2bf04.e05cf1",
        "name": "Set login_url",
        "func": "msg.payload.login_url = msg.payload.base_grant_url + '?continue_url=' + msg.payload.user_continue_url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 143,
        "wires": [
            [
                "49ed65dc.699c8c"
            ]
        ]
    },
    {
        "id": "ee81d71.b195128",
        "type": "debug",
        "z": "1ca2bf04.e05cf1",
        "name": "excapClick raw data",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 378,
        "y": 180,
        "wires": []
    },
    {
        "id": "56e9899b.9961f8",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Meraki Click-through, read more...",
        "info": "Configure by placing this host server address\nfollowed by /excapClick in the Custom Splash Page URL\nsection of the Meraki Dashboard.\n\nie. https://yourserver:1880/excapClick\n\nBe sure to update the \"walled garden\" in the \nMeraki Dashboard with the IP address of your \nserver and any other resources required before\nlogin, such as your website, images, CSS, etc.\n\nThe HTML page can be modified as needed. \n",
        "x": 173,
        "y": 89,
        "wires": []
    },
    {
        "id": "7a8428b.da87bd8",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Meraki Sign-on, read more...",
        "info": "Configure by placing this host server address\nfollowed by /excapClick in the Custom Splash Page URL\nsection of the Meraki Dashboard.\n\nie. https://yourserver:1880/excapSignOn\n\nBe sure to update the \"walled garden\" in the \nMeraki Dashboard with the IP address of your \nserver and any other resources required before\nlogin, such as your website, images, CSS, etc.\n\n",
        "x": 159,
        "y": 406,
        "wires": []
    },
    {
        "id": "39858b17.f631d4",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "HTML Splash Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n{{{payload.css}}}\n\n\n\t<meta charset=\"utf-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\t<title>Registration Form</title>\n\n</head>\n<body>\n\n\t\n\n\n    <div class=\"main-content\">\n\n        <form class=\"form-register\" method=POST action=\"/excapClickLogin\">\n                <input type=\"hidden\" name=\"continue_url\" value={{payload.continue_url}} />\n                <input type=\"hidden\" name=\"host\" value ={{host}}>\n                <input type=\"hidden\" name=\"base_grant_url\" value = {{payload.base_grant_url}}/>\n                <input type=\"hidden\" name=\"user_continue_url\" value = {{payload.user_continue_url}}/>\n                <input type=\"hidden\" name=\"node_mac\" value = {{payload.node_mac}}/>\n                <input type=\"hidden\" name=\"client_ip\" value = {{payload.client_ip}}/>\n                <input type=\"hidden\" name=\"client_mac\" value = {{payload.client_mac}}/>\n            \n            <div class=\"form-register-with-email\">\n\n                <div class=\"form-white-background\">\n\n                    <div class=\"form-title-row\">\n                        <h1>Login to WiFi</h1>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Name</span>\n                            <input type=\"text\" name=\"name\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Email</span>\n                            <input type=\"email\" name=\"email\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label class=\"form-checkbox\">\n                            <input type=\"checkbox\" name=\"checkbox\" checked value=\"accepted\" required>\n                            <span>I agree to the <a href=\"/excapTerms\" target\"_blank\">terms and conditions</a></span>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <button type=\"submit\">Register</button>\n                    </div>\n\n                </div>\n\n            </div>\n\n            <!-- Future Social Features\n            <div class=\"form-sign-in-with-social\">\n\n                <div class=\"form-row form-title-row\">\n                    <span class=\"form-title\">Sign in with</span>\n                </div>\n\n                <a href=\"#\" class=\"form-google-button\">Google</a>\n                <a href=\"#\" class=\"form-facebook-button\">Facebook</a>\n                <a href=\"#\" class=\"form-twitter-button\">Twitter</a>\n                \n\n            </div>\n            -->\n\n        </form>\n                Your IP: {{payload.client_ip}}\n                <br>\n                Your MAC: {{payload.client_mac}}\n\n    </div>\n\n</body>\n\n</html>\n\n",
        "x": 616,
        "y": 143,
        "wires": [
            [
                "ccad52bf.d6302"
            ]
        ]
    },
    {
        "id": "6c719c87.ace614",
        "type": "http in",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "url": "/excapClickLogin",
        "method": "post",
        "swaggerDoc": "",
        "x": 256,
        "y": 248,
        "wires": [
            [
                "35bc5c02.ecd2a4",
                "46b95d14.02b514"
            ]
        ]
    },
    {
        "id": "35bc5c02.ecd2a4",
        "type": "function",
        "z": "1ca2bf04.e05cf1",
        "name": "Process login with 302 redirect",
        "func": "// check if client has connected properly and received response from AP\nif (msg.payload.base_grant_url){\n    msg.statusCode = 302;\n    msg.headers = {\n      'Location': msg.payload.base_grant_url + '?continue_url=' + msg.payload.user_continue_url\n      //add other headers here...\n    };\n}else{\n    // error: send client back to login\n    msg.statusCode = 302;\n    msg.headers = {\n      'Location': '/excapNotConnected'\n      //add other headers here...\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 531,
        "y": 248,
        "wires": [
            [
                "f68d8e5e.ed76f",
                "e66ab0c0.ee116"
            ]
        ]
    },
    {
        "id": "f68d8e5e.ed76f",
        "type": "http response",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "x": 773,
        "y": 248,
        "wires": []
    },
    {
        "id": "46b95d14.02b514",
        "type": "debug",
        "z": "1ca2bf04.e05cf1",
        "name": "excapClick session data to console",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 564.9999847412109,
        "y": 327.0000114440918,
        "wires": []
    },
    {
        "id": "5607e612.128018",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Store form data - read more...",
        "info": "Instead of the debug console output, export\nthe form/session data to a database, file, etc.",
        "x": 519,
        "y": 294,
        "wires": []
    },
    {
        "id": "961ec509.a8f368",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Terms and Conditions",
        "info": "",
        "x": 144,
        "y": 760,
        "wires": []
    },
    {
        "id": "176976.2c54d68b",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Success",
        "info": "",
        "x": 106,
        "y": 548,
        "wires": []
    },
    {
        "id": "af0f856f.e2a588",
        "type": "http in",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "url": "/excapTerms",
        "method": "get",
        "swaggerDoc": "",
        "x": 204,
        "y": 799,
        "wires": [
            [
                "d7e2ec0.1f98518"
            ]
        ]
    },
    {
        "id": "d0845d45.50ef4",
        "type": "http response",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "x": 786,
        "y": 799,
        "wires": []
    },
    {
        "id": "905a8067.5454b",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "HTML Terms and Conditions",
        "field": "payload",
        "format": "handlebars",
        "template": "<head>\n    <title>Terms and Conditions</title>\n{{{payload}}}\n</head>\n<body>\n    <div class=\"container\">\n    <h1>Terms and Conditions</h1>\n    <ul>\n        <li>Please use our network responsibly. </li>\n        <li>Your computer's MAC and IP address will be logged.</li>\n    </ul>\n    </div>\n</body>\n\n\n",
        "x": 555,
        "y": 799,
        "wires": [
            [
                "d0845d45.50ef4"
            ]
        ]
    },
    {
        "id": "def361be.3ac49",
        "type": "http in",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "url": "/excapSuccess",
        "method": "get",
        "swaggerDoc": "",
        "x": 184,
        "y": 603,
        "wires": [
            [
                "1188e103.f38b7f"
            ]
        ]
    },
    {
        "id": "ce1370f5.e16b8",
        "type": "http response",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "x": 773,
        "y": 603,
        "wires": []
    },
    {
        "id": "74b84ef5.a3b38",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "HTML Success",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<head>\n    <title>Success!</title>\n{{{payload.css}}}\n</head>\n<body>\n    <div class=\"container\">\n    <center><h1>Success!</h1>\n    <h2>You can now use the network.</h2>\n    </center>\n    </div>\n</body>\n\n\n",
        "x": 567,
        "y": 603,
        "wires": [
            [
                "ce1370f5.e16b8"
            ]
        ]
    },
    {
        "id": "c4f293c3.ecf11",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Error: Not connected to AP",
        "info": "",
        "x": 160,
        "y": 883,
        "wires": []
    },
    {
        "id": "22d45767.396538",
        "type": "http in",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "url": "/excapNotConnected",
        "method": "get",
        "swaggerDoc": "",
        "x": 205,
        "y": 956,
        "wires": [
            [
                "c36924b0.a74678"
            ]
        ]
    },
    {
        "id": "e3cb2109.9a7a4",
        "type": "http response",
        "z": "1ca2bf04.e05cf1",
        "name": "",
        "x": 787,
        "y": 956,
        "wires": []
    },
    {
        "id": "550e62ef.1ba90c",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "HTML Terms and Conditions",
        "field": "payload",
        "format": "handlebars",
        "template": "<head>\n    <title>Error: Not Connected</title>\n{{{payload}}}\n</head>\n<body>\n    <div class=\"container\">\n    <h1>Error: Not Connected</h1>\n    <p>\n        Hmm, somethings not right. It appears you\n        are not connected to the correct wireless network.\n    </p>\n    </div>\n</body>\n\n\n",
        "x": 556,
        "y": 956,
        "wires": [
            [
                "e3cb2109.9a7a4"
            ]
        ]
    },
    {
        "id": "b44a6a88.9321b8",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Cisco Meraki ExCap Service - by Cory Guynn",
        "info": "More information about the Meraki ExCap API:\nhttps://meraki.cisco.com/lib/pdf/meraki_whitepaper_captive_portal.pdf\n\nEnjoy!\n\nWritten by Cory Guynn, 2015.\nConsulting Engineer @ https://meraki.cisco.com/\nTechnical Blogger @ http://www.InternetOfLego.com",
        "x": 488.5,
        "y": 41,
        "wires": []
    },
    {
        "id": "49ed65dc.699c8c",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "CSS Style",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<style>\nhtml{\n    background-color: #f3f3f3;\n}\n\n.form-register{\n    max-width: 1000px;\n    width: 100%;\n    margin: 0 auto;\n\n    font: bold 14px sans-serif;\n    text-align: center;\n}\n\n.form-register-with-email{\n    position: relative;\n    display: inline-block;\n    vertical-align: top;\n    margin-right: 130px;\n    text-align: center;\n}\n\n.form-register-with-email .form-white-background{\n    width: 570px;\n    box-sizing: border-box;\n    background-color: #ffffff;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n    padding: 60px 80px;\n    margin-bottom: 35px;\n}\n\n.form-register-with-email .form-row{\n    text-align: left;\n    margin-bottom: 23px;\n}\n\n.form-register-with-email .form-title-row{\n    text-align: center;\n    margin-bottom: 50px;\n}\n\n.form-register-with-email h1{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 0 20px 15px;\n    border-bottom: 2px solid #6caee0;\n    margin: 0;\n}\n\n.form-register-with-email .form-row > label span{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #5f5f5f;\n    width: 125px;\n    text-align: right;\n    padding-right: 25px;\n}\n\n.form-register-with-email input{\n    color:  #5f5f5f;\n    box-sizing: border-box;\n    width: 230px;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 12px 18px;\n    border: 1px solid #dbdbdb;\n}\n\n.form-register-with-email .form-checkbox input{\n    margin-left: 128px;\n    margin-right: 10px;\n    width: auto;\n    vertical-align: top;\n}\n\n.form-register-with-email .form-row .form-checkbox span{\n    font-size: 12px;\n    font-weight: normal;\n    display: inline-block;\n    text-align: left;\n    width: 220px;\n    margin: 0;\n}\n\n.form-register-with-email .form-checkbox span a{\n    text-decoration: none;\n    color:  #6caee0;\n}\n\n.form-register-with-email button{\n    display: block;\n    border-radius: 2px;\n    background-color:  #6caee0;\n    color: #ffffff;\n    font-weight: bold;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 15px 35px;\n    border: 0;\n    margin: 55px auto 0;\n    cursor: pointer;\n}\n\n.form-register-with-email .form-log-in-with-existing{\n    text-decoration: none;\n    padding: 4px 8px;\n    font-weight: normal;\n    color: #7b9d62;\n    background-color: #d6f0c3;\n}\n\n\n.form-sign-in-with-social{\n    display: inline-block;\n    max-width: 180px;\n    box-sizing: border-box;\n    vertical-align: top;\n    text-align: center;\n    margin-top: 100px;\n}\n\n.form-sign-in-with-social .form-title-row{\n    margin-bottom: 50px;\n}\n\n.form-sign-in-with-social .form-title{\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 15px 20px;\n    border-bottom: 2px solid #6caee0;\n}\n\n.form-sign-in-with-social .form-google-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(222, 110, 60, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-facebook-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(75, 136, 194, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-twitter-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(123, 195, 226, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n/*\tMaking the form responsive. Remove these media queries\n    if you don't need the form to work on mobile devices. */\n\n@media (max-width: 900px) {\n\n    .form-register{\n        margin: 20px auto;\n    }\n\n    .form-register-with-email{\n        position: relative;\n        display: block;\n        margin: 0;\n    }\n\n    .form-register-with-email .form-white-background{\n        margin: 0 auto 32px;\n    }\n\n\n\n    .form-sign-in-with-social {\n        margin-top: 105px;\n    }\n\n}\n\n@media (max-width: 600px) {\n\n    .form-register-with-email .form-white-background{\n        width: 300px;\n        padding-left: 35px;\n        padding-right: 35px;\n    }\n\n    .form-register-with-email .form-row > label span{\n        display: block;\n        text-align: left;\n        padding: 0 0 10px;\n    }\n\n    .form-register-with-email input{\n        display: block;\n        margin: 0 auto;\n    }\n\n    .form-register-with-email .form-checkbox input{\n        display: inline-block;\n        margin-left: 0;\n    }\n\n    .form-register-with-email .form-checkbox span{\n        width: 200px !important;\n    }\n\n    .form-register-with-email:after{\n        bottom: -80px;\n        left: 50%;\n        margin-left: -25px;\n    }\n\n}\n</style>",
        "x": 591.5,
        "y": 107,
        "wires": [
            [
                "39858b17.f631d4"
            ]
        ]
    },
    {
        "id": "e1733aa0.c00918",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "CSS Style",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<style>\nhtml{\n    background-color: #f3f3f3;\n}\n\n.form-register{\n    max-width: 1000px;\n    width: 100%;\n    margin: 0 auto;\n\n    font: bold 14px sans-serif;\n    text-align: center;\n}\n\n.form-register-with-email{\n    position: relative;\n    display: inline-block;\n    vertical-align: top;\n    margin-right: 130px;\n    text-align: center;\n}\n\n.form-register-with-email .form-white-background{\n    width: 570px;\n    box-sizing: border-box;\n    background-color: #ffffff;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n    padding: 60px 80px;\n    margin-bottom: 35px;\n}\n\n.form-register-with-email .form-row{\n    text-align: left;\n    margin-bottom: 23px;\n}\n\n.form-register-with-email .form-title-row{\n    text-align: center;\n    margin-bottom: 50px;\n}\n\n.form-register-with-email h1{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 0 20px 15px;\n    border-bottom: 2px solid #6caee0;\n    margin: 0;\n}\n\n.form-register-with-email .form-row > label span{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #5f5f5f;\n    width: 125px;\n    text-align: right;\n    padding-right: 25px;\n}\n\n.form-register-with-email input{\n    color:  #5f5f5f;\n    box-sizing: border-box;\n    width: 230px;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 12px 18px;\n    border: 1px solid #dbdbdb;\n}\n\n.form-register-with-email .form-checkbox input{\n    margin-left: 128px;\n    margin-right: 10px;\n    width: auto;\n    vertical-align: top;\n}\n\n.form-register-with-email .form-row .form-checkbox span{\n    font-size: 12px;\n    font-weight: normal;\n    display: inline-block;\n    text-align: left;\n    width: 220px;\n    margin: 0;\n}\n\n.form-register-with-email .form-checkbox span a{\n    text-decoration: none;\n    color:  #6caee0;\n}\n\n.form-register-with-email button{\n    display: block;\n    border-radius: 2px;\n    background-color:  #6caee0;\n    color: #ffffff;\n    font-weight: bold;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 15px 35px;\n    border: 0;\n    margin: 55px auto 0;\n    cursor: pointer;\n}\n\n.form-register-with-email .form-log-in-with-existing{\n    text-decoration: none;\n    padding: 4px 8px;\n    font-weight: normal;\n    color: #7b9d62;\n    background-color: #d6f0c3;\n}\n\n\n.form-sign-in-with-social{\n    display: inline-block;\n    max-width: 180px;\n    box-sizing: border-box;\n    vertical-align: top;\n    text-align: center;\n    margin-top: 100px;\n}\n\n.form-sign-in-with-social .form-title-row{\n    margin-bottom: 50px;\n}\n\n.form-sign-in-with-social .form-title{\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 15px 20px;\n    border-bottom: 2px solid #6caee0;\n}\n\n.form-sign-in-with-social .form-google-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(222, 110, 60, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-facebook-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(75, 136, 194, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-twitter-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(123, 195, 226, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n/*\tMaking the form responsive. Remove these media queries\n    if you don't need the form to work on mobile devices. */\n\n@media (max-width: 900px) {\n\n    .form-register{\n        margin: 20px auto;\n    }\n\n    .form-register-with-email{\n        position: relative;\n        display: block;\n        margin: 0;\n    }\n\n    .form-register-with-email .form-white-background{\n        margin: 0 auto 32px;\n    }\n\n\n\n    .form-sign-in-with-social {\n        margin-top: 105px;\n    }\n\n}\n\n@media (max-width: 600px) {\n\n    .form-register-with-email .form-white-background{\n        width: 300px;\n        padding-left: 35px;\n        padding-right: 35px;\n    }\n\n    .form-register-with-email .form-row > label span{\n        display: block;\n        text-align: left;\n        padding: 0 0 10px;\n    }\n\n    .form-register-with-email input{\n        display: block;\n        margin: 0 auto;\n    }\n\n    .form-register-with-email .form-checkbox input{\n        display: inline-block;\n        margin-left: 0;\n    }\n\n    .form-register-with-email .form-checkbox span{\n        width: 200px !important;\n    }\n\n    .form-register-with-email:after{\n        bottom: -80px;\n        left: 50%;\n        margin-left: -25px;\n    }\n\n}\n</style>",
        "x": 562,
        "y": 433,
        "wires": [
            [
                "8a90a231.115d3"
            ]
        ]
    },
    {
        "id": "1188e103.f38b7f",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "CSS Style",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<style type=\"text/css\">\n.container{\n    max-width: 500px;\n    padding: 10px 20px;\n    background: #f4f7f8;\n    margin: 10px auto;\n    padding: 20px;\n    background: #f4f7f8;\n    border-radius: 8px;\n    font-family: Georgia, \"Times New Roman\", Times, serif;\n}\n</style>",
        "x": 551,
        "y": 565,
        "wires": [
            [
                "74b84ef5.a3b38"
            ]
        ]
    },
    {
        "id": "d7e2ec0.1f98518",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "CSS Style",
        "field": "payload",
        "format": "html",
        "template": "<style type=\"text/css\">\n.container{\n    max-width: 500px;\n    padding: 10px 20px;\n    background: #f4f7f8;\n    margin: 10px auto;\n    padding: 20px;\n    background: #f4f7f8;\n    border-radius: 8px;\n    font-family: Georgia, \"Times New Roman\", Times, serif;\n}\n</style>",
        "x": 499,
        "y": 757,
        "wires": [
            [
                "905a8067.5454b"
            ]
        ]
    },
    {
        "id": "c36924b0.a74678",
        "type": "template",
        "z": "1ca2bf04.e05cf1",
        "name": "CSS Style",
        "field": "payload",
        "format": "html",
        "template": "<style type=\"text/css\">\n.container{\n    max-width: 500px;\n    padding: 10px 20px;\n    background: #f4f7f8;\n    margin: 10px auto;\n    padding: 20px;\n    background: #f4f7f8;\n    border-radius: 8px;\n    font-family: Georgia, \"Times New Roman\", Times, serif;\n}\n</style>",
        "x": 500,
        "y": 919,
        "wires": [
            [
                "550e62ef.1ba90c"
            ]
        ]
    },
    {
        "id": "be4f655.0522e98",
        "type": "comment",
        "z": "1ca2bf04.e05cf1",
        "name": "Supporting Pages",
        "info": "",
        "x": 95,
        "y": 699,
        "wires": []
    },
    {
        "id": "e66ab0c0.ee116",
        "type": "debug",
        "z": "1ca2bf04.e05cf1",
        "name": "Process Login",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 739.8957977294922,
        "y": 288.3333549499512,
        "wires": []
    },
    {
        "id": "bffae5a8.372c58",
        "type": "inject",
        "z": "3edf14b6.295adc",
        "name": "List Organizations",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 80,
        "wires": [
            [
                "6c0cfbfa.5c8534"
            ]
        ]
    },
    {
        "id": "6c0cfbfa.5c8534",
        "type": "function",
        "z": "3edf14b6.295adc",
        "name": "Meraki API - List Organizations",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar orgId = msg.orgId;\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\n\nmsg.url = \"https://dashboard.meraki.com/api/v0/organizations\";\nmsg.method = 'get';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "d145324a.50429"
            ]
        ]
    },
    {
        "id": "d145324a.50429",
        "type": "http request",
        "z": "3edf14b6.295adc",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 850,
        "y": 80,
        "wires": [
            [
                "29588b8c.33a364"
            ]
        ]
    },
    {
        "id": "3a982250.a52f8e",
        "type": "http in",
        "z": "3edf14b6.295adc",
        "name": "",
        "url": "/meraki/api/organizations",
        "method": "get",
        "swaggerDoc": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "6c0cfbfa.5c8534"
            ]
        ]
    },
    {
        "id": "29588b8c.33a364",
        "type": "function",
        "z": "3edf14b6.295adc",
        "name": "Large Int Helper",
        "func": "const regex = /\"id\":(.*?)(?:,)/g;\nconst str = `{\"id\":351024,\"name\":\"Cisco Mini Demo 2\"},{\"id\":215332,\"name\":\"Cisco Mini Demo 1\"},`;\nlet m;\n\nwhile ((m = regex.exec(str)) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n    }\n    \n    // The result can be accessed through the `m`-variable.\n    m.forEach((match, groupIndex) => {\n        console.log(`Found match, group ${groupIndex}: ${match}`);\n    });\n}\n\n\nmsg.payload = msg.payload.replace(/\"id\":(.*?)(?:,)/g,\"\\\"id\\\"\\:\\\"$1\\\"\\,\");\nconsole.log(\"new json with regex replace \",msg.payload);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1060,
        "y": 80,
        "wires": [
            [
                "4fa0aa48.515f04"
            ]
        ]
    },
    {
        "id": "4fa0aa48.515f04",
        "type": "json",
        "z": "3edf14b6.295adc",
        "name": "",
        "x": 1250,
        "y": 80,
        "wires": [
            [
                "1e0c912d.aa238f",
                "2ae96e89.311442"
            ]
        ]
    },
    {
        "id": "1e0c912d.aa238f",
        "type": "http response",
        "z": "3edf14b6.295adc",
        "name": "",
        "x": 1390,
        "y": 80,
        "wires": []
    },
    {
        "id": "2ae96e89.311442",
        "type": "debug",
        "z": "3edf14b6.295adc",
        "name": "List Orgs JSON",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1360,
        "y": 120,
        "wires": []
    },
    {
        "id": "97269b12.888468",
        "type": "inject",
        "z": "af61949e.6dc538",
        "name": "List Networks",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 140,
        "wires": [
            [
                "554227df.064858"
            ]
        ]
    },
    {
        "id": "554227df.064858",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = global.get('orgId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "af8357e8.709bc8"
            ]
        ]
    },
    {
        "id": "af8357e8.709bc8",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "Meraki API - List Networks",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar orgId = msg.req.params.orgId;\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/organizations/\"+orgId+\"/networks\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 140,
        "wires": [
            [
                "a4a3160f.dd6a38"
            ]
        ]
    },
    {
        "id": "5e94bff8.81d6d",
        "type": "http in",
        "z": "af61949e.6dc538",
        "name": "",
        "url": "/meraki/api/organizations/:orgId/networks",
        "method": "get",
        "swaggerDoc": "",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "af8357e8.709bc8"
            ]
        ]
    },
    {
        "id": "a4a3160f.dd6a38",
        "type": "http request",
        "z": "af61949e.6dc538",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 140,
        "wires": [
            [
                "51e2004c.771a",
                "ffaaa892.cf2238"
            ]
        ]
    },
    {
        "id": "51e2004c.771a",
        "type": "debug",
        "z": "af61949e.6dc538",
        "name": "List Nets",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1120,
        "y": 180,
        "wires": []
    },
    {
        "id": "ffaaa892.cf2238",
        "type": "http response",
        "z": "af61949e.6dc538",
        "name": "",
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "24a7210b.1a39de",
        "type": "inject",
        "z": "3edf14b6.295adc",
        "name": "List License State",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 200,
        "wires": [
            [
                "e53d1b81.6e7538"
            ]
        ]
    },
    {
        "id": "e53d1b81.6e7538",
        "type": "function",
        "z": "3edf14b6.295adc",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = flow.get('orgId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 200,
        "wires": [
            [
                "b66676d.b001888"
            ]
        ]
    },
    {
        "id": "b66676d.b001888",
        "type": "function",
        "z": "3edf14b6.295adc",
        "name": "Meraki API - List License State",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar orgId = msg.req.params.orgId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/organizations/\"+orgId+\"/licenseState\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "ae2e1af1.f50358"
            ]
        ]
    },
    {
        "id": "ae2e1af1.f50358",
        "type": "http request",
        "z": "3edf14b6.295adc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 200,
        "wires": [
            [
                "64419678.1dabe8",
                "58eca5dd.704bdc"
            ]
        ]
    },
    {
        "id": "f11aef9d.b7b58",
        "type": "http in",
        "z": "3edf14b6.295adc",
        "name": "",
        "url": "/meraki/api/organizations/:orgId/licenseState",
        "method": "get",
        "swaggerDoc": "",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "b66676d.b001888"
            ]
        ]
    },
    {
        "id": "64419678.1dabe8",
        "type": "http response",
        "z": "3edf14b6.295adc",
        "name": "",
        "x": 1130,
        "y": 200,
        "wires": []
    },
    {
        "id": "58eca5dd.704bdc",
        "type": "debug",
        "z": "3edf14b6.295adc",
        "name": "List License State",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1090,
        "y": 240,
        "wires": []
    },
    {
        "id": "520c04ce.ac216c",
        "type": "inject",
        "z": "af61949e.6dc538",
        "name": "Create a Network",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 260,
        "wires": [
            [
                "6372f2df.e467cc"
            ]
        ]
    },
    {
        "id": "6372f2df.e467cc",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = global.get('orgId');\n\n// Sample Data\nmsg.payload = {\n    \"name\": \"API Test - Node-RED - \"+ (new Date().getMilliseconds()),\n    \"timeZone\": \"Europe/Amsterdam\",\n    \"tags\": \"APItest\",\n    \"type\": \"wireless\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "49e5987d.9d78f8"
            ]
        ]
    },
    {
        "id": "49e5987d.9d78f8",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "Meraki API - Create a Network",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar orgId = msg.req.params.orgId;\nvar shard = global.get('shard');\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/organizations/\"+orgId+\"/networks\";\nmsg.method = 'post';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "7fe57697.c3e158"
            ]
        ]
    },
    {
        "id": "7fe57697.c3e158",
        "type": "http request",
        "z": "af61949e.6dc538",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 260,
        "wires": [
            [
                "9bfb0f49.47bd7",
                "8549654b.83e6b8"
            ]
        ]
    },
    {
        "id": "c566f4df.b49c28",
        "type": "http in",
        "z": "af61949e.6dc538",
        "name": "",
        "url": "meraki/api/organizations/:orgId/networks",
        "method": "post",
        "swaggerDoc": "",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "49e5987d.9d78f8"
            ]
        ]
    },
    {
        "id": "9bfb0f49.47bd7",
        "type": "debug",
        "z": "af61949e.6dc538",
        "name": "Create a Network",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1090,
        "y": 300,
        "wires": []
    },
    {
        "id": "8549654b.83e6b8",
        "type": "http response",
        "z": "af61949e.6dc538",
        "name": "",
        "x": 1130,
        "y": 260,
        "wires": []
    },
    {
        "id": "85cac4cb.377d48",
        "type": "inject",
        "z": "bf8b1509.9e0ec8",
        "name": "List Templates",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "4a6be16f.4e08"
            ]
        ]
    },
    {
        "id": "4a6be16f.4e08",
        "type": "function",
        "z": "bf8b1509.9e0ec8",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = global.get('orgId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "1c9d87b0.0b1308"
            ]
        ]
    },
    {
        "id": "1c9d87b0.0b1308",
        "type": "function",
        "z": "bf8b1509.9e0ec8",
        "name": "Meraki API - List Templates",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar orgId = msg.req.params.orgId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/organizations/\"+orgId+\"/configTemplates\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "9ad143ee.14d69"
            ]
        ]
    },
    {
        "id": "9ad143ee.14d69",
        "type": "http request",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 990,
        "y": 160,
        "wires": [
            [
                "fe5b94be.3ee7e8",
                "9658ccdb.fe2b6"
            ]
        ]
    },
    {
        "id": "f8fc6b0d.400048",
        "type": "http in",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "url": "/meraki/api/organizations/:orgId/configTemplates",
        "method": "get",
        "swaggerDoc": "",
        "x": 260,
        "y": 200,
        "wires": [
            [
                "1c9d87b0.0b1308"
            ]
        ]
    },
    {
        "id": "fe5b94be.3ee7e8",
        "type": "http response",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "x": 1150,
        "y": 160,
        "wires": []
    },
    {
        "id": "9658ccdb.fe2b6",
        "type": "debug",
        "z": "bf8b1509.9e0ec8",
        "name": "List Templates",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1120,
        "y": 200,
        "wires": []
    },
    {
        "id": "46c6ef67.6bccd",
        "type": "inject",
        "z": "bf8b1509.9e0ec8",
        "name": "Bind to a Template",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "f356087d.bf4f78"
            ]
        ]
    },
    {
        "id": "f356087d.bf4f78",
        "type": "function",
        "z": "bf8b1509.9e0ec8",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = global.get('orgId');\n\n// Sample Data\nmsg.payload = {\n    \"configTemplateId\":\"L_643451796760560235\",\n    \"autoBind\": false\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 280,
        "wires": [
            [
                "8985438c.98ccd"
            ]
        ]
    },
    {
        "id": "8985438c.98ccd",
        "type": "function",
        "z": "bf8b1509.9e0ec8",
        "name": "Meraki API - Bind to a Template",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/bind\";\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 280,
        "wires": [
            [
                "caf4dd99.0a5fe"
            ]
        ]
    },
    {
        "id": "caf4dd99.0a5fe",
        "type": "http request",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 990,
        "y": 280,
        "wires": [
            [
                "a3a1a4f5.f64118",
                "4ed076e6.0c72b8"
            ]
        ]
    },
    {
        "id": "e3298ac0.686198",
        "type": "http in",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "url": "/meraki/api/networks/:netId/bind",
        "method": "post",
        "swaggerDoc": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "8985438c.98ccd"
            ]
        ]
    },
    {
        "id": "a3a1a4f5.f64118",
        "type": "http response",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "x": 1150,
        "y": 280,
        "wires": []
    },
    {
        "id": "4ed076e6.0c72b8",
        "type": "debug",
        "z": "bf8b1509.9e0ec8",
        "name": "Bind to a Template",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1110,
        "y": 320,
        "wires": []
    },
    {
        "id": "ea274a81.e810b8",
        "type": "inject",
        "z": "bf8b1509.9e0ec8",
        "name": "Unbind from Template",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 400,
        "wires": [
            [
                "f6149b91.e328a8"
            ]
        ]
    },
    {
        "id": "f6149b91.e328a8",
        "type": "function",
        "z": "bf8b1509.9e0ec8",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 400,
        "wires": [
            [
                "bdf4346d.c55408"
            ]
        ]
    },
    {
        "id": "bdf4346d.c55408",
        "type": "function",
        "z": "bf8b1509.9e0ec8",
        "name": "Meraki API - Unbind from Template",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/unbind\";\nmsg.method = 'post';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 400,
        "wires": [
            [
                "1a69c64a.6e75fa"
            ]
        ]
    },
    {
        "id": "1a69c64a.6e75fa",
        "type": "http request",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 990,
        "y": 400,
        "wires": [
            [
                "957a96bd.4ffcf8",
                "86757615.d3a5e8"
            ]
        ]
    },
    {
        "id": "14c4ac09.15eea4",
        "type": "http in",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "url": "/meraki/api/networks/:netId/unbind",
        "method": "post",
        "swaggerDoc": "",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "bdf4346d.c55408"
            ]
        ]
    },
    {
        "id": "957a96bd.4ffcf8",
        "type": "http response",
        "z": "bf8b1509.9e0ec8",
        "name": "",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "86757615.d3a5e8",
        "type": "debug",
        "z": "bf8b1509.9e0ec8",
        "name": "Unbind from Template",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1108,
        "y": 442,
        "wires": []
    },
    {
        "id": "2ca7957e.b6e43a",
        "type": "comment",
        "z": "bf8b1509.9e0ec8",
        "name": "Bug: \"{\"errors\":[\"Validation failed: Handle has already been taken\"]}\"",
        "info": "",
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "84b8b538.1dacd8",
        "type": "inject",
        "z": "76b3daf3.b8e4d4",
        "name": "Remove a single Device",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 180,
        "y": 500,
        "wires": [
            [
                "8c49ed64.35969"
            ]
        ]
    },
    {
        "id": "8c49ed64.35969",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n// Sample Data\nmsg.req.params.serial = global.get('serial');\nmsg.payload = {\n    \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 500,
        "wires": [
            [
                "f8482c0b.c6258"
            ]
        ]
    },
    {
        "id": "f8482c0b.c6258",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "Meraki API - Remove a Single Device",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\nvar serial = msg.req.params.serial;\n\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/devices/\"+flow.get('serial')+\"/remove\";\nmsg.method ='post';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 500,
        "wires": [
            [
                "b83e735c.9e088"
            ]
        ]
    },
    {
        "id": "b83e735c.9e088",
        "type": "http request",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "c50e4e65.ee1d4",
                "47435971.c0f1c8"
            ]
        ]
    },
    {
        "id": "50e3b2cf.e7f3ac",
        "type": "http in",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "url": "/meraki/api/networks/:netId/devices/:serial/remove",
        "method": "post",
        "swaggerDoc": "",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "f8482c0b.c6258"
            ]
        ]
    },
    {
        "id": "c50e4e65.ee1d4",
        "type": "debug",
        "z": "76b3daf3.b8e4d4",
        "name": "Remove a single Device",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1110,
        "y": 540,
        "wires": []
    },
    {
        "id": "47435971.c0f1c8",
        "type": "http response",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "x": 1170,
        "y": 500,
        "wires": []
    },
    {
        "id": "5816cf6b.72a69",
        "type": "inject",
        "z": "76b3daf3.b8e4d4",
        "name": "List Devices",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "5daa2895.c76c98"
            ]
        ]
    },
    {
        "id": "5daa2895.c76c98",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 100,
        "wires": [
            [
                "e2333fb4.dfc26"
            ]
        ]
    },
    {
        "id": "e2333fb4.dfc26",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "Meraki API - List Devices",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/devices/\";\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 100,
        "wires": [
            [
                "1bf12b27.ad4b05"
            ]
        ]
    },
    {
        "id": "1bf12b27.ad4b05",
        "type": "http request",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 100,
        "wires": [
            [
                "f69d1afe.51cba8",
                "e03436f4.8d3638"
            ]
        ]
    },
    {
        "id": "9407b3c1.7b547",
        "type": "http in",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "url": "/meraki/api/networks/:netId/devices/",
        "method": "get",
        "swaggerDoc": "",
        "x": 240,
        "y": 140,
        "wires": [
            [
                "e2333fb4.dfc26"
            ]
        ]
    },
    {
        "id": "f69d1afe.51cba8",
        "type": "debug",
        "z": "76b3daf3.b8e4d4",
        "name": "List Devices",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1150,
        "y": 140,
        "wires": []
    },
    {
        "id": "e03436f4.8d3638",
        "type": "http response",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "x": 1170,
        "y": 100,
        "wires": []
    },
    {
        "id": "ce31d0a9.db79d",
        "type": "inject",
        "z": "76b3daf3.b8e4d4",
        "name": "List a single Device",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "f26cb9fb.29d958"
            ]
        ]
    },
    {
        "id": "f26cb9fb.29d958",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n// Sample Data\nmsg.req.params.serial = global.get('serial');\nmsg.payload = {\n    \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "98127b05.60c9b8"
            ]
        ]
    },
    {
        "id": "98127b05.60c9b8",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "Meraki API - List a Single Device",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\nvar serial = msg.req.params.serial;\n\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/devices/\"+flow.get('serial');\nmsg.method ='get';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 200,
        "wires": [
            [
                "636bf0e8.b8374"
            ]
        ]
    },
    {
        "id": "636bf0e8.b8374",
        "type": "http request",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "fc4104ae.f49c08",
                "555c92cb.23c7ec"
            ]
        ]
    },
    {
        "id": "3c73eaa5.57d096",
        "type": "http in",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "url": "/meraki/api/networks/:netId/devices/:serial",
        "method": "get",
        "swaggerDoc": "",
        "x": 260,
        "y": 240,
        "wires": [
            [
                "98127b05.60c9b8"
            ]
        ]
    },
    {
        "id": "fc4104ae.f49c08",
        "type": "debug",
        "z": "76b3daf3.b8e4d4",
        "name": "List a single Device",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1090,
        "y": 240,
        "wires": []
    },
    {
        "id": "555c92cb.23c7ec",
        "type": "http response",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "fad94aba.fc29e8",
        "type": "inject",
        "z": "76b3daf3.b8e4d4",
        "name": "Claim a Device",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "e72d7096.025f9"
            ]
        ]
    },
    {
        "id": "e72d7096.025f9",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {\n    \"serial\": global.get('serial')\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "40055065.68e56"
            ]
        ]
    },
    {
        "id": "40055065.68e56",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "Meraki API - Claim a Device",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\n\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/devices/claim\";\n\nmsg.method = \"post\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "ba438646.7ce368",
                "e7695112.427a9"
            ]
        ]
    },
    {
        "id": "ba438646.7ce368",
        "type": "http request",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "c8c3b02a.da554",
                "2579a96c.ca75d6"
            ]
        ]
    },
    {
        "id": "52c49349.56e98c",
        "type": "http in",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "url": "/meraki/api/networks/:netId/devices/claim",
        "method": "post",
        "swaggerDoc": "",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "40055065.68e56"
            ]
        ]
    },
    {
        "id": "c8c3b02a.da554",
        "type": "debug",
        "z": "76b3daf3.b8e4d4",
        "name": "Claim a Device",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1140,
        "y": 340,
        "wires": []
    },
    {
        "id": "2579a96c.ca75d6",
        "type": "http response",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "x": 1170,
        "y": 300,
        "wires": []
    },
    {
        "id": "4c74a7a7.1ec588",
        "type": "inject",
        "z": "76b3daf3.b8e4d4",
        "name": "Update Attributes of a Device",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 200,
        "y": 400,
        "wires": [
            [
                "aa13f117.8e5cd"
            ]
        ]
    },
    {
        "id": "aa13f117.8e5cd",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n// Sample Data\nmsg.req.params.serial = global.get('serial');\nmsg.payload = {\n  \"name\":\"My device 7\",\n  \"lat\":37.4180951010362,\n  \"lng\":-122.098531723022,\n  \"address\":\"1600 Pennsylvania Ave\",\n  \"tags\":\"testAPI anotherTag\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 400,
        "wires": [
            [
                "14d916b7.87ffe9"
            ]
        ]
    },
    {
        "id": "14d916b7.87ffe9",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "Meraki API - Update Attributes of a Device",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\nvar serial = msg.req.params.serial;\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/devices/\"+serial;\nmsg.method = \"put\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 400,
        "wires": [
            [
                "19ad3b4f.bdd9f5"
            ]
        ]
    },
    {
        "id": "19ad3b4f.bdd9f5",
        "type": "http request",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 990,
        "y": 400,
        "wires": [
            [
                "dacff52f.789a08",
                "b9ab86a1.0097d8"
            ]
        ]
    },
    {
        "id": "5187d99d.b89938",
        "type": "http in",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "url": "/meraki/api/networks/:netId/devices/:serial",
        "method": "put",
        "swaggerDoc": "",
        "x": 263.3333282470703,
        "y": 445.00004482269287,
        "wires": [
            [
                "14d916b7.87ffe9"
            ]
        ]
    },
    {
        "id": "dacff52f.789a08",
        "type": "debug",
        "z": "76b3daf3.b8e4d4",
        "name": "Update Attributes of a Device",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1090,
        "y": 440,
        "wires": []
    },
    {
        "id": "b9ab86a1.0097d8",
        "type": "http response",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "x": 1170,
        "y": 400,
        "wires": []
    },
    {
        "id": "ac40bf65.a8d97",
        "type": "inject",
        "z": "703f1816.437fe8",
        "name": "List SSIDs of a Network",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "7aa6d6ee.bcd608"
            ]
        ]
    },
    {
        "id": "7aa6d6ee.bcd608",
        "type": "function",
        "z": "703f1816.437fe8",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 160,
        "wires": [
            [
                "2dbf013f.5ec01e"
            ]
        ]
    },
    {
        "id": "2dbf013f.5ec01e",
        "type": "function",
        "z": "703f1816.437fe8",
        "name": "Meraki API - List SSIDs of a Network",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/ssids\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "2e62bd30.d3df12"
            ]
        ]
    },
    {
        "id": "2e62bd30.d3df12",
        "type": "http request",
        "z": "703f1816.437fe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 160,
        "wires": [
            [
                "b1bd8b1f.a7efb8",
                "6b304812.418228"
            ]
        ]
    },
    {
        "id": "508072dc.04b23c",
        "type": "http in",
        "z": "703f1816.437fe8",
        "name": "[get] /meraki/api/networks/:netId/ssids",
        "url": "/meraki/api/networks/:netId/ssids",
        "method": "get",
        "swaggerDoc": "",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "2dbf013f.5ec01e"
            ]
        ]
    },
    {
        "id": "b1bd8b1f.a7efb8",
        "type": "debug",
        "z": "703f1816.437fe8",
        "name": "List SSIDs",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "6b304812.418228",
        "type": "http response",
        "z": "703f1816.437fe8",
        "name": "",
        "x": 1170,
        "y": 160,
        "wires": []
    },
    {
        "id": "eb982c90.59c6",
        "type": "inject",
        "z": "703f1816.437fe8",
        "name": "Update the Attributes of an SSID",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "69b421d6.fb34d"
            ]
        ]
    },
    {
        "id": "69b421d6.fb34d",
        "type": "function",
        "z": "703f1816.437fe8",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nmsg.req.params.ssidNum = global.get('ssidNum');\n\n// Sample data\nmsg.payload = {\n  \"name\":\"new SSID name\",\n  \"enabled\":true,\n  \"authMode\":\"psk\",\n  \"encryptionMode\":\"wpa\",\n  \"psk\":\"abcd1234\",\n  \"splashPage\":\"Click-through splash page\",\n  \"perClientBandwidthLimitUp\":0,\n  \"perClientBandwidthLimitDown\":0,\n  \"ssidAdminAccessible\":false,\n  \"ipAssignmentMode\":\"Bridge mode\",\n  \"walledGardenEnabled\":true,\n  \"walledGardenRanges\":\"192.168.1.1/24 192.168.37.10/32\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 299.99998664855957,
        "wires": [
            [
                "9950ea41.181528"
            ]
        ]
    },
    {
        "id": "9950ea41.181528",
        "type": "function",
        "z": "703f1816.437fe8",
        "name": "Meraki API - Update the Attributes of an SSID",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar netId = global.get('netId');\nvar shard = global.get('shard');\nvar ssidNum = msg.req.params.ssidNum;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/ssids/\"+ssidNum;\nmsg.method = \"put\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 300,
        "wires": [
            [
                "3c27c1ea.1d041e",
                "4f682a4c.3729b4"
            ]
        ]
    },
    {
        "id": "3c27c1ea.1d041e",
        "type": "http request",
        "z": "703f1816.437fe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "16a2d641.e7101a",
                "1ea21d7b.d6fa23"
            ]
        ]
    },
    {
        "id": "3549f2d2.faae7e",
        "type": "http in",
        "z": "703f1816.437fe8",
        "name": "",
        "url": "/meraki/api/networks/:netId/ssids/:ssidNum",
        "method": "put",
        "swaggerDoc": "",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "9950ea41.181528",
                "676cfe90.210a8"
            ]
        ]
    },
    {
        "id": "16a2d641.e7101a",
        "type": "debug",
        "z": "703f1816.437fe8",
        "name": "Update Attributes of an SSID",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1100,
        "y": 340,
        "wires": []
    },
    {
        "id": "1ea21d7b.d6fa23",
        "type": "http response",
        "z": "703f1816.437fe8",
        "name": "",
        "x": 1170,
        "y": 300,
        "wires": []
    },
    {
        "id": "e72181c1.01122",
        "type": "inject",
        "z": "3edf14b6.295adc",
        "name": "List Inventory",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 320,
        "wires": [
            [
                "1970b1a4.d3a4ee"
            ]
        ]
    },
    {
        "id": "1970b1a4.d3a4ee",
        "type": "function",
        "z": "3edf14b6.295adc",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = global.get('orgId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 320,
        "wires": [
            [
                "787950cf.e5f9"
            ]
        ]
    },
    {
        "id": "787950cf.e5f9",
        "type": "function",
        "z": "3edf14b6.295adc",
        "name": "Meraki API - List Inventory",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar orgId = msg.req.params.orgId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/organizations/\"+orgId+\"/inventory\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 320,
        "wires": [
            [
                "c521210d.b8d4"
            ]
        ]
    },
    {
        "id": "c521210d.b8d4",
        "type": "http request",
        "z": "3edf14b6.295adc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 320,
        "wires": [
            [
                "7a005149.a5a82",
                "44ef1c80.5f4334"
            ]
        ]
    },
    {
        "id": "f6172145.23ced",
        "type": "http in",
        "z": "3edf14b6.295adc",
        "name": "",
        "url": "/meraki/api/organizations/:orgId/inventory",
        "method": "get",
        "swaggerDoc": "",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "787950cf.e5f9"
            ]
        ]
    },
    {
        "id": "7a005149.a5a82",
        "type": "debug",
        "z": "3edf14b6.295adc",
        "name": "List Inventory",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1100,
        "y": 360,
        "wires": []
    },
    {
        "id": "44ef1c80.5f4334",
        "type": "http response",
        "z": "3edf14b6.295adc",
        "name": "",
        "x": 1130,
        "y": 320,
        "wires": []
    },
    {
        "id": "b46bc232.8c8cc",
        "type": "inject",
        "z": "94b5e0b8.22242",
        "name": "List Admins",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 60,
        "wires": [
            [
                "f224f2fe.791b6"
            ]
        ]
    },
    {
        "id": "f224f2fe.791b6",
        "type": "function",
        "z": "94b5e0b8.22242",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = global.get('orgId');\n\n// Sample Data\nmsg.payload = {\n    \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 60,
        "wires": [
            [
                "b314c6dd.aa6ff8"
            ]
        ]
    },
    {
        "id": "b314c6dd.aa6ff8",
        "type": "function",
        "z": "94b5e0b8.22242",
        "name": "Meraki API - List Admins",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar orgId = msg.req.params.orgId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/organizations/\"+orgId+\"/admins\";\nmsg.method = 'get';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 60,
        "wires": [
            [
                "3e650f06.b676f"
            ]
        ]
    },
    {
        "id": "3e650f06.b676f",
        "type": "http request",
        "z": "94b5e0b8.22242",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 60,
        "wires": [
            [
                "a71a3d4.4a0ccc",
                "8acbc868.20bf18"
            ]
        ]
    },
    {
        "id": "ac634cc8.19a78",
        "type": "http in",
        "z": "94b5e0b8.22242",
        "name": "",
        "url": "/meraki/api/organizations/:orgId/admins",
        "method": "get",
        "swaggerDoc": "",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "b314c6dd.aa6ff8"
            ]
        ]
    },
    {
        "id": "a71a3d4.4a0ccc",
        "type": "debug",
        "z": "94b5e0b8.22242",
        "name": "List Admins",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1110,
        "y": 100,
        "wires": []
    },
    {
        "id": "8acbc868.20bf18",
        "type": "http response",
        "z": "94b5e0b8.22242",
        "name": "",
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "d79392bc.56dbb",
        "type": "inject",
        "z": "94b5e0b8.22242",
        "name": "Create Admin",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 180,
        "wires": [
            [
                "f24eca47.5527c8"
            ]
        ]
    },
    {
        "id": "f24eca47.5527c8",
        "type": "function",
        "z": "94b5e0b8.22242",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.orgId = global.get('orgId');\n\n// Sample Data\nmsg.payload = {\n    email: 'info@internetoflego.com',\n    name: 'cory lego user',\n    orgAccess: 'read-only',\n    tags:[\n        {\n            \"tag\":\"west\",\n            \"access\":\"read-only\"\n        },\n        {\n            \"tag\":\"east\",\n            \"access\":\"read-only\"\n        }\n    ],\n    networks: [] \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 180,
        "wires": [
            [
                "6e0a1e9f.25009"
            ]
        ]
    },
    {
        "id": "6e0a1e9f.25009",
        "type": "function",
        "z": "94b5e0b8.22242",
        "name": "Meraki API - Create Admin",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar orgId = msg.req.params.orgId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/organizations/\"+orgId+\"/admins\";\nmsg.method = 'post';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 180,
        "wires": [
            [
                "e03d1a86.17ac98"
            ]
        ]
    },
    {
        "id": "e03d1a86.17ac98",
        "type": "http request",
        "z": "94b5e0b8.22242",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 180,
        "wires": [
            [
                "2d5a03ec.72b60c",
                "c4a3d524.a43bf8"
            ]
        ]
    },
    {
        "id": "f7c80afe.5c61a8",
        "type": "http in",
        "z": "94b5e0b8.22242",
        "name": "",
        "url": "/meraki/api/organizations/:orgId/admins",
        "method": "post",
        "swaggerDoc": "",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "6e0a1e9f.25009"
            ]
        ]
    },
    {
        "id": "2d5a03ec.72b60c",
        "type": "debug",
        "z": "94b5e0b8.22242",
        "name": "Create Admin",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1100,
        "y": 220,
        "wires": []
    },
    {
        "id": "c4a3d524.a43bf8",
        "type": "http response",
        "z": "94b5e0b8.22242",
        "name": "",
        "x": 1130,
        "y": 180,
        "wires": []
    },
    {
        "id": "16d66d00.f88503",
        "type": "inject",
        "z": "76b3daf3.b8e4d4",
        "name": "Uplink Status of a Device",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "be3c14d1.6238b8"
            ]
        ]
    },
    {
        "id": "be3c14d1.6238b8",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nmsg.req.params.serial = global.get('serial');\n\n// Sample Data\nmsg.payload = {\n    \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 680,
        "wires": [
            [
                "99e5d51e.0741f8"
            ]
        ]
    },
    {
        "id": "99e5d51e.0741f8",
        "type": "function",
        "z": "76b3daf3.b8e4d4",
        "name": "Meraki API - Uplink Status",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\nvar serial = msg.req.params.serial;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/devices/\"+serial+\"/uplink\";\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 680,
        "wires": [
            [
                "a53db05d.37fb5"
            ]
        ]
    },
    {
        "id": "a53db05d.37fb5",
        "type": "http request",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "e2ec2c4e.67d65",
                "ef6dfae8.a53198"
            ]
        ]
    },
    {
        "id": "6297b1ab.ea09c",
        "type": "http in",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "url": "/meraki/api/networks/:netId/devices/:serial/uplink",
        "method": "get",
        "swaggerDoc": "",
        "x": 280,
        "y": 720,
        "wires": [
            [
                "99e5d51e.0741f8"
            ]
        ]
    },
    {
        "id": "e2ec2c4e.67d65",
        "type": "debug",
        "z": "76b3daf3.b8e4d4",
        "name": "Uplink Status",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1140,
        "y": 720,
        "wires": []
    },
    {
        "id": "ef6dfae8.a53198",
        "type": "http response",
        "z": "76b3daf3.b8e4d4",
        "name": "",
        "x": 1170,
        "y": 680,
        "wires": []
    },
    {
        "id": "38a4be66.e01152",
        "type": "inject",
        "z": "af61949e.6dc538",
        "name": "Traffic Analysis",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 560,
        "wires": [
            [
                "b8c31ddd.f5934"
            ]
        ]
    },
    {
        "id": "b8c31ddd.f5934",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "335c31d9.653a5e"
            ]
        ]
    },
    {
        "id": "335c31d9.653a5e",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "Meraki API - Traffic Analysis",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/traffic?timespan=14400\";\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 560,
        "wires": [
            [
                "f11be4f0.9275b8"
            ]
        ]
    },
    {
        "id": "f11be4f0.9275b8",
        "type": "http request",
        "z": "af61949e.6dc538",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 560,
        "wires": [
            [
                "b1c8fc06.74ad4",
                "c6220995.b775b8"
            ]
        ]
    },
    {
        "id": "a4a897b4.10bc68",
        "type": "http in",
        "z": "af61949e.6dc538",
        "name": "",
        "url": "/meraki/api/networks/:netId/traffic?timespan=14400",
        "method": "get",
        "swaggerDoc": "",
        "x": 250,
        "y": 600,
        "wires": [
            [
                "335c31d9.653a5e"
            ]
        ]
    },
    {
        "id": "b1c8fc06.74ad4",
        "type": "debug",
        "z": "af61949e.6dc538",
        "name": "Traffic Analysis",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1100,
        "y": 600,
        "wires": []
    },
    {
        "id": "c6220995.b775b8",
        "type": "http response",
        "z": "af61949e.6dc538",
        "name": "",
        "x": 1130,
        "y": 560,
        "wires": []
    },
    {
        "id": "ccb29b6e.b03948",
        "type": "inject",
        "z": "4d80243b.24c82c",
        "name": "Sets Defaults - Injected at start",
        "topic": "",
        "payload": "Setting Environment Variables",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "cbe7035.3ad1b"
            ]
        ]
    },
    {
        "id": "cbe7035.3ad1b",
        "type": "function",
        "z": "4d80243b.24c82c",
        "name": "Set Environment Variables: UPDATE THIS",
        "func": "//  ###### User Defined Variables ######\n\nconst API_KEY = ''; //Your API KEY (Keep this secret. Do not publish)\nvar shard = 'dashboard'; // https://n149.meraki.com , where n149 represent the shard number. This is defined to avoid redirect issues.\n\n\n// These \"test params\" variables are used by the testing buttons. In production, these paramters should be passed in the URL.\nvar orgId = '306267'; // Your default Organization ID\nvar netId = 'N_643451796760559911'; // Dexter LaBora - SF\nvar netId_delete = \"L_643451796760560270\"; // some network to delete as a test. Be carefull!\nvar serial = 'Q2JD-EFUM-ZQMP'; // Your default serial numer of device\nvar ssidNum = '0'; // default SSID to return\nvar portNum = '1'; // default switch port number to return\nvar srId = '46a71259-735f-4476-9d1e-08d5b017cbde';\nvar vlanId = '1';\n\n\n\n// ###### Set and Get Global variables ######\n\n\n// Assign to Global Context \nglobal.set('apiKey', API_KEY); // pulling API key via \"secret\" node. This avoides publishing the API key when sharing the flow\nglobal.set('shard', shard);\n\n\nglobal.set('orgId', orgId);\nglobal.set('netId', netId);\nglobal.set('serial', serial);\nglobal.set('ssidNum', ssidNum);\nglobal.set('portNum', portNum);\nglobal.set('srId', srId);\nglobal.set('vlanId', vlanId);\nglobal.set('netId_delete', netId_delete);\n\n// confirm changes were made\nvar settings = {};\n\n\nsettings.apiKey = global.get('apiKey');\nsettings.shard = global.get('shard');\n\nsettings.orgId = global.get('orgId');\nsettings.netId = global.get('netId');\nsettings.serial = global.get('serial');\nsettings.ssidNum = global.get('ssidNum');\nsettings.portNum = global.get('portNum');\nsettings.srId = global.get('srId');\nsettings.vlanId = global.get('vlanId');\nsettings.shard = global.get('netId_delete');\n\nmsg.payload = settings;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 80,
        "wires": [
            [
                "90890fa5.68d3d"
            ]
        ]
    },
    {
        "id": "90890fa5.68d3d",
        "type": "debug",
        "z": "4d80243b.24c82c",
        "name": "Flow Env Variables",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "1493cb1e.934b95",
        "type": "comment",
        "z": "4d80243b.24c82c",
        "name": "API Key and Environment variables: UPDATE THE NODE!",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "4f1738a4.9e5258",
        "type": "inject",
        "z": "57dd0a33.2090f4",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 720,
        "wires": [
            [
                "1791759b.93478a"
            ]
        ]
    },
    {
        "id": "1791759b.93478a",
        "type": "function",
        "z": "57dd0a33.2090f4",
        "name": "loop 10 times",
        "func": "for(var x =0; x<10; x++){\n    msg.payload = x;\n    node.send(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 720,
        "wires": [
            [
                "13385394.104ebc"
            ]
        ]
    },
    {
        "id": "13385394.104ebc",
        "type": "debug",
        "z": "57dd0a33.2090f4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 510,
        "y": 720,
        "wires": []
    },
    {
        "id": "6af7b4e2.802bfc",
        "type": "inject",
        "z": "57dd0a33.2090f4",
        "name": "List Devices",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 200,
        "wires": [
            [
                "1811cc89.676ef3"
            ]
        ]
    },
    {
        "id": "1811cc89.676ef3",
        "type": "function",
        "z": "57dd0a33.2090f4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 200,
        "wires": [
            [
                "45ab2334.9f7a9c"
            ]
        ]
    },
    {
        "id": "45ab2334.9f7a9c",
        "type": "function",
        "z": "57dd0a33.2090f4",
        "name": "Meraki API - List Devices",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/devices/\";\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 200,
        "wires": [
            [
                "1bdc43d2.fe5a3c"
            ]
        ]
    },
    {
        "id": "1bdc43d2.fe5a3c",
        "type": "http request",
        "z": "57dd0a33.2090f4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 910,
        "y": 200,
        "wires": [
            [
                "aa68b7a.bacdb48",
                "a2b2536d.1ce65"
            ]
        ]
    },
    {
        "id": "aa68b7a.bacdb48",
        "type": "debug",
        "z": "57dd0a33.2090f4",
        "name": "List Devices",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 910,
        "y": 240,
        "wires": []
    },
    {
        "id": "a2b2536d.1ce65",
        "type": "function",
        "z": "57dd0a33.2090f4",
        "name": "Send each serial",
        "func": "var devices = msg.payload;\nmsg.count = devices.length; // used for later context function\nfor(var x = 0; x < devices.length; x++){\n    msg.serial = devices[x].serial;\n    msg.netId = devices[x].networkId;\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 309,
        "y": 277.00000190734863,
        "wires": [
            [
                "d4236b5e.57c328",
                "eecbf3e7.65931"
            ]
        ]
    },
    {
        "id": "eecbf3e7.65931",
        "type": "function",
        "z": "57dd0a33.2090f4",
        "name": "Meraki API - Uplink Status",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.netId;\nvar serial = msg.serial;\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/devices/\"+serial+\"/uplink\";\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 559,
        "y": 277.00000190734863,
        "wires": [
            [
                "60e6d656.165f18"
            ]
        ]
    },
    {
        "id": "6797b040.b576d",
        "type": "http request",
        "z": "57dd0a33.2090f4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 929,
        "y": 277.00000190734863,
        "wires": [
            [
                "a7c20447.a05ce8",
                "31d13a18.81dca6"
            ]
        ]
    },
    {
        "id": "a7c20447.a05ce8",
        "type": "debug",
        "z": "57dd0a33.2090f4",
        "name": "Uplink Status",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 920,
        "y": 340,
        "wires": []
    },
    {
        "id": "d4236b5e.57c328",
        "type": "debug",
        "z": "57dd0a33.2090f4",
        "name": "Send each serial",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 310,
        "y": 320,
        "wires": []
    },
    {
        "id": "60e6d656.165f18",
        "type": "delay",
        "z": "57dd0a33.2090f4",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 769,
        "y": 277.00000190734863,
        "wires": [
            [
                "6797b040.b576d"
            ]
        ]
    },
    {
        "id": "90552e03.d1297",
        "type": "comment",
        "z": "57dd0a33.2090f4",
        "name": "Uplink status for each device",
        "info": "",
        "x": 160,
        "y": 120,
        "wires": []
    },
    {
        "id": "76fa7337.430d3c",
        "type": "http in",
        "z": "57dd0a33.2090f4",
        "name": "",
        "url": "/meraki/api/networks/:netId/devicesUplinks",
        "method": "get",
        "swaggerDoc": "",
        "x": 260,
        "y": 240,
        "wires": [
            [
                "45ab2334.9f7a9c"
            ]
        ]
    },
    {
        "id": "a109f0b0.f559c",
        "type": "http response",
        "z": "57dd0a33.2090f4",
        "name": "http response to client API",
        "x": 900,
        "y": 380,
        "wires": []
    },
    {
        "id": "e31dc68b.ddfe28",
        "type": "comment",
        "z": "57dd0a33.2090f4",
        "name": "Sample Logic",
        "info": "",
        "x": 110,
        "y": 680,
        "wires": []
    },
    {
        "id": "31d13a18.81dca6",
        "type": "function",
        "z": "57dd0a33.2090f4",
        "name": "Context Buffer",
        "func": "var dataBuffer = context.get('dataBuffer') || [];\ndataBuffer.push(msg.payload);\nconsole.log(\"dataBuffer\",dataBuffer);\nif (dataBuffer.length == msg.count){\n    msg.payload = dataBuffer;\n    // clear dataBuffer\n    dataBuffer = [];\n    context.set('dataBuffer',dataBuffer);\n    \n    // send final payload\n    return msg;\n}else{\n    context.set('dataBuffer',dataBuffer);\n    // do nothing and wait for more data\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 701,
        "y": 342.99999809265137,
        "wires": [
            [
                "a109f0b0.f559c",
                "dafbc0e9.8c9b7"
            ]
        ]
    },
    {
        "id": "dafbc0e9.8c9b7",
        "type": "debug",
        "z": "57dd0a33.2090f4",
        "name": "Uplink Status context",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 900,
        "y": 420,
        "wires": []
    },
    {
        "id": "20e2da9.5833726",
        "type": "comment",
        "z": "57dd0a33.2090f4",
        "name": "Get all device uplink status by iterating through each device and querying its status. Warning: this process does take a while.",
        "info": "",
        "x": 540,
        "y": 60,
        "wires": []
    },
    {
        "id": "ff20a24.9b3146",
        "type": "inject",
        "z": "c7981b00.4fd838",
        "name": "List Clients",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "5a81a76e.a83a98"
            ]
        ]
    },
    {
        "id": "5a81a76e.a83a98",
        "type": "function",
        "z": "c7981b00.4fd838",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.serial = global.get('serial');\n\n// Sample Data\nmsg.req.query = \"timespan=84000\";\nmsg.payload = {\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 80,
        "wires": [
            [
                "9c5bea9d.0c0db8"
            ]
        ]
    },
    {
        "id": "9c5bea9d.0c0db8",
        "type": "function",
        "z": "c7981b00.4fd838",
        "name": "Meraki API - List Clients",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar serial = msg.req.params.serial;\nvar query = msg.req.query;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/devices/\"+serial+\"/clients?\"+query;\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "bf0ee0f6.ce418"
            ]
        ]
    },
    {
        "id": "bf0ee0f6.ce418",
        "type": "http request",
        "z": "c7981b00.4fd838",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 990,
        "y": 80,
        "wires": [
            [
                "82876e01.7a3ec",
                "e9757ab2.2348d8"
            ]
        ]
    },
    {
        "id": "3d2e2fce.6928c",
        "type": "http in",
        "z": "c7981b00.4fd838",
        "name": "",
        "url": "/meraki/api/devices/:serial/clients",
        "method": "get",
        "swaggerDoc": "",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "9c5bea9d.0c0db8"
            ]
        ]
    },
    {
        "id": "82876e01.7a3ec",
        "type": "debug",
        "z": "c7981b00.4fd838",
        "name": "List Clients",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1130,
        "y": 120,
        "wires": []
    },
    {
        "id": "e9757ab2.2348d8",
        "type": "http response",
        "z": "c7981b00.4fd838",
        "name": "",
        "x": 1150,
        "y": 80,
        "wires": []
    },
    {
        "id": "60864874.09e078",
        "type": "inject",
        "z": "d2515636.8eee28",
        "name": "List L3 Firewall Rules (MR Wireless)",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 180,
        "y": 60,
        "wires": [
            [
                "aa7e15a3.ab6038"
            ]
        ]
    },
    {
        "id": "aa7e15a3.ab6038",
        "type": "function",
        "z": "d2515636.8eee28",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.serial = global.get('serial');\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 60,
        "wires": [
            [
                "c3c212ec.5ce6d"
            ]
        ]
    },
    {
        "id": "c3c212ec.5ce6d",
        "type": "function",
        "z": "d2515636.8eee28",
        "name": "Meraki API - List L3 Firewall Rules",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar ssidNum = msg.req.params.ssidNum;\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/ssids/\"+ssidNum+\"/l3FirewallRules\";\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 60,
        "wires": [
            [
                "f7fb5840.c25858"
            ]
        ]
    },
    {
        "id": "f7fb5840.c25858",
        "type": "http request",
        "z": "d2515636.8eee28",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 60,
        "wires": [
            [
                "e12bd658.41fb88",
                "976c1598.06dc48"
            ]
        ]
    },
    {
        "id": "46cc9c.30393364",
        "type": "http in",
        "z": "d2515636.8eee28",
        "name": "",
        "url": "/meraki/api/networks/:netId/ssids/:ssidNum/l3FirewallRules",
        "method": "get",
        "swaggerDoc": "",
        "x": 270,
        "y": 100,
        "wires": [
            [
                "c3c212ec.5ce6d"
            ]
        ]
    },
    {
        "id": "e12bd658.41fb88",
        "type": "debug",
        "z": "d2515636.8eee28",
        "name": "List L3 Firewall Rules",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1140,
        "y": 100,
        "wires": []
    },
    {
        "id": "976c1598.06dc48",
        "type": "http response",
        "z": "d2515636.8eee28",
        "name": "",
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "c75207e2.ca1bc8",
        "type": "inject",
        "z": "d2515636.8eee28",
        "name": "Update L3 Firewall Rules (MR Wireless)",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 190,
        "y": 180,
        "wires": [
            [
                "e1118b5b.74da38"
            ]
        ]
    },
    {
        "id": "e1118b5b.74da38",
        "type": "function",
        "z": "d2515636.8eee28",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.serial = global.get('serial');\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {\n\t\"rules\":[{\n\t\"comment\":\"API TEST from Node-RED\",\n\t\"policy\":\"deny\",\n\t\"protocol\":\"tcp\",\n\t\"destPort\":\"any\",\n\t\"destCidr\":\"192.168.1.0/24\"\n\t\n}],\n\t\"allowLanAccess\":true\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 180,
        "wires": [
            [
                "c3280a2.8c943f8"
            ]
        ]
    },
    {
        "id": "c3280a2.8c943f8",
        "type": "function",
        "z": "d2515636.8eee28",
        "name": "Meraki API - Update the Attributes of an SSID",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar ssidNum = msg.req.params.ssidNum;\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/ssids/\"+ssidNum+\"/l3FirewallRules\";\nmsg.method = \"put\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 180,
        "wires": [
            [
                "718ae34f.68439c"
            ]
        ]
    },
    {
        "id": "718ae34f.68439c",
        "type": "http request",
        "z": "d2515636.8eee28",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1010,
        "y": 180,
        "wires": [
            [
                "e6efc08c.36757",
                "ee8bf986.2336d8"
            ]
        ]
    },
    {
        "id": "df0d36ca.d92068",
        "type": "http in",
        "z": "d2515636.8eee28",
        "name": "",
        "url": "/meraki/api/networks/:netId/ssids/:ssidNum/l3FirewallRules",
        "method": "put",
        "swaggerDoc": "",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "c3280a2.8c943f8"
            ]
        ]
    },
    {
        "id": "e6efc08c.36757",
        "type": "debug",
        "z": "d2515636.8eee28",
        "name": "Update Attributes of an SSID",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1100,
        "y": 220,
        "wires": []
    },
    {
        "id": "ee8bf986.2336d8",
        "type": "http response",
        "z": "d2515636.8eee28",
        "name": "",
        "x": 1170,
        "y": 180,
        "wires": []
    },
    {
        "id": "c0c47348.e18c4",
        "type": "inject",
        "z": "af61949e.6dc538",
        "name": "Delete a Network",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 360,
        "wires": [
            [
                "39013c34.c62d04"
            ]
        ]
    },
    {
        "id": "39013c34.c62d04",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId_delete');\n\n// Sample Data\nmsg.payload = {\n    \"name\": \"API Test - Node-RED - \"+ (new Date().getMilliseconds()),\n    \"timeZone\": \"Europe/Amsterdam\",\n    \"tags\": \"APItest\",\n    \"type\": \"wireless\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 360,
        "wires": [
            [
                "b40a5684.c5ecd8"
            ]
        ]
    },
    {
        "id": "b40a5684.c5ecd8",
        "type": "function",
        "z": "af61949e.6dc538",
        "name": "Meraki API - Delete a Network",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId;\nmsg.method = 'delete';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "5856062a.2a6b48"
            ]
        ]
    },
    {
        "id": "5856062a.2a6b48",
        "type": "http request",
        "z": "af61949e.6dc538",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 360,
        "wires": [
            [
                "c711e2b1.a947c",
                "3a85d66d.b08b0a"
            ]
        ]
    },
    {
        "id": "671ae088.804c5",
        "type": "http in",
        "z": "af61949e.6dc538",
        "name": "",
        "url": "meraki/api/networks/:netId",
        "method": "delete",
        "swaggerDoc": "",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "b40a5684.c5ecd8"
            ]
        ]
    },
    {
        "id": "c711e2b1.a947c",
        "type": "debug",
        "z": "af61949e.6dc538",
        "name": "Delete a Network",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1090,
        "y": 400,
        "wires": []
    },
    {
        "id": "3a85d66d.b08b0a",
        "type": "http response",
        "z": "af61949e.6dc538",
        "name": "",
        "x": 1130,
        "y": 360,
        "wires": []
    },
    {
        "id": "7acf3c0b.f92764",
        "type": "inject",
        "z": "6f0211b2.01812",
        "name": "List VPN Settings",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "b7127b.fda4cd88"
            ]
        ]
    },
    {
        "id": "b7127b.fda4cd88",
        "type": "function",
        "z": "6f0211b2.01812",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 80,
        "wires": [
            [
                "dc862545.eef7e8"
            ]
        ]
    },
    {
        "id": "dc862545.eef7e8",
        "type": "function",
        "z": "6f0211b2.01812",
        "name": "Meraki API - List VPN Settings",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar netId = msg.req.params.netId;\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/siteToSiteVpn\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 80,
        "wires": [
            [
                "d3fd140e.048198"
            ]
        ]
    },
    {
        "id": "d3fd140e.048198",
        "type": "http request",
        "z": "6f0211b2.01812",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 990,
        "y": 80,
        "wires": [
            [
                "4d3dff82.eb423",
                "22033747.3113f8"
            ]
        ]
    },
    {
        "id": "874fa3a.eea3b6",
        "type": "http in",
        "z": "6f0211b2.01812",
        "name": "",
        "url": "/meraki/api/networks/:netId/siteToSiteVpn",
        "method": "get",
        "swaggerDoc": "",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "dc862545.eef7e8"
            ]
        ]
    },
    {
        "id": "4d3dff82.eb423",
        "type": "debug",
        "z": "6f0211b2.01812",
        "name": "VPN Settings",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1150,
        "y": 120,
        "wires": []
    },
    {
        "id": "22033747.3113f8",
        "type": "http response",
        "z": "6f0211b2.01812",
        "name": "",
        "x": 1150,
        "y": 80,
        "wires": []
    },
    {
        "id": "2de590ce.01141",
        "type": "inject",
        "z": "6f0211b2.01812",
        "name": "Update VPN Settings",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "c96c46d3.9b4428"
            ]
        ]
    },
    {
        "id": "c96c46d3.9b4428",
        "type": "function",
        "z": "6f0211b2.01812",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload = {\n\"mode\":\"spoke\",\n\"hubs\":[{\n\t\"hubId\":\"N_1234\",\n\t\"useDefaultRoute\":true\n\t},\n\t{\n\t\t\"hubId\":\"N_2345\",\"useDefaultRoute\":false\n\t}],\n\t\"subnets\":[{\n\t\t\"localSubnet\":\"192.168.1.0/24\",\n\t\t\"useVpn\":true\n\t},\n\t{\"localSubnet\":\"192.168.128.0/24\",\n\t\"useVpn\":true\n\t\t\n\t}]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 200,
        "wires": [
            [
                "fe72fa4f.49be88"
            ]
        ]
    },
    {
        "id": "fe72fa4f.49be88",
        "type": "function",
        "z": "6f0211b2.01812",
        "name": "Meraki API - List VPN Settings",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/siteToSiteVpn\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 200,
        "wires": [
            [
                "21ebebeb.3ad434"
            ]
        ]
    },
    {
        "id": "21ebebeb.3ad434",
        "type": "http request",
        "z": "6f0211b2.01812",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 990,
        "y": 200,
        "wires": [
            [
                "7d1d830e.26bafc",
                "c7e1a939.938f48"
            ]
        ]
    },
    {
        "id": "159ec6a7.33c339",
        "type": "http in",
        "z": "6f0211b2.01812",
        "name": "",
        "url": "/meraki/api/networks/:netId/siteToSiteVpn",
        "method": "put",
        "swaggerDoc": "",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "fe72fa4f.49be88"
            ]
        ]
    },
    {
        "id": "7d1d830e.26bafc",
        "type": "debug",
        "z": "6f0211b2.01812",
        "name": "VPN Settings",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1150,
        "y": 240,
        "wires": []
    },
    {
        "id": "c7e1a939.938f48",
        "type": "http response",
        "z": "6f0211b2.01812",
        "name": "",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "7b08d39a.42dbec",
        "type": "comment",
        "z": "57dd0a33.2090f4",
        "name": "Change PSK once a month",
        "info": "",
        "x": 170,
        "y": 380,
        "wires": []
    },
    {
        "id": "37bc4107.c173ce",
        "type": "comment",
        "z": "57dd0a33.2090f4",
        "name": "SMB Registration",
        "info": "",
        "x": 130,
        "y": 500,
        "wires": []
    },
    {
        "id": "5d462f38.67b82",
        "type": "inject",
        "z": "b428d2b0.b23cc",
        "name": "List Switch Ports",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 60,
        "wires": [
            [
                "9fadb086.89184"
            ]
        ]
    },
    {
        "id": "9fadb086.89184",
        "type": "function",
        "z": "b428d2b0.b23cc",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.serial = global.get('serial');\n\n// Sample Data\nmsg.payload = {\n    \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 60,
        "wires": [
            [
                "df688541.7bfa38"
            ]
        ]
    },
    {
        "id": "df688541.7bfa38",
        "type": "function",
        "z": "b428d2b0.b23cc",
        "name": "Meraki API - Switch Ports",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar serial = msg.req.params.serial;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/devices/\"+serial+\"/switchPorts\";\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 60,
        "wires": [
            [
                "f7893b91.291018"
            ]
        ]
    },
    {
        "id": "f7893b91.291018",
        "type": "http request",
        "z": "b428d2b0.b23cc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 910,
        "y": 60,
        "wires": [
            [
                "dab8d9e1.bbf868",
                "d186d964.a48728"
            ]
        ]
    },
    {
        "id": "c1edd2d2.23b33",
        "type": "http in",
        "z": "b428d2b0.b23cc",
        "name": "",
        "url": "/meraki/api/devices/:serial/switchPorts",
        "method": "get",
        "swaggerDoc": "",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "df688541.7bfa38",
                "dab8d9e1.bbf868"
            ]
        ]
    },
    {
        "id": "dab8d9e1.bbf868",
        "type": "debug",
        "z": "b428d2b0.b23cc",
        "name": "List Switch Ports",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1030,
        "y": 100,
        "wires": []
    },
    {
        "id": "d186d964.a48728",
        "type": "http response",
        "z": "b428d2b0.b23cc",
        "name": "",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "4b9c989f.600bd8",
        "type": "inject",
        "z": "b428d2b0.b23cc",
        "name": "Return a Switch Port",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "d89e24bd.4b4088"
            ]
        ]
    },
    {
        "id": "d89e24bd.4b4088",
        "type": "function",
        "z": "b428d2b0.b23cc",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.serial = global.get('serial');\nmsg.req.params.portNum = global.get('portNum');\n\n// Sample Data\nmsg.payload = {\n    \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "c073d29a.bfea6"
            ]
        ]
    },
    {
        "id": "c073d29a.bfea6",
        "type": "function",
        "z": "b428d2b0.b23cc",
        "name": "Meraki API - Return a Switch Port",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar serial = msg.req.params.serial;\nvar portNum = msg.req.params.portNum;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/devices/\"+serial+\"/switchPorts/\"+portNum;\nmsg.method = \"get\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 160,
        "wires": [
            [
                "a20dd6.d595a228"
            ]
        ]
    },
    {
        "id": "a20dd6.d595a228",
        "type": "http request",
        "z": "b428d2b0.b23cc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 910,
        "y": 160,
        "wires": [
            [
                "80b12bb1.d4d7e8",
                "1122a58e.d2c49a"
            ]
        ]
    },
    {
        "id": "a3801330.a1dba",
        "type": "http in",
        "z": "b428d2b0.b23cc",
        "name": "",
        "url": "/meraki/api/devices/:serial/switchPorts/:portNum",
        "method": "get",
        "swaggerDoc": "",
        "x": 260,
        "y": 200,
        "wires": [
            [
                "c073d29a.bfea6"
            ]
        ]
    },
    {
        "id": "80b12bb1.d4d7e8",
        "type": "debug",
        "z": "b428d2b0.b23cc",
        "name": "Return a Switch Port",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1020,
        "y": 200,
        "wires": []
    },
    {
        "id": "1122a58e.d2c49a",
        "type": "http response",
        "z": "b428d2b0.b23cc",
        "name": "",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "5ac73193.ff15b",
        "type": "inject",
        "z": "b428d2b0.b23cc",
        "name": "Update a Switch Port",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 260,
        "wires": [
            [
                "c26aaf08.74535"
            ]
        ]
    },
    {
        "id": "c26aaf08.74535",
        "type": "function",
        "z": "b428d2b0.b23cc",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.serial = global.get('serial');\nmsg.req.params.portNum = global.get('portNum');\n\n// Sample Data\nmsg.payload = {\n  \"name\": \"test from Postman\",\n  \"tags\": \"API\",\n  \"enabled\": true,\n  \"poeEnabled\": true,\n  \"type\": \"trunk\",\n  \"vlan\": 1,\n  \"voiceVlan\": null,\n  \"allowedVlans\": \"all\",\n  \"isolationEnabled\": false,\n  \"rstpEnabled\": true,\n  \"stpGuard\": \"disabled\",\n  \"accessPolicyNumber\": null\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "1c3cc371.38704d"
            ]
        ]
    },
    {
        "id": "1c3cc371.38704d",
        "type": "function",
        "z": "b428d2b0.b23cc",
        "name": "Meraki API - Return a Switch Port",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar serial = msg.req.params.serial;\nvar portNum = msg.req.params.portNum;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/devices/\"+serial+\"/switchPorts/\"+portNum;\nmsg.method = \"put\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "64d291e1.6faf9"
            ]
        ]
    },
    {
        "id": "64d291e1.6faf9",
        "type": "http request",
        "z": "b428d2b0.b23cc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 910,
        "y": 260,
        "wires": [
            [
                "735fee40.53c67",
                "66b2365b.bebf68"
            ]
        ]
    },
    {
        "id": "fc3a9b73.de6268",
        "type": "http in",
        "z": "b428d2b0.b23cc",
        "name": "",
        "url": "/meraki/api/devices/:serial/switchPorts/:portNum",
        "method": "put",
        "swaggerDoc": "",
        "x": 260,
        "y": 300,
        "wires": [
            [
                "1c3cc371.38704d"
            ]
        ]
    },
    {
        "id": "735fee40.53c67",
        "type": "debug",
        "z": "b428d2b0.b23cc",
        "name": "Return a Switch Port",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1020,
        "y": 300,
        "wires": []
    },
    {
        "id": "66b2365b.bebf68",
        "type": "http response",
        "z": "b428d2b0.b23cc",
        "name": "",
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "c5ef1bf8.4a9d58",
        "type": "inject",
        "z": "7d8aac49.699ef4",
        "name": "List Static Routes",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 60,
        "wires": [
            [
                "7ed419c2.8b9dc8"
            ]
        ]
    },
    {
        "id": "7ed419c2.8b9dc8",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 60,
        "wires": [
            [
                "2657151e.da102a"
            ]
        ]
    },
    {
        "id": "2657151e.da102a",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "Meraki API - List Static Routes",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/staticRoutes\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 60,
        "wires": [
            [
                "9a7171f6.144eb"
            ]
        ]
    },
    {
        "id": "9a7171f6.144eb",
        "type": "http request",
        "z": "7d8aac49.699ef4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 60,
        "wires": [
            [
                "2d90406c.acc6c",
                "ae76648d.5913e8"
            ]
        ]
    },
    {
        "id": "14fd953d.fa006b",
        "type": "http in",
        "z": "7d8aac49.699ef4",
        "name": "",
        "url": "/meraki/api/networks/:netId/staticRoutes",
        "method": "get",
        "swaggerDoc": "",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "2657151e.da102a"
            ]
        ]
    },
    {
        "id": "2d90406c.acc6c",
        "type": "debug",
        "z": "7d8aac49.699ef4",
        "name": "List Static Routes",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1090,
        "y": 100,
        "wires": []
    },
    {
        "id": "ae76648d.5913e8",
        "type": "http response",
        "z": "7d8aac49.699ef4",
        "name": "",
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "54ee2f0b.53185",
        "type": "inject",
        "z": "7d8aac49.699ef4",
        "name": "Return a Static Routes",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "d5ce505e.348da"
            ]
        ]
    },
    {
        "id": "d5ce505e.348da",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nmsg.req.params.srId = global.get('srId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "dc19f8b6.acc428"
            ]
        ]
    },
    {
        "id": "dc19f8b6.acc428",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "Meraki API - Return a Static Route",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar netId = msg.req.params.netId;\nvar srId = msg.req.params.srId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/staticRoutes/\"+srId;\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "303d4465.0a49fc"
            ]
        ]
    },
    {
        "id": "303d4465.0a49fc",
        "type": "http request",
        "z": "7d8aac49.699ef4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 160,
        "wires": [
            [
                "55c1e383.0d645c",
                "e15515db.f377e8"
            ]
        ]
    },
    {
        "id": "42bbefe1.615b4",
        "type": "http in",
        "z": "7d8aac49.699ef4",
        "name": "",
        "url": "/meraki/api/networks/:netId/staticRoutes/srId",
        "method": "get",
        "swaggerDoc": "",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "dc19f8b6.acc428"
            ]
        ]
    },
    {
        "id": "55c1e383.0d645c",
        "type": "debug",
        "z": "7d8aac49.699ef4",
        "name": "Return a Static Routes",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1100,
        "y": 200,
        "wires": []
    },
    {
        "id": "e15515db.f377e8",
        "type": "http response",
        "z": "7d8aac49.699ef4",
        "name": "",
        "x": 1130,
        "y": 160,
        "wires": []
    },
    {
        "id": "adeb87ad.d67718",
        "type": "inject",
        "z": "7d8aac49.699ef4",
        "name": "Update a Static Routes",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "27ddc557.f1806a"
            ]
        ]
    },
    {
        "id": "27ddc557.f1806a",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nmsg.req.params.srId = global.get('srId');\n\n// Sample Data\nmsg.payload ={\n \t\"name\":\"test API route\",\n\t\"subnet\":\"192.168.123.0/24\",\n\t\"gatewayIp\":\"10.0.0.1\",\n\t\"enabled\":\"true\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "9c2182ca.f5972"
            ]
        ]
    },
    {
        "id": "9c2182ca.f5972",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "Meraki API - Update a Static Route",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\nvar srId = msg.req.params.srId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/staticRoutes/\"+srId;\nmsg.method = 'put';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "855f6e39.57d24"
            ]
        ]
    },
    {
        "id": "855f6e39.57d24",
        "type": "http request",
        "z": "7d8aac49.699ef4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 260,
        "wires": [
            [
                "c13ba60c.4326f8",
                "830e7de2.b56c4"
            ]
        ]
    },
    {
        "id": "4ac1d744.f2d7a8",
        "type": "http in",
        "z": "7d8aac49.699ef4",
        "name": "",
        "url": "/meraki/api/networks/:netId/staticRoutes/srId",
        "method": "put",
        "swaggerDoc": "",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "9c2182ca.f5972"
            ]
        ]
    },
    {
        "id": "c13ba60c.4326f8",
        "type": "debug",
        "z": "7d8aac49.699ef4",
        "name": "Update a Static Routes",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1110,
        "y": 300,
        "wires": []
    },
    {
        "id": "830e7de2.b56c4",
        "type": "http response",
        "z": "7d8aac49.699ef4",
        "name": "",
        "x": 1130,
        "y": 260,
        "wires": []
    },
    {
        "id": "5b25f6dd.741288",
        "type": "inject",
        "z": "7d8aac49.699ef4",
        "name": "Add a Static Routes",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "c4e3e9d9.366688"
            ]
        ]
    },
    {
        "id": "c4e3e9d9.366688",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\n\n// Sample Data\nmsg.payload ={\n \t\"name\":\"test API route\",\n\t\"subnet\":\"192.168.123.0/24\",\n\t\"gatewayIp\":\"10.0.0.1\",\n\t\"enabled\":\"true\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 360,
        "wires": [
            [
                "8c74a0c1.4a89b"
            ]
        ]
    },
    {
        "id": "8c74a0c1.4a89b",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "Meraki API - Add a Static Route",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/staticRoutes/\";\nmsg.method = 'post';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "c0dc45f1.c2c108"
            ]
        ]
    },
    {
        "id": "c0dc45f1.c2c108",
        "type": "http request",
        "z": "7d8aac49.699ef4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 360,
        "wires": [
            [
                "fdd1730c.2c00d",
                "9a4e4643.498f78"
            ]
        ]
    },
    {
        "id": "40f16eec.752f2",
        "type": "http in",
        "z": "7d8aac49.699ef4",
        "name": "",
        "url": "/meraki/api/networks/:netId/staticRoutes/srId",
        "method": "post",
        "swaggerDoc": "",
        "x": 230,
        "y": 400,
        "wires": [
            [
                "8c74a0c1.4a89b"
            ]
        ]
    },
    {
        "id": "fdd1730c.2c00d",
        "type": "debug",
        "z": "7d8aac49.699ef4",
        "name": "Add a Static Routes",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1100,
        "y": 400,
        "wires": []
    },
    {
        "id": "9a4e4643.498f78",
        "type": "http response",
        "z": "7d8aac49.699ef4",
        "name": "",
        "x": 1130,
        "y": 360,
        "wires": []
    },
    {
        "id": "bc195f3c.3de29",
        "type": "inject",
        "z": "7d8aac49.699ef4",
        "name": "Delete a Static Routes",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 460,
        "wires": [
            [
                "1f7dc254.c8a7ce"
            ]
        ]
    },
    {
        "id": "1f7dc254.c8a7ce",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nmsg.req.params.srId = global.get('srId');\n\n// Sample Data\nmsg.payload ={\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 460,
        "wires": [
            [
                "4d669e86.d9353"
            ]
        ]
    },
    {
        "id": "4d669e86.d9353",
        "type": "function",
        "z": "7d8aac49.699ef4",
        "name": "Meraki API - Delete a Static Route",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\nvar netId = msg.req.params.netId;\nvar srId = msg.req.params.srId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/networks/\"+netId+\"/staticRoutes/\"+srId;\nmsg.method = 'delete';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 460,
        "wires": [
            [
                "ef4c2e82.2793c"
            ]
        ]
    },
    {
        "id": "ef4c2e82.2793c",
        "type": "http request",
        "z": "7d8aac49.699ef4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 460,
        "wires": [
            [
                "91be8f5b.b2c",
                "17f58fcb.ece1"
            ]
        ]
    },
    {
        "id": "dc28855a.4d21d8",
        "type": "http in",
        "z": "7d8aac49.699ef4",
        "name": "",
        "url": "/meraki/api/networks/:netId/staticRoutes/srId",
        "method": "delete",
        "swaggerDoc": "",
        "x": 240,
        "y": 500,
        "wires": [
            [
                "4d669e86.d9353"
            ]
        ]
    },
    {
        "id": "91be8f5b.b2c",
        "type": "debug",
        "z": "7d8aac49.699ef4",
        "name": "Delete a Static Routes",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1100,
        "y": 500,
        "wires": []
    },
    {
        "id": "17f58fcb.ece1",
        "type": "http response",
        "z": "7d8aac49.699ef4",
        "name": "",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "15b4036d.a6778d",
        "type": "inject",
        "z": "fcbaf190.03c35",
        "name": "List VLANs of a Network",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 40,
        "wires": [
            [
                "515b35b6.c2d9dc"
            ]
        ]
    },
    {
        "id": "515b35b6.c2d9dc",
        "type": "function",
        "z": "fcbaf190.03c35",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 40,
        "wires": [
            [
                "34b97fef.cff3b"
            ]
        ]
    },
    {
        "id": "34b97fef.cff3b",
        "type": "function",
        "z": "fcbaf190.03c35",
        "name": "Meraki API - List VLANs of a Network",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar netId = msg.req.params.netId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/vlans\";\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 40,
        "wires": [
            [
                "737360e4.569df"
            ]
        ]
    },
    {
        "id": "737360e4.569df",
        "type": "http request",
        "z": "fcbaf190.03c35",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 40,
        "wires": [
            [
                "c73398be.b02868",
                "dd91ea1a.ab1078"
            ]
        ]
    },
    {
        "id": "daf168c9.24b6c8",
        "type": "http in",
        "z": "fcbaf190.03c35",
        "name": "[get] /meraki/api/networks/:netId/vlans",
        "url": "/meraki/api/networks/:netId/vlans",
        "method": "get",
        "swaggerDoc": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "34b97fef.cff3b"
            ]
        ]
    },
    {
        "id": "c73398be.b02868",
        "type": "debug",
        "z": "fcbaf190.03c35",
        "name": "List VLANs",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1110,
        "y": 80,
        "wires": []
    },
    {
        "id": "dd91ea1a.ab1078",
        "type": "http response",
        "z": "fcbaf190.03c35",
        "name": "",
        "x": 1130,
        "y": 40,
        "wires": []
    },
    {
        "id": "dd441e76.de59c",
        "type": "inject",
        "z": "fcbaf190.03c35",
        "name": "Return a VLAN of a Network",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "75b2b89c.4c72a8"
            ]
        ]
    },
    {
        "id": "75b2b89c.4c72a8",
        "type": "function",
        "z": "fcbaf190.03c35",
        "name": "test params",
        "func": "msg.req = {};\nmsg.req.params = {};\nmsg.req.params.netId = global.get('netId');\nmsg.req.params.vlanId = global.get('vlanId');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "42114869.138ab8"
            ]
        ]
    },
    {
        "id": "42114869.138ab8",
        "type": "function",
        "z": "fcbaf190.03c35",
        "name": "Meraki API - Return a VLAN of a Network",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar netId = msg.req.params.netId;\nvar vlanId = msg.req.params.vlanId;\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://dashboard.meraki.com/api/v0/networks/\"+netId+\"/vlans/\"+vlanId;\nmsg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 140,
        "wires": [
            [
                "46764b39.2bb014"
            ]
        ]
    },
    {
        "id": "46764b39.2bb014",
        "type": "http request",
        "z": "fcbaf190.03c35",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 970,
        "y": 140,
        "wires": [
            [
                "8f3b3c61.df899",
                "7dab8fc9.7109a"
            ]
        ]
    },
    {
        "id": "a86941b.316d7c",
        "type": "http in",
        "z": "fcbaf190.03c35",
        "name": "[get] /meraki/api/networks/:netId/vlans/:vlanId",
        "url": "/meraki/api/networks/:netId/vlans/:vlanId",
        "method": "get",
        "swaggerDoc": "",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "42114869.138ab8"
            ]
        ]
    },
    {
        "id": "8f3b3c61.df899",
        "type": "debug",
        "z": "fcbaf190.03c35",
        "name": "Return a VLAN",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1120,
        "y": 180,
        "wires": []
    },
    {
        "id": "7dab8fc9.7109a",
        "type": "http response",
        "z": "fcbaf190.03c35",
        "name": "",
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "e7695112.427a9",
        "type": "debug",
        "z": "76b3daf3.b8e4d4",
        "name": "Claim a Device - pre-request",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 907,
        "y": 340,
        "wires": []
    },
    {
        "id": "cf8e54cb.3685b8",
        "type": "inject",
        "z": "27bac376.4fd3bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 100,
        "wires": [
            [
                "32541133.2047ae"
            ]
        ]
    },
    {
        "id": "32541133.2047ae",
        "type": "function",
        "z": "27bac376.4fd3bc",
        "name": "Format Date",
        "func": "var time = new Date(msg.payload);\nmsg.payload = \"Message sent at: \"+time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 100,
        "wires": [
            [
                "ae8630a2.c0c39",
                "43b585ec.232abc"
            ]
        ]
    },
    {
        "id": "ae8630a2.c0c39",
        "type": "debug",
        "z": "27bac376.4fd3bc",
        "name": "formatted message",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "63c73248.c3599c",
        "type": "http in",
        "z": "27bac376.4fd3bc",
        "name": "",
        "url": "/time",
        "method": "get",
        "swaggerDoc": "",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "d1712c04.48f36"
            ]
        ]
    },
    {
        "id": "d1712c04.48f36",
        "type": "function",
        "z": "27bac376.4fd3bc",
        "name": "timestamp",
        "func": "msg.payload = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "32541133.2047ae"
            ]
        ]
    },
    {
        "id": "43b585ec.232abc",
        "type": "http response",
        "z": "27bac376.4fd3bc",
        "name": "",
        "x": 590,
        "y": 180,
        "wires": []
    },
    {
        "id": "f27d6851.65c018",
        "type": "inject",
        "z": "27bac376.4fd3bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 340,
        "wires": [
            [
                "28b22403.b0af7c"
            ]
        ]
    },
    {
        "id": "28b22403.b0af7c",
        "type": "http request",
        "z": "27bac376.4fd3bc",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "http://date.jsontest.com",
        "tls": "",
        "x": 320,
        "y": 340,
        "wires": [
            [
                "e9091cad.bd05f",
                "f6cf7eae.0527a"
            ]
        ]
    },
    {
        "id": "e9091cad.bd05f",
        "type": "debug",
        "z": "27bac376.4fd3bc",
        "name": "json test - timestamp",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 300,
        "y": 380,
        "wires": []
    },
    {
        "id": "f6cf7eae.0527a",
        "type": "function",
        "z": "27bac376.4fd3bc",
        "name": "Format Message",
        "func": "var time = msg.payload.time\nmsg.payload = \"JSON Test time: \"+time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 340,
        "wires": [
            [
                "dda98a9c.fc6d28"
            ]
        ]
    },
    {
        "id": "dda98a9c.fc6d28",
        "type": "debug",
        "z": "27bac376.4fd3bc",
        "name": "formatted message",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 570,
        "y": 380,
        "wires": []
    },
    {
        "id": "eda697ef.e2c9f8",
        "type": "comment",
        "z": "27bac376.4fd3bc",
        "name": "REST API Endpoint",
        "info": "",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "c41cf463.55e458",
        "type": "comment",
        "z": "27bac376.4fd3bc",
        "name": "REST API Client",
        "info": "",
        "x": 100,
        "y": 280,
        "wires": []
    },
    {
        "id": "701b8823.647578",
        "type": "http in",
        "z": "45ac7f24.44411",
        "name": "",
        "url": "/mysite",
        "method": "get",
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "baa43a91.a030b8"
            ]
        ]
    },
    {
        "id": "cdb64d45.d7b3a",
        "type": "http in",
        "z": "45ac7f24.44411",
        "name": "",
        "url": "/mysitepost",
        "method": "post",
        "swaggerDoc": "",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "55699cd6.b689b4",
                "375af8e7.db8558"
            ]
        ]
    },
    {
        "id": "baa43a91.a030b8",
        "type": "function",
        "z": "45ac7f24.44411",
        "name": "msg.url = \"mysitepost\";",
        "func": "msg.url = \"mysitepost\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "1fe1dd28.bc0bc3"
            ]
        ]
    },
    {
        "id": "55699cd6.b689b4",
        "type": "debug",
        "z": "45ac7f24.44411",
        "name": "mysitepost",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 770,
        "y": 420,
        "wires": []
    },
    {
        "id": "b2abe610.f9e7e8",
        "type": "http response",
        "z": "45ac7f24.44411",
        "name": "",
        "x": 790,
        "y": 380,
        "wires": []
    },
    {
        "id": "3591f58c.be360a",
        "type": "template",
        "z": "45ac7f24.44411",
        "name": "CSS",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "input[type=text], select {\n    width: 100%;\n    padding: 12px 20px;\n    margin: 8px 0;\n    display: inline-block;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\ninput[type=submit] {\n    width: 100%;\n    background-color: #4CAF50;\n    color: white;\n    padding: 14px 20px;\n    margin: 8px 0;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\ninput[type=submit]:hover {\n    background-color: #45a049;\n}\n\ndiv {\n    border-radius: 5px;\n    background-color: #f2f2f2;\n    padding: 20px;\n}",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "f94eff03.ca407"
            ]
        ]
    },
    {
        "id": "1fe1dd28.bc0bc3",
        "type": "template",
        "z": "45ac7f24.44411",
        "name": "JavaScript",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "$(document).ready(function(e) {\n    \n    $(\"form[ajax=true]\").submit(function(e) {\n        \n        e.preventDefault();\n        \n        var form_data = $(this).serialize();\n        var form_url = $(this).attr(\"action\");\n        var form_method = $(this).attr(\"method\").toUpperCase();\n        \n        $(\"#loadingimg\").show();\n        \n        $.ajax({\n            url: form_url, \n            type: form_method,      \n            data: form_data,     \n            cache: false,\n            success: function(returnhtml){                          \n                $(\"#result\").html(returnhtml); \n                $(\"#loadingimg\").hide();                    \n            }           \n        });    \n        \n    });\n    \n});",
        "x": 350,
        "y": 320,
        "wires": [
            [
                "3591f58c.be360a"
            ]
        ]
    },
    {
        "id": "e1320f83.cca9d",
        "type": "http response",
        "z": "45ac7f24.44411",
        "name": "",
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "f94eff03.ca407",
        "type": "template",
        "z": "45ac7f24.44411",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n  <head>\n    <title>My Site</title>\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n    <meta charset=\"utf-8\">\n    <script src=\"http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.0/jquery.min.js\"></script>\n    <style>{{{payload.style}}}</style>\n  </head>\n  \n\n    <h2>Using CSS to style an HTML form with AJAX POST and Node-RED</h2>\n    <h4><a href=\"http://www.internetoflego.com\">Internet of LEGO</a></h4>\n\n<div>\n  <form method=\"post\" action=\"/{{url}}\" ajax=\"true\">\n    <label for=\"fname\">First Name</label>\n    <input type=\"text\" id=\"fname\" name=\"firstname\">\n\n    <label for=\"lname\">Last Name</label>\n    <input type=\"text\" id=\"lname\" name=\"lastname\">\n\n    <label for=\"country\">Country</label>\n    <select id=\"country\" name=\"country\">\n      <option value=\"uk\">United Kingdom</option>\n      <option value=\"canada\">Canada</option>\n      <option value=\"usa\">USA</option>\n    </select>\n  \n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</div>\n<div>\n    <span id=\"result\"></span>\n</div>\n\n</body>\n</html>\n<script>{{{payload.script}}}</script>",
        "x": 650,
        "y": 320,
        "wires": [
            [
                "e1320f83.cca9d"
            ]
        ]
    },
    {
        "id": "ecd2079e.2c3ea8",
        "type": "comment",
        "z": "45ac7f24.44411",
        "name": "Login Form",
        "info": "",
        "x": 310,
        "y": 280,
        "wires": []
    },
    {
        "id": "f451c603.b30eb8",
        "type": "function",
        "z": "45ac7f24.44411",
        "name": "return msg.payload to client",
        "func": "msg.payload = 'The following data was submitted and available in the msg.payload: '+msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "b2abe610.f9e7e8"
            ]
        ]
    },
    {
        "id": "db9974a1.b17678",
        "type": "comment",
        "z": "45ac7f24.44411",
        "name": "Inject msg object properties",
        "info": "",
        "x": 320,
        "y": 180,
        "wires": []
    },
    {
        "id": "375af8e7.db8558",
        "type": "json",
        "z": "45ac7f24.44411",
        "name": "",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "f451c603.b30eb8"
            ]
        ]
    },
    {
        "id": "2a451362.35c7ec",
        "type": "comment",
        "z": "45ac7f24.44411",
        "name": "Website",
        "info": "",
        "x": 90,
        "y": 140,
        "wires": []
    },
    {
        "id": "4c9f61f.d7515a",
        "type": "comment",
        "z": "45ac7f24.44411",
        "name": "Form Submission",
        "info": "",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "87fea2a3.c9769",
        "type": "comment",
        "z": "45ac7f24.44411",
        "name": "Node-RED Public Site - README",
        "info": "This Flow demonstrates how to create\na simple frontend webpage with Node-RED.\n\nThe public facing page consists of the \nclient side JavaScript, CSS and HTML. \n\nThe important technique is how the mustache \ntemplates are used. Each template will set the\n\"property\" relative to the content. \n\nThe CSS node sets the \"msg.payload.style\" property.\nThe JavaScript node sets the \"msg.payload.script\" property.\nThe HTML node then includes these properties \n<script>{{{payload.script}}}</script>\n<style>{{{payload.style}}}</style>\n\n\nThis example was created by http://www.InternetofLEGO.com\n\n",
        "x": 420,
        "y": 40,
        "wires": []
    },
    {
        "id": "4803edf9.f2ae24",
        "type": "debug",
        "z": "3e08f755.c41b78",
        "name": "Data",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 610,
        "y": 220,
        "wires": []
    },
    {
        "id": "9382050a.da7478",
        "type": "http in",
        "z": "3e08f755.c41b78",
        "name": "[get] /scanning",
        "url": "/scanning",
        "method": "get",
        "swaggerDoc": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "a52d073.d4f42f8",
                "1b0c268c.480429"
            ]
        ]
    },
    {
        "id": "a52d073.d4f42f8",
        "type": "function",
        "z": "3e08f755.c41b78",
        "name": "validate-validator - UPDATE",
        "func": "// This node accepts a message with the validator defined in the URL\n// Example: http://yourserver:1880/cmx?validator=8e0846499d9a3f6d23f7868c4d55b9d6325035f5\n// By default, all API requests are accepted (for testing purposes)\n//~~~~~~~~~\n//validator = msg.payload.validator;\n\n\n\n//Alternatively, set the validator variable to match the Meraki network\n//The URL will not need to include the validator string, for enhanced security\n//~~~~~~~~~\nvalidator = \"YourValidatorKey\";\n\n\nmsg.payload = validator;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 80,
        "wires": [
            [
                "62ecc011.5bc5e",
                "5f07d330.a04b8c"
            ]
        ]
    },
    {
        "id": "62ecc011.5bc5e",
        "type": "http response",
        "z": "3e08f755.c41b78",
        "name": "cmx response",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "1b0c268c.480429",
        "type": "debug",
        "z": "3e08f755.c41b78",
        "name": "validator raw",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 330,
        "y": 120,
        "wires": []
    },
    {
        "id": "70f2533d.56572c",
        "type": "comment",
        "z": "3e08f755.c41b78",
        "name": "Location API core mechanics",
        "info": "CMX/Location API core functions",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "5f07d330.a04b8c",
        "type": "debug",
        "z": "3e08f755.c41b78",
        "name": "Validator",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "f6a485e1.089608",
        "type": "function",
        "z": "3e08f755.c41b78",
        "name": "validate-secret - UPDATE",
        "func": "// This node verifies that the secrect configured\n// on the Meraki Dashboard Network, matches.\n\nvar secret = \"YourSecret\";\n\nif(msg.payload.secret == secret){\n    return msg;\n}else{\n    // Secret is invalid\n    \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "4803edf9.f2ae24",
                "1c7d4339.673d9d",
                "d5dc0d55.25421"
            ]
        ]
    },
    {
        "id": "5bed4c7f.fa2794",
        "type": "comment",
        "z": "3e08f755.c41b78",
        "name": "Connect DB to function to store data",
        "info": "",
        "x": 750,
        "y": 260,
        "wires": []
    },
    {
        "id": "d8b5ecf4.017cb",
        "type": "debug",
        "z": "3e08f755.c41b78",
        "name": "Location post",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 340,
        "y": 220,
        "wires": []
    },
    {
        "id": "1c7d4339.673d9d",
        "type": "http response",
        "z": "3e08f755.c41b78",
        "name": "cmx response",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "d5dc0d55.25421",
        "type": "link out",
        "z": "3e08f755.c41b78",
        "name": "Location API All Data",
        "links": [
            "ee491f57.dbdb1"
        ],
        "x": 575,
        "y": 260,
        "wires": []
    },
    {
        "id": "2beb00e3.c1eca",
        "type": "http in",
        "z": "3e08f755.c41b78",
        "name": "",
        "url": "/scanning",
        "method": "post",
        "swaggerDoc": "",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "f6a485e1.089608",
                "d8b5ecf4.017cb"
            ]
        ]
    },
    {
        "id": "4f682a4c.3729b4",
        "type": "debug",
        "z": "703f1816.437fe8",
        "name": "Update Attributes of an SSID - request",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1069,
        "y": 387,
        "wires": []
    },
    {
        "id": "676cfe90.210a8",
        "type": "debug",
        "z": "703f1816.437fe8",
        "name": "Update Attributes of an SSID - endpoint",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 643,
        "y": 384,
        "wires": []
    },
    {
        "id": "95817f62.28c4b",
        "type": "mongodb in",
        "z": "1093e7cc.349a68",
        "mongodb": "e30b6007.de57f",
        "name": "cmx data",
        "collection": "cmx",
        "operation": "find",
        "x": 480,
        "y": 620,
        "wires": [
            [
                "bdad017c.af0ea",
                "5fb8e28.a92551c"
            ]
        ]
    },
    {
        "id": "8fa439a4.26d4c8",
        "type": "mongodb out",
        "z": "1093e7cc.349a68",
        "mongodb": "e30b6007.de57f",
        "name": "cmx data",
        "collection": "cmx",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "5fb8e28.a92551c",
        "type": "http response",
        "z": "1093e7cc.349a68",
        "name": "cmx response",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "edc6f176.74a9",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "CMX Data",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 610,
        "y": 260,
        "wires": []
    },
    {
        "id": "b6e26ca6.045d9",
        "type": "http in",
        "z": "1093e7cc.349a68",
        "name": "[get] /cmxNative",
        "url": "/cmxNative",
        "method": "get",
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "e8df683e.523b68",
                "e6a525a1.6a65e8"
            ]
        ]
    },
    {
        "id": "e8df683e.523b68",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "validate-validator - UPDATE",
        "func": "// This node accepts a message with the validator defined in the URL\n// Example: http://yourserver:1880/cmx?validator=8e0846499d9a3f6d23f7868c4d55b9d6325035f5\n// By default, all API requests are accepted (for testing purposes)\n//~~~~~~~~~\n//validator = msg.payload.validator;\n\n\n\n//Alternatively, set the validator variable to match the Meraki network\n//The URL will not need to include the validator string, for enhanced security\n//~~~~~~~~~\nvalidator = \"8e0846499d9a3f6c23f7868c4c25b9d6325035f5\";\n\n\nmsg.payload = validator;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "e6041c1c.7875b",
                "311b1a0.d5815e6"
            ]
        ]
    },
    {
        "id": "e6041c1c.7875b",
        "type": "http response",
        "z": "1093e7cc.349a68",
        "name": "cmx response",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "e6a525a1.6a65e8",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "CMX validator raw",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 330,
        "y": 160,
        "wires": []
    },
    {
        "id": "ff0fa5ed.ad39d8",
        "type": "http in",
        "z": "1093e7cc.349a68",
        "name": "[get] /showcmxNative",
        "url": "/showcmxNative",
        "method": "get",
        "swaggerDoc": "",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "f51a1dd5.6f6d8"
            ]
        ]
    },
    {
        "id": "abc5e4d9.16f248",
        "type": "http in",
        "z": "1093e7cc.349a68",
        "name": "[get] /showcmxhtml",
        "url": "/showcmxhtml",
        "method": "get",
        "swaggerDoc": "",
        "x": 132,
        "y": 758,
        "wires": [
            [
                "3ca73bee.94cb64",
                "8076d103.a66b7"
            ]
        ]
    },
    {
        "id": "54dfc60e.49cc58",
        "type": "template",
        "z": "1093e7cc.349a68",
        "name": "Parse Data",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n{{#payload}}\n   <h1>data.apMac = {{data.apMac}}</h1>\n   {{#data.observations}}\n    <table border=\"1\" style=\"width:100%\">\n     <tr>\n     <td >{{@index}}</td>\n     <td width=\"300\">clientMac = {{clientMac}}</td>\n     <td width=\"300\">manufacturer = {{manufacturer}}</td>\n     <td width=\"300\">seenTime = {{seenTime}}</td>\n     <td width=\"300\">lat = {{location.lat}}</td>\n     <td width=\"300\">lng = {{location.lng}}</td>\n     <td width=\"300\">unc = {{location.unc}}</td>\n     <td width=\"300\">x = {{x}}</td>\n     <td width=\"300\">y = {{y}}</td>\n     </tr>\n    </table>\n\n    \n   {{/data.observations}}\n   <br>\n{{/payload}}\n\n\n",
        "x": 650,
        "y": 760,
        "wires": [
            [
                "c0e97399.0d06d"
            ]
        ]
    },
    {
        "id": "c0e97399.0d06d",
        "type": "http response",
        "z": "1093e7cc.349a68",
        "name": "",
        "x": 790,
        "y": 760,
        "wires": []
    },
    {
        "id": "3e3d3d65.fd2b52",
        "type": "mongodb in",
        "z": "1093e7cc.349a68",
        "mongodb": "e30b6007.de57f",
        "name": "cmx data",
        "collection": "cmx",
        "operation": "find",
        "x": 480,
        "y": 760,
        "wires": [
            [
                "54dfc60e.49cc58",
                "a09ccece.7d07"
            ]
        ]
    },
    {
        "id": "13882ed8.0561f1",
        "type": "comment",
        "z": "1093e7cc.349a68",
        "name": "Location Data - HTML table",
        "info": "CMX in HTML table\n",
        "x": 137,
        "y": 715,
        "wires": []
    },
    {
        "id": "4517ccdd.29d754",
        "type": "comment",
        "z": "1093e7cc.349a68",
        "name": "Location API core mechanics",
        "info": "CMX/Location API core functions",
        "x": 140,
        "y": 80,
        "wires": []
    },
    {
        "id": "3ca73bee.94cb64",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "limit results",
        "func": "msg.limit = 2; \nmsg.sort = {\"_id\":-1};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 760,
        "wires": [
            [
                "3e3d3d65.fd2b52"
            ]
        ]
    },
    {
        "id": "a09ccece.7d07",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "Extract GPS",
        "func": "var coords = [];\n\nfor (i = 0 ; i < msg.payload.length; i++) {\n     y = msg.payload[i];\n\n     for(j = 0; j < y.data.observations.length; j++) {\n        x = y.data.observations[j];\n        coords.push({\"lat\" : x.location.lat, \"lng\" : x.location.lng});\n    }\n}\n\nmsg.payload = coords;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 820,
        "wires": [
            [
                "7bce0552.e8ebbc"
            ]
        ]
    },
    {
        "id": "7bce0552.e8ebbc",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "Location Data HTML",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 680,
        "y": 820,
        "wires": []
    },
    {
        "id": "f51a1dd5.6f6d8",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "limit results",
        "func": "msg.limit = 2;\nmsg.sort = {\"_id\":-1};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 327,
        "y": 618,
        "wires": [
            [
                "95817f62.28c4b"
            ]
        ]
    },
    {
        "id": "2c3988b9.1d7d58",
        "type": "comment",
        "z": "1093e7cc.349a68",
        "name": "Location Data - JSON format",
        "info": "",
        "x": 140,
        "y": 580,
        "wires": []
    },
    {
        "id": "311b1a0.d5815e6",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "CMX Validator",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 600,
        "y": 160,
        "wires": []
    },
    {
        "id": "ce69a7f4.131a18",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "validate-secret - UPDATE",
        "func": "// This node verifies that the secrect configured\n// on the Meraki Dashboard Network, matches.\n//var secret = \"merakilous\"; \nvar secret = \"supersecret\";\n\nif(msg.payload.secret == secret){\n    return msg;\n}else{\n    // Secret is invalid\n    \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "edc6f176.74a9",
                "c069cc54.e56a7",
                "8fa439a4.26d4c8",
                "1158507b.4ebf8"
            ]
        ]
    },
    {
        "id": "bbe9bddb.f32fc",
        "type": "comment",
        "z": "1093e7cc.349a68",
        "name": "Connect DB to function to store data",
        "info": "",
        "x": 830,
        "y": 340,
        "wires": []
    },
    {
        "id": "55943836.3f5bc8",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "CMX post",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "c069cc54.e56a7",
        "type": "http response",
        "z": "1093e7cc.349a68",
        "name": "cmx response",
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "b704525f.edef3",
        "type": "comment",
        "z": "1093e7cc.349a68",
        "name": "Meraki Location API - Using Native Nodes -- README",
        "info": "This flow demonstrates how to interact with the\nMeraki CMX (Scanning) Location API.\n\n# Be sure to update the validator and secret\n\nThe \"CMX core functions\" consist of two REST endpoints.\nThe 'get' enpoint waits to hear from Meraki,\nwhich will send a request to this server. The flow will \nthen respond with the \"validator\", which was defined in \nthe Meraki Dashboard. If the correct validator is returned, \nMeraki has confirmed that it is sending location data to \nthe correct server.\n\nThe second enpoint accepts 'post' requests, which will\nbe receiving the JSON structured location data from Meraki.\n\nOnce the data has arrived in the `msg.payload`, the results\nwill be stored in a local MongoDB database if the supplied secret\nmatches what's defined in the global variables. This is to ensure\nthat it is in fact Meraki sending this data. \n\nThe data can then be retrieved by opening the other 'get' endpoints, such \nas /showcmxNative.\n\n",
        "x": 461,
        "y": 27,
        "wires": []
    },
    {
        "id": "8076d103.a66b7",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 310,
        "y": 800,
        "wires": []
    },
    {
        "id": "3a8feb1e.b34c24",
        "type": "debug",
        "z": "dc960824.28baf8",
        "name": "excapSignOn raw data",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 200,
        "y": 480,
        "wires": []
    },
    {
        "id": "1edfe4d4.7c87fb",
        "type": "http in",
        "z": "dc960824.28baf8",
        "name": "",
        "url": "/excapSignOn",
        "method": "get",
        "swaggerDoc": "",
        "x": 150,
        "y": 440,
        "wires": [
            [
                "3a8feb1e.b34c24",
                "3ec85c08.74d8d4"
            ]
        ]
    },
    {
        "id": "9fb44d0c.e73b",
        "type": "http response",
        "z": "dc960824.28baf8",
        "name": "",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "eec40ca1.a7fd8",
        "type": "http in",
        "z": "dc960824.28baf8",
        "name": "",
        "url": "/excapClick",
        "method": "get",
        "swaggerDoc": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "4a479c01.46e874",
                "8a3500d0.0b97"
            ]
        ]
    },
    {
        "id": "9ce176a7.d3cd58",
        "type": "http response",
        "z": "dc960824.28baf8",
        "name": "",
        "x": 770,
        "y": 480,
        "wires": []
    },
    {
        "id": "e7c06a1a.63f9f8",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "HTML Login Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n{{{payload.css}}}\n\n\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <title>Registration Form</title>\n\n</head>\n<body>\n\n    \n\n\n    <div class=\"main-content\">\n    <form class=\"form-register\" method=POST action={{payload.login_url}} />\n        <input type=\"hidden\" name=\"continue_url\" value={{payload.continue_url}} />\n        <input type=\"hidden\" name=\"host\" value ={{host}}>\n        <input type=\"hidden\" name=\"base_grant_url\" value = {{payload.base_grant_url}}/>\n        <input type=\"hidden\" name=\"user_continue_url\" value = {{payload.user_continue_url}}/>\n        <input type=\"hidden\" name=\"node_mac\" value = {{payload.node_mac}}/>\n        <input type=\"hidden\" name=\"client_ip\" value = {{payload.client_ip}}/>\n        <input type=\"hidden\" name=\"client_mac\" value = {{payload.client_mac}}/>\n        <input type=\"hidden\" name=\"success_url\" value={{payload.continue_url}} />\n\n            <div class=\"form-register-with-email\">\n\n                <div class=\"form-white-background\">\n\n                    <div class=\"form-title-row\">\n                        <h1>Login to WiFi</h1>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Email</span>\n                            <input type=\"email\" name=\"email\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Password</span>\n                            <input type=\"password\" name=\"password\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label class=\"form-checkbox\">\n                            <input type=\"checkbox\" name=\"checkbox\" checked value=\"accepted\" required>\n                            <span>I agree to the <a href=\"/excapTerms\" target\"_blank\">terms and conditions</a></span>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <button type=\"submit\">Register</button>\n                    </div>\n\n                </div>\n\n            </div>\n\n            <!-- Future Social Features\n            <div class=\"form-sign-in-with-social\">\n\n                <div class=\"form-row form-title-row\">\n                    <span class=\"form-title\">Sign in with</span>\n                </div>\n\n                <a href=\"#\" class=\"form-google-button\">Google</a>\n                <a href=\"#\" class=\"form-facebook-button\">Facebook</a>\n                <a href=\"#\" class=\"form-twitter-button\">Twitter</a>\n                \n\n            </div>\n            -->\n\n        </form>\n                Your IP: {{payload.client_ip}}\n                <br>\n                Your MAC: {{payload.client_mac}}\n\n    </div>\n\n</body>\n\n</html>",
        "x": 570,
        "y": 480,
        "wires": [
            [
                "9ce176a7.d3cd58"
            ]
        ]
    },
    {
        "id": "4a479c01.46e874",
        "type": "function",
        "z": "dc960824.28baf8",
        "name": "Set login_url",
        "func": "msg.payload.login_url = msg.payload.base_grant_url + '?continue_url=' + msg.payload.user_continue_url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 120,
        "wires": [
            [
                "3427d89f.d5f908"
            ]
        ]
    },
    {
        "id": "8a3500d0.0b97",
        "type": "debug",
        "z": "dc960824.28baf8",
        "name": "excapClick raw data",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 200,
        "y": 160,
        "wires": []
    },
    {
        "id": "10ea3868.4fcef8",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Meraki Click-through, read more...",
        "info": "Configure by placing this host server address\nfollowed by /excapClick in the Custom Splash Page URL\nsection of the Meraki Dashboard.\n\nie. https://yourserver:1880/excapClick\n\nBe sure to update the \"walled garden\" in the \nMeraki Dashboard with the IP address of your \nserver and any other resources required before\nlogin, such as your website, images, CSS, etc.\n\nThe HTML page can be modified as needed. \n",
        "x": 173,
        "y": 79,
        "wires": []
    },
    {
        "id": "29307bf5.e7cd34",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Meraki Sign-on, read more...",
        "info": "Configure by placing this host server address\nfollowed by /excapClick in the Custom Splash Page URL\nsection of the Meraki Dashboard.\n\nie. https://yourserver:1880/excapSignOn\n\nBe sure to update the \"walled garden\" in the \nMeraki Dashboard with the IP address of your \nserver and any other resources required before\nlogin, such as your website, images, CSS, etc.\n\n",
        "x": 159,
        "y": 396,
        "wires": []
    },
    {
        "id": "49bc2b97.306234",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "HTML Splash Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n{{{payload.css}}}\n\n\n\t<meta charset=\"utf-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\t<title>Registration Form</title>\n\n</head>\n<body>\n\n\t\n\n\n    <div class=\"main-content\">\n\n        <form class=\"form-register\" method=POST action=\"/excapClickLogin\">\n                <input type=\"hidden\" name=\"continue_url\" value={{payload.continue_url}} />\n                <input type=\"hidden\" name=\"host\" value ={{host}}>\n                <input type=\"hidden\" name=\"base_grant_url\" value = {{payload.base_grant_url}}/>\n                <input type=\"hidden\" name=\"user_continue_url\" value = {{payload.user_continue_url}}/>\n                <input type=\"hidden\" name=\"node_mac\" value = {{payload.node_mac}}/>\n                <input type=\"hidden\" name=\"client_ip\" value = {{payload.client_ip}}/>\n                <input type=\"hidden\" name=\"client_mac\" value = {{payload.client_mac}}/>\n            \n            <div class=\"form-register-with-email\">\n\n                <div class=\"form-white-background\">\n\n                    <div class=\"form-title-row\">\n                        <h1>Login to WiFi</h1>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Name</span>\n                            <input type=\"text\" name=\"name\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label>\n                            <span>Email</span>\n                            <input type=\"email\" name=\"email\" required>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <label class=\"form-checkbox\">\n                            <input type=\"checkbox\" name=\"checkbox\" checked value=\"accepted\" required>\n                            <span>I agree to the <a href=\"/excapTerms\" target\"_blank\">terms and conditions</a></span>\n                        </label>\n                    </div>\n\n                    <div class=\"form-row\">\n                        <button type=\"submit\">Register</button>\n                    </div>\n\n                </div>\n\n            </div>\n\n            <!-- Future Social Features\n            <div class=\"form-sign-in-with-social\">\n\n                <div class=\"form-row form-title-row\">\n                    <span class=\"form-title\">Sign in with</span>\n                </div>\n\n                <a href=\"#\" class=\"form-google-button\">Google</a>\n                <a href=\"#\" class=\"form-facebook-button\">Facebook</a>\n                <a href=\"#\" class=\"form-twitter-button\">Twitter</a>\n                \n\n            </div>\n            -->\n\n        </form>\n                Your IP: {{payload.client_ip}}\n                <br>\n                Your MAC: {{payload.client_mac}}\n\n    </div>\n\n</body>\n\n</html>\n\n",
        "x": 570,
        "y": 160,
        "wires": [
            [
                "9fb44d0c.e73b"
            ]
        ]
    },
    {
        "id": "4f17735f.eb8bcc",
        "type": "http in",
        "z": "dc960824.28baf8",
        "name": "",
        "url": "/excapClickLogin",
        "method": "post",
        "swaggerDoc": "",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "fa4005de.526c98",
                "a9c07036.95bde",
                "57d818c2.ba6ca8"
            ]
        ]
    },
    {
        "id": "fa4005de.526c98",
        "type": "function",
        "z": "dc960824.28baf8",
        "name": "Process login with 302 redirect",
        "func": "// check if client has connected properly and received response from AP\nif (msg.payload.base_grant_url){\n    msg.statusCode = 302;\n    msg.headers = {\n      'Location': msg.payload.base_grant_url + '?continue_url=' + msg.payload.user_continue_url\n      //add other headers here...\n    };\n}else{\n    // error: send client back to login\n    msg.statusCode = 302;\n    msg.headers = {\n      'Location': '/excapNotConnected'\n      //add other headers here...\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "a8e65804.040e38",
                "93d29127.65c41"
            ]
        ]
    },
    {
        "id": "a8e65804.040e38",
        "type": "http response",
        "z": "dc960824.28baf8",
        "name": "",
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "a9c07036.95bde",
        "type": "debug",
        "z": "dc960824.28baf8",
        "name": "excapClick Login data",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 200,
        "y": 260,
        "wires": []
    },
    {
        "id": "3b7523ad.474fdc",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Store form data - read more...",
        "info": "The login data now can be sent somehwere to be \nlogged. A link node is attached to easily use\nthis data in other parts of the flow.",
        "x": 500,
        "y": 260,
        "wires": []
    },
    {
        "id": "7804134a.2cdcac",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Terms and Conditions",
        "info": "",
        "x": 144,
        "y": 750,
        "wires": []
    },
    {
        "id": "57a2c87.55a4b38",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Success",
        "info": "",
        "x": 106,
        "y": 538,
        "wires": []
    },
    {
        "id": "f3999750.bfc308",
        "type": "http in",
        "z": "dc960824.28baf8",
        "name": "",
        "url": "/excapTerms",
        "method": "get",
        "swaggerDoc": "",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "1f38b268.2d2e1e"
            ]
        ]
    },
    {
        "id": "deb5a40.14dba6",
        "type": "http response",
        "z": "dc960824.28baf8",
        "name": "",
        "x": 790,
        "y": 840,
        "wires": []
    },
    {
        "id": "b38845a.46440b8",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "HTML Terms and Conditions",
        "field": "payload",
        "format": "handlebars",
        "template": "<head>\n    <title>Terms and Conditions</title>\n{{{payload}}}\n</head>\n<body>\n    <div class=\"container\">\n    <h1>Terms and Conditions</h1>\n    <ul>\n        <li>Please use our network responsibly. </li>\n        <li>Your computer's MAC and IP address will be logged.</li>\n    </ul>\n    </div>\n</body>\n\n\n",
        "x": 600,
        "y": 840,
        "wires": [
            [
                "deb5a40.14dba6"
            ]
        ]
    },
    {
        "id": "3ec6177a.d5fb98",
        "type": "http in",
        "z": "dc960824.28baf8",
        "name": "",
        "url": "/excapSuccess",
        "method": "get",
        "swaggerDoc": "",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "aa437abe.a71ed8"
            ]
        ]
    },
    {
        "id": "83e99256.0b866",
        "type": "http response",
        "z": "dc960824.28baf8",
        "name": "",
        "x": 790,
        "y": 620,
        "wires": []
    },
    {
        "id": "9a1fab5b.cb4548",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "HTML Success",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<head>\n    <title>Success!</title>\n{{{payload.css}}}\n</head>\n<body>\n    <div class=\"container\">\n    <center><h1>Success!</h1>\n    <h2>You can now use the network.</h2>\n    </center>\n    </div>\n</body>\n\n\n",
        "x": 560,
        "y": 620,
        "wires": [
            [
                "83e99256.0b866"
            ]
        ]
    },
    {
        "id": "51b2196f.bc6388",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Error: Not connected to AP",
        "info": "",
        "x": 160,
        "y": 873,
        "wires": []
    },
    {
        "id": "436d46f4.484668",
        "type": "http in",
        "z": "dc960824.28baf8",
        "name": "",
        "url": "/excapNotConnected",
        "method": "get",
        "swaggerDoc": "",
        "x": 170,
        "y": 920,
        "wires": [
            [
                "6187901c.df26f"
            ]
        ]
    },
    {
        "id": "4b04f451.ebd23c",
        "type": "http response",
        "z": "dc960824.28baf8",
        "name": "",
        "x": 790,
        "y": 960,
        "wires": []
    },
    {
        "id": "70322d06.05eab4",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "HTML Terms and Conditions",
        "field": "payload",
        "format": "handlebars",
        "template": "<head>\n    <title>Error: Not Connected</title>\n{{{payload}}}\n</head>\n<body>\n    <div class=\"container\">\n    <h1>Error: Not Connected</h1>\n    <p>\n        Hmm, somethings not right. It appears you\n        are not connected to the correct wireless network.\n    </p>\n    </div>\n</body>\n\n\n",
        "x": 600,
        "y": 960,
        "wires": [
            [
                "4b04f451.ebd23c"
            ]
        ]
    },
    {
        "id": "f493c293.f28f9",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Cisco Meraki ExCap Service",
        "info": "More information about the Meraki ExCap API:\nhttps://meraki.cisco.com/lib/pdf/meraki_whitepaper_captive_portal.pdf\n\nEnjoy!\n\nWritten by Cory Guynn, 2015.\nConsulting Engineer @ https://meraki.cisco.com/\nTechnical Blogger @ http://www.InternetOfLego.com",
        "x": 438.5,
        "y": 31,
        "wires": []
    },
    {
        "id": "3427d89f.d5f908",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "CSS Style",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<style>\nhtml{\n    background-color: #f3f3f3;\n}\n\n.form-register{\n    max-width: 1000px;\n    width: 100%;\n    margin: 0 auto;\n\n    font: bold 14px sans-serif;\n    text-align: center;\n}\n\n.form-register-with-email{\n    position: relative;\n    display: inline-block;\n    vertical-align: top;\n    margin-right: 130px;\n    text-align: center;\n}\n\n.form-register-with-email .form-white-background{\n    width: 570px;\n    box-sizing: border-box;\n    background-color: #ffffff;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n    padding: 60px 80px;\n    margin-bottom: 35px;\n}\n\n.form-register-with-email .form-row{\n    text-align: left;\n    margin-bottom: 23px;\n}\n\n.form-register-with-email .form-title-row{\n    text-align: center;\n    margin-bottom: 50px;\n}\n\n.form-register-with-email h1{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 0 20px 15px;\n    border-bottom: 2px solid #6caee0;\n    margin: 0;\n}\n\n.form-register-with-email .form-row > label span{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #5f5f5f;\n    width: 125px;\n    text-align: right;\n    padding-right: 25px;\n}\n\n.form-register-with-email input{\n    color:  #5f5f5f;\n    box-sizing: border-box;\n    width: 230px;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 12px 18px;\n    border: 1px solid #dbdbdb;\n}\n\n.form-register-with-email .form-checkbox input{\n    margin-left: 128px;\n    margin-right: 10px;\n    width: auto;\n    vertical-align: top;\n}\n\n.form-register-with-email .form-row .form-checkbox span{\n    font-size: 12px;\n    font-weight: normal;\n    display: inline-block;\n    text-align: left;\n    width: 220px;\n    margin: 0;\n}\n\n.form-register-with-email .form-checkbox span a{\n    text-decoration: none;\n    color:  #6caee0;\n}\n\n.form-register-with-email button{\n    display: block;\n    border-radius: 2px;\n    background-color:  #6caee0;\n    color: #ffffff;\n    font-weight: bold;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 15px 35px;\n    border: 0;\n    margin: 55px auto 0;\n    cursor: pointer;\n}\n\n.form-register-with-email .form-log-in-with-existing{\n    text-decoration: none;\n    padding: 4px 8px;\n    font-weight: normal;\n    color: #7b9d62;\n    background-color: #d6f0c3;\n}\n\n\n.form-sign-in-with-social{\n    display: inline-block;\n    max-width: 180px;\n    box-sizing: border-box;\n    vertical-align: top;\n    text-align: center;\n    margin-top: 100px;\n}\n\n.form-sign-in-with-social .form-title-row{\n    margin-bottom: 50px;\n}\n\n.form-sign-in-with-social .form-title{\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 15px 20px;\n    border-bottom: 2px solid #6caee0;\n}\n\n.form-sign-in-with-social .form-google-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(222, 110, 60, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-facebook-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(75, 136, 194, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-twitter-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(123, 195, 226, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n/*\tMaking the form responsive. Remove these media queries\n    if you don't need the form to work on mobile devices. */\n\n@media (max-width: 900px) {\n\n    .form-register{\n        margin: 20px auto;\n    }\n\n    .form-register-with-email{\n        position: relative;\n        display: block;\n        margin: 0;\n    }\n\n    .form-register-with-email .form-white-background{\n        margin: 0 auto 32px;\n    }\n\n\n\n    .form-sign-in-with-social {\n        margin-top: 105px;\n    }\n\n}\n\n@media (max-width: 600px) {\n\n    .form-register-with-email .form-white-background{\n        width: 300px;\n        padding-left: 35px;\n        padding-right: 35px;\n    }\n\n    .form-register-with-email .form-row > label span{\n        display: block;\n        text-align: left;\n        padding: 0 0 10px;\n    }\n\n    .form-register-with-email input{\n        display: block;\n        margin: 0 auto;\n    }\n\n    .form-register-with-email .form-checkbox input{\n        display: inline-block;\n        margin-left: 0;\n    }\n\n    .form-register-with-email .form-checkbox span{\n        width: 200px !important;\n    }\n\n    .form-register-with-email:after{\n        bottom: -80px;\n        left: 50%;\n        margin-left: -25px;\n    }\n\n}\n</style>",
        "x": 540,
        "y": 120,
        "wires": [
            [
                "49bc2b97.306234"
            ]
        ]
    },
    {
        "id": "3ec85c08.74d8d4",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "CSS Style",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<style>\nhtml{\n    background-color: #f3f3f3;\n}\n\n.form-register{\n    max-width: 1000px;\n    width: 100%;\n    margin: 0 auto;\n\n    font: bold 14px sans-serif;\n    text-align: center;\n}\n\n.form-register-with-email{\n    position: relative;\n    display: inline-block;\n    vertical-align: top;\n    margin-right: 130px;\n    text-align: center;\n}\n\n.form-register-with-email .form-white-background{\n    width: 570px;\n    box-sizing: border-box;\n    background-color: #ffffff;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n    padding: 60px 80px;\n    margin-bottom: 35px;\n}\n\n.form-register-with-email .form-row{\n    text-align: left;\n    margin-bottom: 23px;\n}\n\n.form-register-with-email .form-title-row{\n    text-align: center;\n    margin-bottom: 50px;\n}\n\n.form-register-with-email h1{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 0 20px 15px;\n    border-bottom: 2px solid #6caee0;\n    margin: 0;\n}\n\n.form-register-with-email .form-row > label span{\n    display: inline-block;\n    box-sizing: border-box;\n    color:  #5f5f5f;\n    width: 125px;\n    text-align: right;\n    padding-right: 25px;\n}\n\n.form-register-with-email input{\n    color:  #5f5f5f;\n    box-sizing: border-box;\n    width: 230px;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 12px 18px;\n    border: 1px solid #dbdbdb;\n}\n\n.form-register-with-email .form-checkbox input{\n    margin-left: 128px;\n    margin-right: 10px;\n    width: auto;\n    vertical-align: top;\n}\n\n.form-register-with-email .form-row .form-checkbox span{\n    font-size: 12px;\n    font-weight: normal;\n    display: inline-block;\n    text-align: left;\n    width: 220px;\n    margin: 0;\n}\n\n.form-register-with-email .form-checkbox span a{\n    text-decoration: none;\n    color:  #6caee0;\n}\n\n.form-register-with-email button{\n    display: block;\n    border-radius: 2px;\n    background-color:  #6caee0;\n    color: #ffffff;\n    font-weight: bold;\n    box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.08);\n    padding: 15px 35px;\n    border: 0;\n    margin: 55px auto 0;\n    cursor: pointer;\n}\n\n.form-register-with-email .form-log-in-with-existing{\n    text-decoration: none;\n    padding: 4px 8px;\n    font-weight: normal;\n    color: #7b9d62;\n    background-color: #d6f0c3;\n}\n\n\n.form-sign-in-with-social{\n    display: inline-block;\n    max-width: 180px;\n    box-sizing: border-box;\n    vertical-align: top;\n    text-align: center;\n    margin-top: 100px;\n}\n\n.form-sign-in-with-social .form-title-row{\n    margin-bottom: 50px;\n}\n\n.form-sign-in-with-social .form-title{\n    box-sizing: border-box;\n    color:  #4c565e;\n    font-size: 24px;\n    padding: 15px 20px;\n    border-bottom: 2px solid #6caee0;\n}\n\n.form-sign-in-with-social .form-google-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(222, 110, 60, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-facebook-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(75, 136, 194, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n.form-sign-in-with-social .form-twitter-button{\n    color:  #ffffff;\n    display: block;\n    width: 145px;\n    height: 40px;\n    font-size: 12px;\n    line-height: 40px;\n    background-color:  rgba(123, 195, 226, 0.9);\n    box-shadow: 1px 2px 2px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 2px;\n    margin: 8px auto;\n    text-decoration: none;\n}\n\n/*\tMaking the form responsive. Remove these media queries\n    if you don't need the form to work on mobile devices. */\n\n@media (max-width: 900px) {\n\n    .form-register{\n        margin: 20px auto;\n    }\n\n    .form-register-with-email{\n        position: relative;\n        display: block;\n        margin: 0;\n    }\n\n    .form-register-with-email .form-white-background{\n        margin: 0 auto 32px;\n    }\n\n\n\n    .form-sign-in-with-social {\n        margin-top: 105px;\n    }\n\n}\n\n@media (max-width: 600px) {\n\n    .form-register-with-email .form-white-background{\n        width: 300px;\n        padding-left: 35px;\n        padding-right: 35px;\n    }\n\n    .form-register-with-email .form-row > label span{\n        display: block;\n        text-align: left;\n        padding: 0 0 10px;\n    }\n\n    .form-register-with-email input{\n        display: block;\n        margin: 0 auto;\n    }\n\n    .form-register-with-email .form-checkbox input{\n        display: inline-block;\n        margin-left: 0;\n    }\n\n    .form-register-with-email .form-checkbox span{\n        width: 200px !important;\n    }\n\n    .form-register-with-email:after{\n        bottom: -80px;\n        left: 50%;\n        margin-left: -25px;\n    }\n\n}\n</style>",
        "x": 540,
        "y": 440,
        "wires": [
            [
                "e7c06a1a.63f9f8"
            ]
        ]
    },
    {
        "id": "aa437abe.a71ed8",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "CSS Style",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<style type=\"text/css\">\n.container{\n    max-width: 500px;\n    padding: 10px 20px;\n    background: #f4f7f8;\n    margin: 10px auto;\n    padding: 20px;\n    background: #f4f7f8;\n    border-radius: 8px;\n    font-family: Georgia, \"Times New Roman\", Times, serif;\n}\n</style>",
        "x": 540,
        "y": 580,
        "wires": [
            [
                "9a1fab5b.cb4548"
            ]
        ]
    },
    {
        "id": "1f38b268.2d2e1e",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "CSS Style",
        "field": "payload",
        "format": "html",
        "template": "<style type=\"text/css\">\n.container{\n    max-width: 500px;\n    padding: 10px 20px;\n    background: #f4f7f8;\n    margin: 10px auto;\n    padding: 20px;\n    background: #f4f7f8;\n    border-radius: 8px;\n    font-family: Georgia, \"Times New Roman\", Times, serif;\n}\n</style>",
        "x": 540,
        "y": 800,
        "wires": [
            [
                "b38845a.46440b8"
            ]
        ]
    },
    {
        "id": "6187901c.df26f",
        "type": "template",
        "z": "dc960824.28baf8",
        "name": "CSS Style",
        "field": "payload",
        "format": "html",
        "template": "<style type=\"text/css\">\n.container{\n    max-width: 500px;\n    padding: 10px 20px;\n    background: #f4f7f8;\n    margin: 10px auto;\n    padding: 20px;\n    background: #f4f7f8;\n    border-radius: 8px;\n    font-family: Georgia, \"Times New Roman\", Times, serif;\n}\n</style>",
        "x": 540,
        "y": 920,
        "wires": [
            [
                "70322d06.05eab4"
            ]
        ]
    },
    {
        "id": "2626c846.9b2528",
        "type": "comment",
        "z": "dc960824.28baf8",
        "name": "Supporting Pages",
        "info": "",
        "x": 95,
        "y": 689,
        "wires": []
    },
    {
        "id": "93d29127.65c41",
        "type": "debug",
        "z": "dc960824.28baf8",
        "name": "Process Login",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 740,
        "y": 260,
        "wires": []
    },
    {
        "id": "4a3a01b8.fe375",
        "type": "inject",
        "z": "83498696.f847d8",
        "name": "Create Admin",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 460,
        "wires": [
            [
                "4111f652.cb5bd8"
            ]
        ]
    },
    {
        "id": "3c4984ca.fceb9c",
        "type": "http request",
        "z": "83498696.f847d8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 810,
        "y": 500,
        "wires": [
            [
                "9f8a4eb8.3f56",
                "979e038.f357a",
                "b2ab8fb9.90c3f"
            ]
        ]
    },
    {
        "id": "9f8a4eb8.3f56",
        "type": "debug",
        "z": "83498696.f847d8",
        "name": "Create Meraki Admin",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 800,
        "y": 560,
        "wires": []
    },
    {
        "id": "26902c7d.366324",
        "type": "http in",
        "z": "83498696.f847d8",
        "name": "",
        "url": "/meraki/admins",
        "method": "get",
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "9e481a31.3b7db8"
            ]
        ]
    },
    {
        "id": "9e481a31.3b7db8",
        "type": "function",
        "z": "83498696.f847d8",
        "name": "msg.url = \"/meraki/newAdmin\";",
        "func": "msg.url = \"/meraki/newAdmin\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "b34b303e.d0eac"
            ]
        ]
    },
    {
        "id": "2fa50f12.98ae2",
        "type": "template",
        "z": "83498696.f847d8",
        "name": "CSS",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "input[type=text], select {\n    width: 100%;\n    padding: 12px 20px;\n    margin: 8px 0;\n    display: inline-block;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\ninput[type=email], select {\n    width: 100%;\n    padding: 12px 20px;\n    margin: 8px 0;\n    display: inline-block;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\ninput[type=submit] {\n    width: 50%;\n    background-color: #4CAF50;\n    color: white;\n    padding: 14px 20px;\n    margin: 8px 0;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\ninput[type=submit]:hover {\n    background-color: #45a049;\n}\n\ndiv form {\n    border-radius: 5px;\n    background-color: #f2f2f2;\n    padding: 20px;\n}\n\n.adminform {\n    width: 90%;\n}\n",
        "x": 370,
        "y": 300,
        "wires": [
            [
                "101c0c76.bd5254"
            ]
        ]
    },
    {
        "id": "b34b303e.d0eac",
        "type": "template",
        "z": "83498696.f847d8",
        "name": "JavaScript",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "\n$(document).ready(function(e) {\n    \n    \n    $.ajax({\n        url: 'api/organizations',\n        type: 'get',\n        datatype: 'json',\n        success: function(data){\n            var toAppend = '';\n            //if(typeof data === 'object'){\n                for(var i=0;i<data.length;i++){\n                    toAppend += '<option value='+data[i][\"id\"]+'>'+data[i]['name']+'</option>';\n                }\n            //}\n            console.log(\"orgs toAppend\",toAppend);\n            $('#orgs').append(toAppend);\n        }\n    });\n    \n    $(\"form[ajax=true]\").submit(function(e) {\n        \n        e.preventDefault();\n        \n        var form_data = $(this).serialize();\n        var form_url = $(this).attr(\"action\");\n        var form_method = $(this).attr(\"method\").toUpperCase();\n        \n        var orgId = $(\"#orgs\").val();\n        \n        $(\"#loadingimg\").show();\n        \n        $.ajax({\n            url: form_url+\"/\"+orgId, \n            type: form_method,       \n            data: form_data,     \n            cache: false,\n            success: function(data){\n                \n                // Create simple HTML response\n                var response = \n                    \"<div>\"+\n                        \"<h2>Created Admin!</h2>\"+\n                        \"<h4>Name</h4><p>\"+data.name+\"</p>\"+\n                        \"<h4>E-Mail</h4><p>\"+data.email+\"</p>\"+\n                        \"<h4>ID</h4><p>\"+data.id+\"</p>\"+\n                        \"<h4>Tags</h4><p>\"+data.tags+\"</p>\"+\n                        \"<h4>Org Access</h4><p>\"+data.orgAccess+\"</p>\"+\n                    \"</div>\";\n                \n                console.log(\"response: \"+JSON.stringify(data));\n                \n                \n                $(\"#result\").html(response); \n                \n                $(\"#loadingimg\").hide();\n                $( '#createadmin' ).each(function(){\n                    this.reset();\n                });\n            },\n            error: function(error){\n                $(\"#result\").html(error.responseText);\n            }\n        });    \n        \n    });\n    \n});",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "2fa50f12.98ae2"
            ]
        ]
    },
    {
        "id": "88411c09.81934",
        "type": "comment",
        "z": "83498696.f847d8",
        "name": "Create Admin Form",
        "info": "",
        "x": 110,
        "y": 140,
        "wires": []
    },
    {
        "id": "13bd2d85.03d892",
        "type": "comment",
        "z": "83498696.f847d8",
        "name": "Form Submission URL",
        "info": "",
        "x": 420,
        "y": 180,
        "wires": []
    },
    {
        "id": "6c17f5c8.bc439c",
        "type": "http response",
        "z": "83498696.f847d8",
        "name": "",
        "x": 710,
        "y": 220,
        "wires": []
    },
    {
        "id": "101c0c76.bd5254",
        "type": "template",
        "z": "83498696.f847d8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n  <head>\n    <title>Meraki Dasbhoard API - Admin User</title>\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n    <meta charset=\"utf-8\">\n    <!--\n    <script src=\"http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.0/jquery.min.js\"></script>\n    -->\n    <script\n      src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n      integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n      crossorigin=\"anonymous\"></script>\n      \n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">  \n    <script>{{{payload.jquery}}}</script>\n    <style>{{{payload.style}}}</style>\n  </head>\n  \n<div class=\"container\">\n    <h2>Create a Meraki Dashboard Administrator</h2>\n    <h4><a href=\"http://developers.meraki.com\">Meraki Developers Portal</a></h4>\n\n<div class=\"col-md-6\">\n<div class=\"adminform\">\n  <form id=\"createadmin\" method=\"post\" action=\"{{url}}\" ajax=\"true\">\n    <select id=\"orgs\" name=\"orgs\">\n        <option>Select Organization..</option>\n    </select>\n    <label>Contact Details</label>\n    <input type=\"text\" id=\"fname\" name=\"firstname\" placeholder=\"First Name\" required=true/>\n    <input type=\"text\" id=\"lname\" name=\"lastname\" placeholder=\"Last Name\" required=true/>\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"E-mail\" required=true/>\n    <br>\n\n    <label>Organization Permissions</label>\n    <select id=\"orgAccess\" name=\"orgAccess\" placeholder=\"Org Access\">\n      <option value=\"full\">full</option>\n      <option value=\"read-only\">read-only</option>\n    </select>\n    \n  \n    <input type=\"submit\" class=\"button\" value=\"Submit\">\n  </form>\n</div>\n</div>\n\n<div class=\"col-md-6\">\n    <span id=\"result\"></span>\n</div>\n</div>\n</body>\n</html>\n<script>{{{payload.script}}}</script>",
        "x": 370,
        "y": 340,
        "wires": [
            [
                "6c17f5c8.bc439c"
            ]
        ]
    },
    {
        "id": "4111f652.cb5bd8",
        "type": "function",
        "z": "83498696.f847d8",
        "name": "Sample Data",
        "func": "msg.payload = {\n    \"name\": \"NodeRED Test\",\n    \"email\": \"cory@internetoflego.com\",\n    \"orgAccess\": \"full\"\n };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 460,
        "wires": [
            [
                "8781be75.c1a8e"
            ]
        ]
    },
    {
        "id": "31213e02.f54992",
        "type": "http in",
        "z": "83498696.f847d8",
        "name": "",
        "url": "/meraki/newAdmin/:orgId",
        "method": "post",
        "swaggerDoc": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "b6a20441.06b498"
            ]
        ]
    },
    {
        "id": "979e038.f357a",
        "type": "http response",
        "z": "83498696.f847d8",
        "name": "",
        "x": 990,
        "y": 500,
        "wires": []
    },
    {
        "id": "b6a20441.06b498",
        "type": "function",
        "z": "83498696.f847d8",
        "name": "form data",
        "func": "// Convert form data into Meraki API expected JSON\nmsg.orgId = msg.req.params.orgId;\nmsg.payload = {\n    name: msg.req.body.firstname + \" \" + msg.req.body.lastname,\n    email: msg.req.body.email,\n    orgAccess: msg.req.body.orgAccess\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 500,
        "wires": [
            [
                "acda0dfd.cb496",
                "8781be75.c1a8e"
            ]
        ]
    },
    {
        "id": "acda0dfd.cb496",
        "type": "debug",
        "z": "83498696.f847d8",
        "name": "newAdmin Form Data",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 296.5555725097656,
        "y": 558.6666631698608,
        "wires": []
    },
    {
        "id": "6479e269.be46dc",
        "type": "comment",
        "z": "83498696.f847d8",
        "name": "Meraki Dashboard API Sample App",
        "info": "Create a Meraki Dasbhoard Admin with a form.\n\nTo open the web form, navigate to \n\nhttp://yourserver:1880/meraki/admins\n",
        "x": 459,
        "y": 24.000003814697266,
        "wires": []
    },
    {
        "id": "f32e9292.c6e8c",
        "type": "inject",
        "z": "83498696.f847d8",
        "name": "List Organizations",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 660,
        "wires": [
            [
                "ed8002b9.257f9"
            ]
        ]
    },
    {
        "id": "ed8002b9.257f9",
        "type": "function",
        "z": "83498696.f847d8",
        "name": "Meraki API - List Organizations",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\n\n\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\n\nmsg.url = \"https://dashboard.meraki.com/api/v0/organizations\";\nmsg.method = 'get';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 660,
        "wires": [
            [
                "1dd24838.321a08"
            ]
        ]
    },
    {
        "id": "1dd24838.321a08",
        "type": "http request",
        "z": "83498696.f847d8",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 670,
        "y": 660,
        "wires": [
            [
                "e5c978a5.b82558"
            ]
        ]
    },
    {
        "id": "210e289a.510898",
        "type": "http in",
        "z": "83498696.f847d8",
        "name": "",
        "url": "/meraki/api/organizations",
        "method": "get",
        "swaggerDoc": "",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "ed8002b9.257f9"
            ]
        ]
    },
    {
        "id": "e5c978a5.b82558",
        "type": "function",
        "z": "83498696.f847d8",
        "name": "Large Int Helper",
        "func": "// Convert the org number to a string so that it does not become corrupted \n// when the JSON conversion happens.   \nmsg.payload = msg.payload.replace(/\"id\":(.*?)(?:,)/g,\"\\\"id\\\"\\:\\\"$1\\\"\\,\");\nconsole.log(\"new json with regex replace \",msg.payload);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 660,
        "wires": [
            [
                "830e137a.dda3e"
            ]
        ]
    },
    {
        "id": "830e137a.dda3e",
        "type": "json",
        "z": "83498696.f847d8",
        "name": "",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "d05f39a8.43c9c8",
                "8f59a482.a76c48"
            ]
        ]
    },
    {
        "id": "d05f39a8.43c9c8",
        "type": "http response",
        "z": "83498696.f847d8",
        "name": "",
        "x": 1030,
        "y": 700,
        "wires": []
    },
    {
        "id": "8f59a482.a76c48",
        "type": "debug",
        "z": "83498696.f847d8",
        "name": "List Orgs JSON",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1000,
        "y": 740,
        "wires": []
    },
    {
        "id": "ff7ea37c.24dd4",
        "type": "inject",
        "z": "83498696.f847d8",
        "name": "Sets Defaults - Injected at start",
        "topic": "",
        "payload": "Setting Environment Variables",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 170,
        "y": 60,
        "wires": [
            [
                "f52c72fa.e5c39"
            ]
        ]
    },
    {
        "id": "f52c72fa.e5c39",
        "type": "function",
        "z": "83498696.f847d8",
        "name": "Env Variables: UPDATE THIS",
        "func": "//  ###### User Defined Variables ######\n\nconst API_KEY = ''; //Your API KEY (Keep this secret. Do not publish)\nvar shard = 'n143'; // https://n149.meraki.com , where n149 represent the shard number. This is defined to avoid redirect issues.\nvar orgId = ''; // Your default Organization ID\n\n\n\n\n\n// ###### Set and Get Global variables ######\n\n\n// Assign to Global Context \nglobal.set('apiKey', API_KEY); // pulling API key via \"secret\" node. This avoides publishing the API key when sharing the flow\nglobal.set('shard', shard);\n\nglobal.set('orgId', orgId);\n\n\nmsg.payload = \"settings set\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 60,
        "wires": [
            [
                "3c0bdd75.44c3a2"
            ]
        ]
    },
    {
        "id": "3c0bdd75.44c3a2",
        "type": "debug",
        "z": "83498696.f847d8",
        "name": "Flow Env Variables",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "8781be75.c1a8e",
        "type": "function",
        "z": "83498696.f847d8",
        "name": "Meraki API - Create Admin",
        "func": "// Set Variables\nvar apiKey = global.get('apiKey');\nvar shard = global.get('shard');\n//var orgId = global.get('orgId'); // set via global variables\nvar orgId = msg.orgId; //set via request parameter\n\n// API Call\nmsg.headers = {\n    \"X-Cisco-Meraki-API-Key\": apiKey\n};\nmsg.url = \"https://\"+shard+\".meraki.com/api/v0/organizations/\"+orgId+\"/admins\";\nmsg.method = 'post';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 500,
        "wires": [
            [
                "3c4984ca.fceb9c"
            ]
        ]
    },
    {
        "id": "39867e20.669d12",
        "type": "comment",
        "z": "83498696.f847d8",
        "name": "APIs",
        "info": "",
        "x": 70,
        "y": 400,
        "wires": []
    },
    {
        "id": "57d818c2.ba6ca8",
        "type": "link out",
        "z": "dc960824.28baf8",
        "name": "excapClick Login",
        "links": [
            "bc43f620.69aed8",
            "9e9c7703.6ebf58"
        ],
        "x": 395,
        "y": 300,
        "wires": []
    },
    {
        "id": "5ed5f077.09dac",
        "type": "http request",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 530,
        "y": 140,
        "wires": [
            [
                "c80dd37b.e17be"
            ]
        ]
    },
    {
        "id": "f97a63e8.85d9f",
        "type": "function",
        "z": "fc7c7d4d.73a92",
        "name": "Spark Send Message (API) - UPDATE",
        "func": "// ******************\n// Set Your Variables\n// ******************\nvar accessToken = \"\"; // Your Access Token\nvar roomId = \"\"; // Your Room ID\n\n// -- -- -- -- -- --\n// Build API Call\nmsg.url = \"https://api.ciscospark.com/v1/messages\";\nmsg.headers = { \n    'content-type': 'application/json',\n    'authorization': 'Bearer '+ accessToken \n};\nmsg.payload ={ \n    roomId: roomId,\n    markdown: msg.payload \n}\nmsg.method = \"post\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "5ed5f077.09dac"
            ]
        ]
    },
    {
        "id": "895fe617.423288",
        "type": "inject",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 240,
        "wires": [
            [
                "a7073fdf.33b6a"
            ]
        ]
    },
    {
        "id": "c80dd37b.e17be",
        "type": "debug",
        "z": "fc7c7d4d.73a92",
        "name": "Spark Message",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 740,
        "y": 140,
        "wires": []
    },
    {
        "id": "a9749fc1.54f58",
        "type": "link in",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "3926338a.979c7c"
        ],
        "x": 255,
        "y": 480,
        "wires": [
            [
                "af692260.7cb84"
            ]
        ]
    },
    {
        "id": "54e60f06.95f26",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "Cisco Spark API Examples - README",
        "info": "These sample flows simply take the results from\nthe linked sample flows, formats them and sends a message\nto a Cisco Spark room.\n\nUpdate the Spark API function with your `roomID`\nand your `accessToken`. These can be found on \nthe developers portal for Cisco Spark.\n\nThe `accessToken` can be found in the portal by\nclicking on your profile icon in the top right.\nCopy this token into the function variable.\n\nExample Token\n`ZGJjNzI0ODAtNmEwNS00YjU3LTkzOTYtMjthisisbogushmOWI3M2IyZGI4NzctZDVh`\n\n*API to List Rooms*\nhttps://developer.ciscospark.com/endpoint-rooms-get.html\n- you will get your roomId by running this call\nusing their \"Test Mode\", which will run the command\nand the resulting JSON will appear with the \nid, name, etc. Copy the `id` value into the function variable.\n`\n{\n\t\t\t\"id\": \"Y2lzY29zcGFyazovL3VzL1JPT00vNWExMjhhNTAtNTExZi0xMWU3LTk2NTctYjMzNWEyNmMzYmVj\",\n\t\t\t\"title\": \"Node-RED Testing Sandbox\",\n\t\t\t\"type\": \"group\",\n\t\t\t\"isLocked\": false,\n\t\t\t\"lastActivity\": \"2017-06-14T20:21:09.726Z\",\n\t\t\t\"creatorId\": \"Y2lzY29zcGFyazovL3VzL1BFT1BMRS80ZjY4OWNhZS1mYjNlLTRjNDEtODM3OC1hYmY1Mjc2Y2RmMzQ\",\n\t\t\t\"created\": \"2017-06-14T16:34:35.509Z\"\n\t\t}\n`\n\n*API to Send a Message*\nhttps://developer.ciscospark.com/endpoint-messages-post.html\n",
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "23a78ef4.b44212",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "Captive Portal Login Notification",
        "info": "",
        "x": 150,
        "y": 280,
        "wires": []
    },
    {
        "id": "b2ab8fb9.90c3f",
        "type": "link out",
        "z": "83498696.f847d8",
        "name": "Create Meraki Admin",
        "links": [
            "d7aa7476.8e16d8"
        ],
        "x": 955,
        "y": 540,
        "wires": []
    },
    {
        "id": "d7aa7476.8e16d8",
        "type": "link in",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "b2ab8fb9.90c3f"
        ],
        "x": 255,
        "y": 400,
        "wires": [
            [
                "fe75d1a8.094e7",
                "b52772f2.40594"
            ]
        ]
    },
    {
        "id": "fe75d1a8.094e7",
        "type": "function",
        "z": "fc7c7d4d.73a92",
        "name": "Format Message",
        "func": "var admin = msg.payload;\n\nmsg.payload = \"## New Admin Created! \\n\" +\n    admin.name + \" \" + admin.email + \"   **Access**: \"+admin.orgAccess;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 400,
        "wires": [
            [
                "1f65bcc8.ef4453"
            ]
        ]
    },
    {
        "id": "9e9c7703.6ebf58",
        "type": "link in",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "57d818c2.ba6ca8"
        ],
        "x": 255,
        "y": 320,
        "wires": [
            [
                "dc684483.d0a7a8"
            ]
        ]
    },
    {
        "id": "dc684483.d0a7a8",
        "type": "function",
        "z": "fc7c7d4d.73a92",
        "name": "Format Message",
        "func": "\nvar client = msg.payload;\n\nmsg.payload = \"## New WiFi Client Joined! \\n\" +\n    client.name + \" \" + client.email;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 320,
        "wires": [
            [
                "6cf62903.8f7278"
            ]
        ]
    },
    {
        "id": "4f2bf021.5cbcb",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "Test Timestamp",
        "info": "",
        "x": 100,
        "y": 200,
        "wires": []
    },
    {
        "id": "9b6744d0.2b3528",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "Dashboard API Admin Creation",
        "info": "",
        "x": 150,
        "y": 360,
        "wires": []
    },
    {
        "id": "e302429d.34ce4",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "Location API Notification",
        "info": "",
        "x": 130,
        "y": 440,
        "wires": []
    },
    {
        "id": "1158507b.4ebf8",
        "type": "link out",
        "z": "1093e7cc.349a68",
        "name": "Location API All Data",
        "links": [
            "2c0b96a8.3d6eda"
        ],
        "x": 555,
        "y": 300,
        "wires": []
    },
    {
        "id": "78689074.a6f07",
        "type": "comment",
        "z": "1093e7cc.349a68",
        "name": "Workflow Example: Search string for the word Apple",
        "info": "",
        "x": 210,
        "y": 360,
        "wires": []
    },
    {
        "id": "d551e2ca.eafe3",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "WiFi Device",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 610,
        "y": 440,
        "wires": []
    },
    {
        "id": "f72a273a.78a128",
        "type": "mongodb2 in",
        "z": "1093e7cc.349a68",
        "service": "_ext_",
        "configNode": "56810df3.4f1154",
        "name": "",
        "collection": "cmx",
        "operation": "removeMany",
        "x": 380,
        "y": 900,
        "wires": [
            [
                "e3956867.3d6818"
            ]
        ]
    },
    {
        "id": "a4f07302.3c675",
        "type": "inject",
        "z": "1093e7cc.349a68",
        "name": "DELETE all clients",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 900,
        "wires": [
            [
                "f72a273a.78a128"
            ]
        ]
    },
    {
        "id": "e3956867.3d6818",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "DELETE mongo data",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 680,
        "y": 900,
        "wires": []
    },
    {
        "id": "80cc4176.5cd6d",
        "type": "mongodb2 in",
        "z": "1093e7cc.349a68",
        "service": "_ext_",
        "configNode": "56810df3.4f1154",
        "name": "",
        "collection": "cmx",
        "operation": "removeMany",
        "x": 380,
        "y": 1000,
        "wires": [
            [
                "ae60f6.6a696f08"
            ]
        ]
    },
    {
        "id": "15e53d.b887aac3",
        "type": "inject",
        "z": "1093e7cc.349a68",
        "name": "DELETE clients oder than..",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "00 5 * * *",
        "once": false,
        "x": 160,
        "y": 960,
        "wires": [
            [
                "ab397295.1feb"
            ]
        ]
    },
    {
        "id": "ae60f6.6a696f08",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "DELETE mongo data",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 680,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ab397295.1feb",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "1 Day - filter",
        "func": " var days = 1; //1 Day\n var date = new Date();\n date.setDate(date.getDate()-days);\nmsg.payload = {'seenString': {$gte: date}};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 960,
        "wires": [
            [
                "80cc4176.5cd6d"
            ]
        ]
    },
    {
        "id": "49dcea3e.e74da4",
        "type": "inject",
        "z": "1093e7cc.349a68",
        "name": "test",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 90,
        "y": 660,
        "wires": [
            [
                "f51a1dd5.6f6d8"
            ]
        ]
    },
    {
        "id": "c019a5c1.49dde8",
        "type": "inject",
        "z": "1093e7cc.349a68",
        "name": "test",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 90,
        "y": 800,
        "wires": [
            [
                "3ca73bee.94cb64"
            ]
        ]
    },
    {
        "id": "97bac3ac.22b98",
        "type": "http in",
        "z": "1093e7cc.349a68",
        "name": "",
        "url": "/cmxNative",
        "method": "post",
        "swaggerDoc": "",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "ce69a7f4.131a18",
                "55943836.3f5bc8"
            ]
        ]
    },
    {
        "id": "2c0b96a8.3d6eda",
        "type": "link in",
        "z": "1093e7cc.349a68",
        "name": "",
        "links": [
            "1158507b.4ebf8"
        ],
        "x": 55,
        "y": 440,
        "wires": [
            [
                "8ceb892b.b856f8"
            ]
        ]
    },
    {
        "id": "29be5899.cca928",
        "type": "comment",
        "z": "1093e7cc.349a68",
        "name": "Database Utilities",
        "info": "",
        "x": 100,
        "y": 860,
        "wires": []
    },
    {
        "id": "bdad017c.af0ea",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "Location Data JSON",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 760,
        "y": 680,
        "wires": []
    },
    {
        "id": "3926338a.979c7c",
        "type": "link out",
        "z": "1093e7cc.349a68",
        "name": "BLE Location API",
        "links": [
            "a9749fc1.54f58"
        ],
        "x": 555,
        "y": 480,
        "wires": []
    },
    {
        "id": "93137db3.8888c",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "WiFi Split observations",
        "func": "// send individual observation items to next node\nvar data = msg.payload.data;\n\nfor (i = 0; i < data.observations.length; i++) { \n    msg.payload = data.observations[i];\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 400,
        "wires": [
            [
                "d551e2ca.eafe3",
                "3c09412d.be4bee"
            ]
        ]
    },
    {
        "id": "8ceb892b.b856f8",
        "type": "switch",
        "z": "1093e7cc.349a68",
        "name": "WiFi or BLE",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DevicesSeen",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BluetoothDevicesSeen",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 170,
        "y": 440,
        "wires": [
            [
                "93137db3.8888c"
            ],
            [
                "f9889601.e42688"
            ]
        ]
    },
    {
        "id": "f9889601.e42688",
        "type": "function",
        "z": "1093e7cc.349a68",
        "name": "BLE Split observations",
        "func": "// send individual observation items to next node\nvar data = msg.payload.data;\n\nfor (i = 0; i < data.observations.length; i++) { \n    msg.payload = data.observations[i];\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 480,
        "wires": [
            [
                "3926338a.979c7c",
                "d0b8fdc7.a5422"
            ]
        ]
    },
    {
        "id": "d0b8fdc7.a5422",
        "type": "debug",
        "z": "1093e7cc.349a68",
        "name": "BLE Device",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "3c09412d.be4bee",
        "type": "link out",
        "z": "1093e7cc.349a68",
        "name": "WiFi Location API",
        "links": [
            "cb0d9229.9e323"
        ],
        "x": 555,
        "y": 400,
        "wires": []
    },
    {
        "id": "b11ee66b.534878",
        "type": "switch",
        "z": "fc7c7d4d.73a92",
        "name": "Search VIP Client- UPDATE",
        "property": "payload.clientMac",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "74:da:38:56:0a:80",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 420,
        "y": 580,
        "wires": [
            [
                "655beb26.d3ebc4"
            ]
        ]
    },
    {
        "id": "cb0d9229.9e323",
        "type": "link in",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "3c09412d.be4bee"
        ],
        "x": 255,
        "y": 540,
        "wires": [
            [
                "282b2c1c.151284",
                "b11ee66b.534878"
            ]
        ]
    },
    {
        "id": "282b2c1c.151284",
        "type": "function",
        "z": "fc7c7d4d.73a92",
        "name": "Format Message",
        "func": "// Write a message with Markdown and include the Google Maps encoded URL.\n// http://maps.google.com/maps?t=h&q=loc:35.487895,-87.332414&z=17 \nvar device = msg.payload;\nvar manufacturer = device.manufacturer || \"\"; // display manufacturer only if it is known\n\nmsg.payload = \"## WiFi Device Found! \\n\" +\n    \"####\"+ manufacturer + \"#### \\n\"+\n    \" **RSSI**:\" + device.rssi +\n    \" **MAC**: \" + device.clientMac +\n    \" [Map](https://maps.google.com/maps?t=h&q=loc:\"+device.location.lat +\",\"+ device.location.lng+\"&z=17)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 540,
        "wires": [
            [
                "7e717bb6.9d5fe4"
            ]
        ]
    },
    {
        "id": "bdc5984c.5844b8",
        "type": "link in",
        "z": "fc7c7d4d.73a92",
        "name": "Cisco Spark",
        "links": [
            "a7073fdf.33b6a",
            "6cf62903.8f7278",
            "1f65bcc8.ef4453",
            "7a8e7271.82cf2c",
            "7e717bb6.9d5fe4",
            "6fb3b082.6ae2e"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "f97a63e8.85d9f"
            ]
        ]
    },
    {
        "id": "a7073fdf.33b6a",
        "type": "link out",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "bdc5984c.5844b8"
        ],
        "x": 575,
        "y": 240,
        "wires": []
    },
    {
        "id": "6cf62903.8f7278",
        "type": "link out",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "bdc5984c.5844b8"
        ],
        "x": 575,
        "y": 320,
        "wires": []
    },
    {
        "id": "1f65bcc8.ef4453",
        "type": "link out",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "bdc5984c.5844b8"
        ],
        "x": 575,
        "y": 400,
        "wires": []
    },
    {
        "id": "7a8e7271.82cf2c",
        "type": "link out",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "bdc5984c.5844b8"
        ],
        "x": 835,
        "y": 480,
        "wires": []
    },
    {
        "id": "7e717bb6.9d5fe4",
        "type": "link out",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "bdc5984c.5844b8"
        ],
        "x": 835,
        "y": 540,
        "wires": []
    },
    {
        "id": "e0a03e3b.c4743",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "Send Message to Cisco Spark Room",
        "info": "",
        "x": 170,
        "y": 620,
        "wires": []
    },
    {
        "id": "fcf92b48.798b18",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "BLE",
        "info": "",
        "x": 170,
        "y": 480,
        "wires": []
    },
    {
        "id": "d98fee7e.d31ea",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "WiFi",
        "info": "",
        "x": 170,
        "y": 540,
        "wires": []
    },
    {
        "id": "af692260.7cb84",
        "type": "function",
        "z": "fc7c7d4d.73a92",
        "name": "Format Message",
        "func": "// Write a message with Markdown and include the Google Maps encoded URL.\n// http://maps.google.com/maps?t=h&q=loc:35.487895,-87.332414&z=17 \nvar device = msg.payload;\nmsg.payload = \"## BLE Device Found! \\n\" +\n    \" **RSSI**:\" + device.rssi +\n    \" **MAC**: \" + device.clientMac +\n    \" [Map](https://maps.google.com/maps?t=h&q=loc:\"+device.location.lat +\",\"+ device.location.lng+\"&z=17)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 480,
        "wires": [
            [
                "7a8e7271.82cf2c"
            ]
        ]
    },
    {
        "id": "655beb26.d3ebc4",
        "type": "function",
        "z": "fc7c7d4d.73a92",
        "name": "Format Message",
        "func": "// Write a message with Markdown and include the Google Maps encoded URL.\n// http://maps.google.com/maps?t=h&q=loc:35.487895,-87.332414&z=17 \nvar device = msg.payload;\nvar manufacturer = device.manufacturer || \"\"; // display manufacturer only if it is known\n\nmsg.payload = \"## VIP WiFi Device Found! \\n\" +\n    \"####\"+ manufacturer + \"#### \\n\"+\n    \" **RSSI**:\" + device.rssi +\n    \" **MAC**: \" + device.clientMac +\n    \" [Map](https://maps.google.com/maps?t=h&q=loc:\"+device.location.lat +\",\"+ device.location.lng+\"&z=17)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 580,
        "wires": [
            [
                "6fb3b082.6ae2e"
            ]
        ]
    },
    {
        "id": "6fb3b082.6ae2e",
        "type": "link out",
        "z": "fc7c7d4d.73a92",
        "name": "",
        "links": [
            "bdc5984c.5844b8"
        ],
        "x": 835,
        "y": 580,
        "wires": []
    },
    {
        "id": "b52772f2.40594",
        "type": "debug",
        "z": "fc7c7d4d.73a92",
        "name": "Admin Data",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 390,
        "y": 440,
        "wires": []
    },
    {
        "id": "c3aad52e.1fba68",
        "type": "comment",
        "z": "fc7c7d4d.73a92",
        "name": "Send Message to Cisco Spark Room",
        "info": "",
        "x": 170,
        "y": 100,
        "wires": []
    },
    {
        "id": "78fbb118.42978",
        "type": "http in",
        "z": "e55a9b44.3eb128",
        "name": "",
        "url": "/getStuff",
        "method": "get",
        "swaggerDoc": "",
        "x": 110,
        "y": 204,
        "wires": [
            [
                "312d06fd.9fcb2a"
            ]
        ]
    },
    {
        "id": "312d06fd.9fcb2a",
        "type": "function",
        "z": "e55a9b44.3eb128",
        "name": "Set Response ",
        "func": "msg.payload = \"Some Stuff\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 204,
        "wires": [
            [
                "22b4aa5c.4e8446"
            ]
        ]
    },
    {
        "id": "22b4aa5c.4e8446",
        "type": "http response",
        "z": "e55a9b44.3eb128",
        "name": "",
        "x": 650,
        "y": 204,
        "wires": []
    },
    {
        "id": "5914d4dc.d77c8c",
        "type": "inject",
        "z": "e55a9b44.3eb128",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 80,
        "wires": [
            [
                "a0692eeb.32f13"
            ]
        ]
    },
    {
        "id": "a0692eeb.32f13",
        "type": "debug",
        "z": "e55a9b44.3eb128",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "a2c730c9.56c36",
        "type": "http request",
        "z": "e55a9b44.3eb128",
        "name": "https://jsonplaceholder.typicode.com/posts",
        "method": "GET",
        "ret": "txt",
        "url": "https://jsonplaceholder.typicode.com/posts",
        "tls": "",
        "x": 410,
        "y": 300,
        "wires": [
            [
                "5562e7ca.9e41a8",
                "140ae0fb.17dccf"
            ]
        ]
    },
    {
        "id": "1ab55635.d8427a",
        "type": "inject",
        "z": "e55a9b44.3eb128",
        "name": "Test",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 90,
        "y": 340,
        "wires": [
            [
                "a2c730c9.56c36"
            ]
        ]
    },
    {
        "id": "5562e7ca.9e41a8",
        "type": "debug",
        "z": "e55a9b44.3eb128",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 630,
        "y": 340,
        "wires": []
    },
    {
        "id": "7645ba8d.b20fc4",
        "type": "http in",
        "z": "e55a9b44.3eb128",
        "name": "",
        "url": "/SamplePosts",
        "method": "get",
        "swaggerDoc": "",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "a2c730c9.56c36"
            ]
        ]
    },
    {
        "id": "140ae0fb.17dccf",
        "type": "http response",
        "z": "e55a9b44.3eb128",
        "name": "",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "429b6ace.6f1d54",
        "type": "comment",
        "z": "e55a9b44.3eb128",
        "name": "Inject data and see output",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "6c9e4275.7df40c",
        "type": "comment",
        "z": "e55a9b44.3eb128",
        "name": "Basic API endpoint which returns a message",
        "info": "",
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "6e15f015.21f3a",
        "type": "comment",
        "z": "e55a9b44.3eb128",
        "name": "API to call to an API of sample post data",
        "info": "",
        "x": 200,
        "y": 260,
        "wires": []
    },
    {
        "id": "e9d6991a.cc7e68",
        "type": "Meraki CMX",
        "z": "e3fdf7f2.0edec8",
        "name": "",
        "url": "/cmxDispatcher",
        "settings": "3a95e068.9342d",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "c702375.53918c8"
            ]
        ]
    },
    {
        "id": "c702375.53918c8",
        "type": "function",
        "z": "e3fdf7f2.0edec8",
        "name": "Dispatcher",
        "func": "// This function will relay the msg.payload\n// to all of the listed URLs.\ndata = msg.payload;\nurls = flow.get('urls');\nmsg = {} // reset msg object\n\n// Iterate through each URL and send the payload\nfor (var x = 0; x < urls.length; x++){\n    msg.url = urls[x].url;\n    msg.name = urls[x].name;\n    msg.payload = data;\n    node.send(msg); \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 165,
        "y": 240,
        "wires": [
            [
                "43885d26.cbe704",
                "5c861637.6371f8"
            ]
        ]
    },
    {
        "id": "330db3e4.5f6b4c",
        "type": "http request",
        "z": "e3fdf7f2.0edec8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 675,
        "y": 236,
        "wires": [
            [
                "9704ece5.e4e64"
            ]
        ]
    },
    {
        "id": "9704ece5.e4e64",
        "type": "debug",
        "z": "e3fdf7f2.0edec8",
        "name": "cmxDispatcher - Response Payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 607,
        "y": 275,
        "wires": []
    },
    {
        "id": "faf99af1.7a9858",
        "type": "comment",
        "z": "e3fdf7f2.0edec8",
        "name": "Meraki Location / CMX Dispatcher",
        "info": "Cisco Meraki Wireless can provide location\nobservations that includes X,Y or GPS coordinates\nof WiFi and BLE devices. \n\nThe Meraki Dashboard is limited to 4 Post URLs, \nwhich is typically enough for a normal system. \nIn some scenarios, such as a lab environment\nor educational setting, you may want to have \nseveral more receivers.\n\nThis Node-RED flow will simply relay the JSON\nmessages receieved from Meraki to the list\nof URLs named in the function.",
        "x": 178,
        "y": 47,
        "wires": []
    },
    {
        "id": "a5c6f976.3f8f58",
        "type": "inject",
        "z": "e3fdf7f2.0edec8",
        "name": "",
        "topic": "",
        "payload": "testMessage",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 144,
        "y": 190,
        "wires": [
            [
                "c702375.53918c8"
            ]
        ]
    },
    {
        "id": "43885d26.cbe704",
        "type": "debug",
        "z": "e3fdf7f2.0edec8",
        "name": "cmxDispatcher - Request Object",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 267.5,
        "y": 277,
        "wires": []
    },
    {
        "id": "b29ab1cb.8e7a1",
        "type": "function",
        "z": "e3fdf7f2.0edec8",
        "name": "Set POST URLs and Validator- UPDATE ME",
        "func": "var validator = 123123123;\nvar urls = [\n    {\n        name: 'Dispatcher',\n        url: 'http://34.251.2.90:1880/cmx'\n    },\n    {\n        name: 'lab2',\n        url: 'http://34.251.109.180:1880/cmx'\n    },\n    {\n        name: 'lab3',\n        url: 'http://34.250.169.242:1880/cmx'\n    },\n    {\n        name: 'lab4',\n        url: 'http://34.251.108.59:1880/cmx'\n    },\n        {\n        name: 'lab5',\n        url: 'http://34.251.39.20:1880/cmx'\n    },\n    {\n        name: 'lab6',\n        url: 'http://34.249.56.148:1880/cmx'\n    },\n    {\n        name: 'lab7',\n        url: 'http://34.251.107.66:1880/cmx'\n    },\n    {\n        name: 'lab8',\n        url: 'http://34.249.133.51:1880/cmx'\n    },\n    {\n        name: 'lab9',\n        url: 'http://34.250.197.68:1880/cmx'\n    },\n    {\n        name: 'lab10',\n        url: 'http://34.251.108.92:1880/cmx'\n    },\n    {\n        name: 'lab11',\n        url: 'http://34.250.110.67:1880/cmx'\n    },\n    {\n        name: 'lab12-medium',\n        url: 'http://34.250.100.141:1880/cmx'\n    },\n    {\n        name: 'AWS Lambda ES Kibana',\n        url: 'https://lex9rs9qj8.execute-api.eu-west-1.amazonaws.com/prod/cmxreceiver-dynamodb'\n    }\n];\n\nflow.set('urls',urls);\nflow.set('validator',validator);\nmsg.payload = flow.get('urls');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 457,
        "y": 103,
        "wires": [
            [
                "7a3a71c8.534b1"
            ]
        ]
    },
    {
        "id": "b66de47.cea2518",
        "type": "inject",
        "z": "e3fdf7f2.0edec8",
        "name": "Initialize POST URLs",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 148.5,
        "y": 101,
        "wires": [
            [
                "b29ab1cb.8e7a1"
            ]
        ]
    },
    {
        "id": "7a3a71c8.534b1",
        "type": "debug",
        "z": "e3fdf7f2.0edec8",
        "name": "CMX POST URLs - Flow Context",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 686.5,
        "y": 144,
        "wires": []
    },
    {
        "id": "d18ef745.853808",
        "type": "comment",
        "z": "e3fdf7f2.0edec8",
        "name": "Write a Filter Here",
        "info": "",
        "x": 403.5,
        "y": 191,
        "wires": []
    },
    {
        "id": "5c861637.6371f8",
        "type": "switch",
        "z": "e3fdf7f2.0edec8",
        "name": "apTag contains DevNet",
        "property": "payload.data.apTags",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DevNet",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 412.5,
        "y": 236,
        "wires": [
            [
                "330db3e4.5f6b4c"
            ]
        ]
    }
]